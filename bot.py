"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ - –∞–Ω–∞–ª–æ–≥ Java ClashBot
"""
import asyncio
import logging
from typing import Dict, Any
import httpx
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode
from telegram.request import HTTPXRequest

from config import config
from database import DatabaseService
from coc_api import CocApiClient
from handlers import MessageHandler as BotMessageHandler, CallbackHandler as BotCallbackHandler
from message_generator import MessageGenerator
from war_archiver import WarArchiver
from building_monitor import BuildingMonitor
from keyboards import Keyboards

logger = logging.getLogger(__name__)


class ClashBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è Clash of Clans"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.token = config.BOT_TOKEN
        self.db_service = DatabaseService()
        self.coc_client = CocApiClient()
        self.message_generator = MessageGenerator(self.db_service, self.coc_client)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.message_handler = BotMessageHandler(self.message_generator)
        self.callback_handler = BotCallbackHandler(self.message_generator)
        
        # –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä –≤–æ–π–Ω
        self.war_archiver = None
        
        # –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–∞–Ω–∏–π
        self.building_monitor = None
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.application = None
        self.bot_instance = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        await self._init_components()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.token).build()
        self.bot_instance = self.application.bot
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _create_robust_http_client(self) -> HTTPXRequest:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        limits = httpx.Limits(
            max_keepalive_connections=20,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            max_connections=100,
            keepalive_expiry=30.0  # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∂–∏–≤—ã–º–∏ 30 —Å–µ–∫—É–Ω–¥
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        timeout = httpx.Timeout(
            connect=10.0,      # –¢–∞–π–º–∞—É—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            read=30.0,         # –¢–∞–π–º–∞—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            write=10.0,        # –¢–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø–∏—Å—å
            pool=60.0          # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        )
        
        # –°–æ–∑–¥–∞–µ–º HTTPXRequest —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        return HTTPXRequest(
            connection_pool_size=100,
            read_timeout=30.0,
            write_timeout=10.0,
            connect_timeout=10.0,
            pool_timeout=60.0
        )

    async def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db_service.init_db()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–Ω–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
            robust_request = self._create_robust_http_client()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
            temp_app = Application.builder().token(self.token).request(robust_request).build()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
            max_retries = 3
            retry_delay = 5  # —Å–µ–∫—É–Ω–¥—ã
            token_validated = False
            
            try:
                for attempt in range(max_retries):
                    try:
                        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})...")
                        await temp_app.bot.get_me()
                        logger.info("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                        token_validated = True
                        break
                    except Exception as e:
                        if attempt == max_retries - 1:
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                            logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                            raise ValueError(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
                        else:
                            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(retry_delay)
                            retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await temp_app.shutdown()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
            main_request = self._create_robust_http_client()
            self.application = Application.builder().token(self.token).request(main_request).build()
            self.bot_instance = self.application.bot
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω
            await self._start_war_archiver()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π
            await self._start_building_monitor()
            
            logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞: {e}")
            raise
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        app = self.application
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        app.add_handler(CommandHandler("start", self._start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.message_handler.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(self.callback_handler.handle_callback))
    
    async def _start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, payment_success)
        if context.args:
            command_arg = context.args[0]
            if command_arg.startswith('payment_success'):
                await self._handle_payment_success(update, context, command_arg)
                return
        
        from policy import get_policy_url
        
        await update.message.reply_text(
            "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClashBot!*\n\n"
            "üèÜ *–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n\n"
            "üë§ *–ü–†–û–§–ò–õ–ò –ò –ò–ì–†–û–ö–ò*\n"
            "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–ü—Ä–µ–º–∏—É–º)\n\n"
            "üõ° *–ö–õ–ê–ù–´ –ò –í–û–ô–ù–´*\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–µ –≤–æ–π–Ω—ã –∏ –õ–í–ö\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞—Ç–∞–∫ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–Ω–æ–≤\n\n"
            "üîî *–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø*\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–π–Ω–∞—Ö\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ü—Ä–µ–º–∏—É–º)\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö –∑–¥–∞–Ω–∏–π (–ü—Ä–µ–º–∏—É–º)\n\n"
            "üíé *–ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò*\n"
            "‚Ä¢ üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏\n"
            "‚Ä¢ ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üìã [–ü–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è]({get_policy_url()})\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=Keyboards.main_menu(),
            parse_mode='Markdown'
        )
    
    async def _handle_payment_success(self, update, context, command_arg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        chat_id = update.effective_chat.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        subscription_type = command_arg.replace('payment_success_', '') if '_' in command_arg else None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription = await self.db_service.get_subscription(chat_id)
        
        if subscription and subscription.is_active and not subscription.is_expired():
            subscription_name = self.message_generator.payment_service.get_subscription_name(subscription.subscription_type)
            end_date = subscription.end_date.strftime('%d.%m.%Y %H:%M')
            
            success_message = (
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ <b>{subscription_name}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                f"üí∞ –°—É–º–º–∞: {subscription.amount:.0f} ‚ÇΩ\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            
            await update.message.reply_text(
                success_message,
                parse_mode=ParseMode.HTML,
                reply_markup=Keyboards.main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n"
                "–ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
                reply_markup=Keyboards.main_menu()
            )
    
    async def _start_war_archiver(self):
        """–ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω"""
        try:
            self.war_archiver = WarArchiver(
                clan_tag=config.OUR_CLAN_TAG,
                db_service=self.db_service,
                coc_client=self.coc_client,
                bot_instance=self.bot_instance
            )
            await self.war_archiver.start()
            logger.info(f"–ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä –≤–æ–π–Ω –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–ª–∞–Ω–∞ {config.OUR_CLAN_TAG}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω: {e}")
    
    async def _start_building_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π"""
        try:
            self.building_monitor = BuildingMonitor(
                db_service=self.db_service,
                coc_client=self.coc_client,
                bot_instance=self.bot_instance
            )
            await self.building_monitor.start()
            
            # Store building monitor in bot_data for access in handlers
            self.application.bot_data['building_monitor'] = self.building_monitor
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        max_restart_attempts = 5
        restart_delay = 10  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        
        for restart_attempt in range(max_restart_attempts):
            try:
                # Initialize components first to catch configuration errors early
                await self._init_components()
                
                # Initialize the telegram application
                await self.application.initialize()
                
                # Start the application
                await self.application.start()
                
                logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                
                # Start polling with proper error handling
                await self.application.updater.start_polling(
                    allowed_updates=['message', 'callback_query'],
                    drop_pending_updates=True,
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                    poll_interval=2.0,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    timeout=20,         # –¢–∞–π–º–∞—É—Ç –¥–ª—è long polling
                    read_timeout=25,    # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                    write_timeout=25,   # –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                    connect_timeout=15  # –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                )
                
                # Keep the bot running until interrupted
                try:
                    # This will run indefinitely until stopped
                    await asyncio.Event().wait()
                except KeyboardInterrupt:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                    
            except ValueError as e:
                # Validation errors (like invalid token) - don't retry
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                break  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_attempt + 1}/{max_restart_attempts}): {e}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                if restart_attempt < max_restart_attempts - 1:
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥...")
                    
                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                    await self._cleanup()
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                    await asyncio.sleep(restart_delay)
                    restart_delay = min(restart_delay * 2, 300)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    self.application = None
                    self.bot_instance = None
                    self.war_archiver = None
                    self.building_monitor = None
                else:
                    logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    
        # Always ensure proper cleanup
        await self._cleanup()
    
    async def _shutdown_external_components(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–Ω–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö application)"""
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞
            if self.war_archiver:
                await self.war_archiver.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π
            if self.building_monitor:
                await self.building_monitor.stop()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ COC API
            if hasattr(self.coc_client, 'close'):
                await self.coc_client.close()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            if hasattr(self.message_generator, 'close'):
                await self.message_generator.close()
            
            logger.info("–í–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    async def _cleanup(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._shutdown_external_components()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ
            if self.application:
                try:
                    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    if hasattr(self.application, 'updater') and self.application.updater:
                        if self.application.updater.running:
                            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
                            await self.application.updater.stop()
                    
                    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    if self.application.running:
                        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                        await self.application.stop()
                    
                    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                    await self.application.shutdown()
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
            # –ù–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self._cleanup()
    
    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.bot_instance:
            await self.bot_instance.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    
    async def edit_message(self, chat_id: int, message_id: int, text: str, 
                          reply_markup=None, parse_mode=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.bot_instance:
            await self.bot_instance.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )