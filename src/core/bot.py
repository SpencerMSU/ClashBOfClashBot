"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ - –∞–Ω–∞–ª–æ–≥ Java ClashBot
"""
import asyncio
import logging
from typing import Dict, Any
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode

from config.config import config
from src.services.database import DatabaseService
from src.services.coc_api import CocApiClient
from src.core.handlers import MessageHandler as BotMessageHandler, CallbackHandler as BotCallbackHandler
from src.core.message_generator import MessageGenerator
from src.services.war_archiver import WarArchiver
from src.services.building_monitor import BuildingMonitor
from src.scanners.clan_scanner import ClanScanner
from src.core.keyboards import Keyboards

logger = logging.getLogger(__name__)


class ClashBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è Clash of Clans"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.token = config.BOT_TOKEN
        self.db_service = DatabaseService()
        self.coc_client = CocApiClient()
        self.message_generator = MessageGenerator(self.db_service, self.coc_client)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.message_handler = BotMessageHandler(self.message_generator)
        self.callback_handler = BotCallbackHandler(self.message_generator)
        
        # –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä –≤–æ–π–Ω
        self.war_archiver = None
        
        # –ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–∞–Ω–∏–π
        self.building_monitor = None
        
        # –°–∫–∞–Ω–µ—Ä –∫–ª–∞–Ω–æ–≤
        self.clan_scanner = None
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.application = None
        self.bot_instance = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞
        self.application = Application.builder().token(self.token).build()
        self.bot_instance = self.application.bot
        
        # –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º bot_instance
        await self._init_components()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.db_service.init_db()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (bot_instance —É–∂–µ —Å–æ–∑–¥–∞–Ω)
            try:
                await self.bot_instance.get_me()
            except Exception as e:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é: {e}")
                raise ValueError(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
            
            # –ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω
            await self._start_war_archiver()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π (—Ç–µ–ø–µ—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º bot_instance)
            await self._start_building_monitor()
            
            # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∫–ª–∞–Ω–æ–≤
            await self._start_clan_scanner()
            
            logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞: {e}")
            raise
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        app = self.application
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        app.add_handler(CommandHandler("start", self._start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.message_handler.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        app.add_handler(CallbackQueryHandler(self.callback_handler.handle_callback))
    
    async def _start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, payment_success)
        if context.args:
            command_arg = context.args[0]
            if command_arg.startswith('payment_success'):
                await self._handle_payment_success(update, context, command_arg)
                return
        
        from src.utils.policy import get_policy_url
        
        await update.message.reply_text(
            "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClashBot!*\n\n"
            "üèÜ *–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*\n\n"
            "üë§ *–ü–†–û–§–ò–õ–ò –ò –ò–ì–†–û–ö–ò*\n"
            "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–≥—É\n"
            "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–ü—Ä–µ–º–∏—É–º)\n\n"
            "üõ° *–ö–õ–ê–ù–´ –ò –í–û–ô–ù–´*\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–µ –≤–æ–π–Ω—ã –∏ –õ–í–ö\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞—Ç–∞–∫ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–Ω–æ–≤\n\n"
            "üîî *–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø*\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–π–Ω–∞—Ö\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ü—Ä–µ–º–∏—É–º)\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö –∑–¥–∞–Ω–∏–π (–ü—Ä–µ–º–∏—É–º)\n\n"
            "üíé *–ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò*\n"
            "‚Ä¢ üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏\n"
            "‚Ä¢ ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üìã [–ü–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è]({get_policy_url()})\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=Keyboards.main_menu(),
            parse_mode='Markdown'
        )
    
    async def _handle_payment_success(self, update, context, command_arg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        chat_id = update.effective_chat.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        subscription_type = command_arg.replace('payment_success_', '') if '_' in command_arg else None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription = await self.db_service.get_subscription(chat_id)
        
        if subscription and subscription.is_active and not subscription.is_expired():
            subscription_name = self.message_generator.payment_service.get_subscription_name(subscription.subscription_type)
            end_date = subscription.end_date.strftime('%d.%m.%Y %H:%M')
            
            success_message = (
                f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ <b>{subscription_name}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                f"üí∞ –°—É–º–º–∞: {subscription.amount:.0f} ‚ÇΩ\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            
            await update.message.reply_text(
                success_message,
                parse_mode=ParseMode.HTML,
                reply_markup=Keyboards.main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n"
                "–ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
                reply_markup=Keyboards.main_menu()
            )
    
    async def _start_war_archiver(self):
        """–ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω"""
        try:
            self.war_archiver = WarArchiver(
                clan_tag=config.OUR_CLAN_TAG,
                db_service=self.db_service,
                coc_client=self.coc_client,
                bot_instance=self.bot_instance
            )
            await self.war_archiver.start()
            logger.info(f"–ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä –≤–æ–π–Ω –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–ª–∞–Ω–∞ {config.OUR_CLAN_TAG}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω: {e}")
    
    async def _start_building_monitor(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π"""
        try:
            self.building_monitor = BuildingMonitor(
                db_service=self.db_service,
                coc_client=self.coc_client,
                bot_instance=self.bot_instance
            )
            await self.building_monitor.start()
            
            # Store building monitor in bot_data for access in handlers
            self.application.bot_data['building_monitor'] = self.building_monitor
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π: {e}")
    
    async def _start_clan_scanner(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∫–ª–∞–Ω–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if not config.ENABLE_GLOBAL_CLAN_SCANNING:
                logger.info("–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            self.clan_scanner = ClanScanner(
                db_service=self.db_service,
                coc_client=self.coc_client
            )
            await self.clan_scanner.start()
            logger.info("–°–∫–∞–Ω–µ—Ä –∫–ª–∞–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–µ—Ä–∞ –∫–ª–∞–Ω–æ–≤: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # Initialize bot application and instance first
            await self.initialize()
            
            # Initialize the telegram application
            await self.application.initialize()
            
            # Start the application
            await self.application.start()
            
            # Ensure building monitor is properly stored in bot_data after application is ready
            if self.building_monitor:
                self.application.bot_data['building_monitor'] = self.building_monitor
                logger.info("Building monitor stored in bot_data")
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            # Start polling with proper lifecycle management
            await self.application.updater.start_polling(
                allowed_updates=['message', 'callback_query'],
                drop_pending_updates=True
            )
            
            # Keep the bot running until interrupted
            try:
                # This will run indefinitely until stopped
                await asyncio.Event().wait()
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                
        except ValueError as e:
            # Validation errors (like invalid token) - don't initialize application
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            # Always ensure proper cleanup
            await self._cleanup()
    
    async def _shutdown_external_components(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–Ω–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö application)"""
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞
            if self.war_archiver:
                await self.war_archiver.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π
            if self.building_monitor:
                await self.building_monitor.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ –∫–ª–∞–Ω–æ–≤
            if self.clan_scanner:
                await self.clan_scanner.stop()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ COC API
            if hasattr(self.coc_client, 'close'):
                await self.coc_client.close()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            if hasattr(self.message_generator, 'close'):
                await self.message_generator.close()
            
            logger.info("–í–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    async def _cleanup(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._shutdown_external_components()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ
            if self.application:
                try:
                    if hasattr(self.application, 'updater') and self.application.updater.running:
                        await self.application.updater.stop()
                    
                    if self.application.running:
                        await self.application.stop()
                    
                    await self.application.shutdown()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")

    async def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        await self._cleanup()
    
    async def send_message(self, chat_id: int, text: str, reply_markup=None, parse_mode=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.bot_instance:
            await self.bot_instance.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    
    async def edit_message(self, chat_id: int, message_id: int, text: str, 
                          reply_markup=None, parse_mode=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.bot_instance:
            await self.bot_instance.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )