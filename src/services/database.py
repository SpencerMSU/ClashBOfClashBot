"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö - –∞–Ω–∞–ª–æ–≥ Java DatabaseService
"""
import aiosqlite
import logging
import os
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
import json

from src.models.user import User
from src.models.user_profile import UserProfile
from src.models.war import WarToSave, AttackData
from src.models.subscription import Subscription
from src.models.building import BuildingSnapshot, BuildingUpgrade, BuildingTracker
from src.models.linked_clan import LinkedClan
from config.config import config

logger = logging.getLogger(__name__)


class DatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = None):
        self.db_path = db_path or config.DATABASE_PATH
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        abs_path = os.path.abspath(self.db_path)
        logger.info(f"üìÇ DatabaseService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—É—Ç–µ–º: {abs_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –ë–î
        db_dir = os.path.dirname(abs_path)
        if not os.path.exists(db_dir):
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_dir}")
        elif not os.access(db_dir, os.W_OK):
            logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É –ë–î: {db_dir}")
        else:
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {db_dir}")
    
    async def init_db(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            async with aiosqlite.connect(self.db_path, timeout=30.0) as db:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                await db.execute("PRAGMA journal_mode=WAL")
                await db.execute("PRAGMA synchronous=NORMAL")
                await db.execute("PRAGMA cache_size=10000")
                await db.execute("PRAGMA temp_store=memory")
                await db.execute("PRAGMA busy_timeout=30000")  # 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                
                logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        telegram_id INTEGER PRIMARY KEY,
                        player_tag TEXT NOT NULL UNIQUE
                    )
                """)
                
                logger.info("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS user_profiles (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id INTEGER NOT NULL,
                        player_tag TEXT NOT NULL,
                        profile_name TEXT,
                        is_primary INTEGER NOT NULL DEFAULT 0,
                        created_at TEXT NOT NULL,
                        UNIQUE(telegram_id, player_tag)
                    )
                """)
                
                logger.info("‚öîÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–π–Ω...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–π–Ω
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS wars (
                        end_time TEXT PRIMARY KEY,
                        opponent_name TEXT NOT NULL,
                        team_size INTEGER NOT NULL,
                        clan_stars INTEGER NOT NULL DEFAULT 0,
                        opponent_stars INTEGER NOT NULL DEFAULT 0,
                        clan_destruction REAL NOT NULL DEFAULT 0.0,
                        opponent_destruction REAL NOT NULL DEFAULT 0.0,
                        clan_attacks_used INTEGER NOT NULL DEFAULT 0,
                        result TEXT NOT NULL,
                        is_cwl_war INTEGER NOT NULL DEFAULT 0,
                        total_violations INTEGER NOT NULL DEFAULT 0,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                logger.info("üó°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Ç–∞–∫...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Ç–∞–∫
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS attacks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        war_id TEXT NOT NULL,
                        attacker_tag TEXT NOT NULL,
                        attacker_name TEXT NOT NULL,
                        defender_tag TEXT NOT NULL,
                        stars INTEGER NOT NULL DEFAULT 0,
                        destruction REAL NOT NULL DEFAULT 0.0,
                        attack_order INTEGER NOT NULL DEFAULT 0,
                        attack_timestamp INTEGER NOT NULL DEFAULT 0,
                        is_rule_violation INTEGER NOT NULL DEFAULT 0,
                        FOREIGN KEY (war_id) REFERENCES wars (end_time)
                    )
                """)
                
                logger.info("üè∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS linked_clans (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id INTEGER NOT NULL,
                        clan_tag TEXT NOT NULL,
                        clan_name TEXT NOT NULL,
                        linked_at TEXT NOT NULL,
                        is_active INTEGER NOT NULL DEFAULT 1,
                        UNIQUE(telegram_id, clan_tag)
                    )
                """)
                
                logger.info("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS subscriptions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id INTEGER NOT NULL UNIQUE,
                        subscription_type TEXT NOT NULL,
                        start_date TEXT NOT NULL,
                        end_date TEXT NOT NULL,
                        is_active INTEGER NOT NULL DEFAULT 1,
                        payment_id TEXT,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                logger.info("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–¥–∞–Ω–∏–π...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–¥–∞–Ω–∏–π
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS buildings (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        player_tag TEXT NOT NULL,
                        building_name TEXT NOT NULL,
                        level INTEGER NOT NULL,
                        is_maxed INTEGER NOT NULL DEFAULT 0,
                        upgrade_cost INTEGER,
                        upgrade_time INTEGER,
                        last_updated TEXT DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(player_tag, building_name)
                    )
                """)
                
                logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–æ–Ω–∞—Ç–æ–≤...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–æ–Ω–∞—Ç–æ–≤
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS donation_snapshots (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        player_tag TEXT NOT NULL,
                        donations_given INTEGER NOT NULL DEFAULT 0,
                        donations_received INTEGER NOT NULL DEFAULT 0,
                        snapshot_date TEXT NOT NULL,
                        UNIQUE(player_tag, snapshot_date)
                    )
                """)
                
                logger.info("üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–π–Ω
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS war_scan_requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id INTEGER NOT NULL,
                        clan_tag TEXT NOT NULL,
                        request_type TEXT NOT NULL,
                        status TEXT NOT NULL DEFAULT 'pending',
                        wars_added INTEGER NOT NULL DEFAULT 0,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                        completed_at TEXT
                    )
                """)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                logger.info("‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_wars_end_time ON wars(end_time)")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_attacks_war_id ON attacks(war_id)")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_attacks_attacker ON attacks(attacker_tag)")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_linked_clans_telegram ON linked_clans(telegram_id)")
                await db.execute("CREATE INDEX IF NOT EXISTS idx_buildings_player ON buildings(player_tag)")
                
                await db.commit()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏!")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        
        # Add permanent PRO PLUS subscription for specified user
        await self._grant_permanent_proplus_subscription(5545099444)
    
    async def _grant_permanent_proplus_subscription(self, telegram_id: int):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–µ—á–Ω–æ–π PRO PLUS –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # Create a subscription that expires in 100 years (essentially permanent)
            start_date = datetime.now()
            end_date = start_date + timedelta(days=36500)  # ~100 years
            
            permanent_subscription = Subscription(
                telegram_id=telegram_id,
                subscription_type="proplus_permanent",
                start_date=start_date,
                end_date=end_date,
                is_active=True,
                payment_id="PERMANENT_GRANT",
                amount=0.0
            )
            
            await self.save_subscription(permanent_subscription)
            logger.info(f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–µ—á–Ω–∞—è PRO PLUS –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –≤–µ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    async def find_user(self, telegram_id: int) -> Optional[User]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT telegram_id, player_tag FROM users WHERE telegram_id = ?",
                (telegram_id,)
            ) as cursor:
                row = await cursor.fetchone()
                if row:
                    return User(telegram_id=row[0], player_tag=row[1])
                return None
    
    async def save_user(self, user: User) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT OR REPLACE INTO users (telegram_id, player_tag) VALUES (?, ?)",
                    (user.telegram_id, user.player_tag)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def delete_user(self, telegram_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        users = []
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    "SELECT telegram_id, player_tag FROM users"
                ) as cursor:
                    async for row in cursor:
                        users.append({
                            'telegram_id': row[0],
                            'player_tag': row[1]
                        })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return users

    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def save_user_profile(self, profile: UserProfile) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO user_profiles 
                    (telegram_id, player_tag, profile_name, is_primary, created_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (profile.telegram_id, profile.player_tag, profile.profile_name, 
                      profile.is_primary, profile.created_at))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    async def get_user_profiles(self, telegram_id: int) -> List[UserProfile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profiles = []
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("""
                    SELECT id, telegram_id, player_tag, profile_name, is_primary, created_at
                    FROM user_profiles WHERE telegram_id = ? ORDER BY is_primary DESC, created_at ASC
                """, (telegram_id,)) as cursor:
                    async for row in cursor:
                        profile = UserProfile(
                            telegram_id=row[1],
                            player_tag=row[2],
                            profile_name=row[3],
                            is_primary=bool(row[4]),
                            created_at=row[5]
                        )
                        profile.profile_id = row[0]
                        profiles.append(profile)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        return profiles

    async def delete_user_profile(self, telegram_id: int, player_tag: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    DELETE FROM user_profiles WHERE telegram_id = ? AND player_tag = ?
                """, (telegram_id, player_tag))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    async def get_user_profile_count(self, telegram_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("""
                    SELECT COUNT(*) FROM user_profiles WHERE telegram_id = ?
                """, (telegram_id,)) as cursor:
                    row = await cursor.fetchone()
                    return row[0] if row else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            return 0

    async def set_primary_profile(self, telegram_id: int, player_tag: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ primary —É –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db.execute("""
                    UPDATE user_profiles SET is_primary = 0 WHERE telegram_id = ?
                """, (telegram_id,))
                
                # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                await db.execute("""
                    UPDATE user_profiles SET is_primary = 1 
                    WHERE telegram_id = ? AND player_tag = ?
                """, (telegram_id, player_tag))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

    async def get_primary_profile(self, telegram_id: int) -> Optional[UserProfile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute("""
                    SELECT id, telegram_id, player_tag, profile_name, is_primary, created_at
                    FROM user_profiles WHERE telegram_id = ? AND is_primary = 1
                """, (telegram_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        profile = UserProfile(
                            telegram_id=row[1],
                            player_tag=row[2],
                            profile_name=row[3],
                            is_primary=bool(row[4]),
                            created_at=row[5]
                        )
                        profile.profile_id = row[0]
                        return profile
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return None
    
    async def save_war(self, war: WarToSave) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–π–Ω—ã —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        import asyncio
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                async with aiosqlite.connect(self.db_path, timeout=30.0) as db:
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                    await db.execute("PRAGMA busy_timeout=30000")
                    await db.execute("PRAGMA journal_mode=WAL")
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ
                    await db.execute("""
                        INSERT OR REPLACE INTO wars 
                        (end_time, opponent_name, team_size, clan_stars, opponent_stars,
                         clan_destruction, opponent_destruction, clan_attacks_used, result,
                         is_cwl_war, total_violations)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        war.end_time, war.opponent_name, war.team_size,
                        war.clan_stars, war.opponent_stars, war.clan_destruction,
                        war.opponent_destruction, war.clan_attacks_used, war.result,
                        1 if war.is_cwl_war else 0, war.total_violations
                    ))
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫
                    if war.attacks_by_member:
                        for member_tag, attacks in war.attacks_by_member.items():
                            for attack in attacks:
                                await db.execute("""
                                    INSERT INTO attacks 
                                    (war_id, attacker_tag, attacker_name, defender_tag,
                                     stars, destruction, attack_order, attack_timestamp, is_rule_violation)
                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                                """, (
                                    war.end_time, member_tag, attack.get('attacker_name', ''),
                                    attack.get('defender_tag', ''), attack.get('stars', 0),
                                    attack.get('destruction', 0.0), attack.get('order', 0),
                                    attack.get('timestamp', 0), attack.get('is_violation', 0)
                                ))
                    
                    await db.commit()
                    return True
                    
            except Exception as e:
                error_msg = str(e).lower()
                if ("database is locked" in error_msg or 
                    "can't start new thread" in error_msg or
                    "too many open files" in error_msg) and attempt < max_retries - 1:
                    
                    wait_time = 2 + attempt * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2, 4, 6 —Å–µ–∫—É–Ω–¥
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                    logger.warning(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–π–Ω—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    if attempt == max_retries - 1:
                        return False
        
        return False
    
    async def war_exists(self, end_time: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–æ–π–Ω—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        try:
            async with aiosqlite.connect(self.db_path, timeout=10.0) as db:
                await db.execute("PRAGMA busy_timeout=10000")
                async with db.execute(
                    "SELECT 1 FROM wars WHERE end_time = ?", (end_time,)
                ) as cursor:
                    row = await cursor.fetchone()
                    return row is not None
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–æ–π–Ω—ã {end_time}: {e}")
            return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤–æ–π–Ω—ã –Ω–µ—Ç
    
    async def get_subscribed_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT telegram_id FROM notifications") as cursor:
                rows = await cursor.fetchall()
                return [row[0] for row in rows]
    
    async def toggle_notifications(self, telegram_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
                async with db.execute(
                    "SELECT 1 FROM notifications WHERE telegram_id = ?", (telegram_id,)
                ) as cursor:
                    exists = await cursor.fetchone()
                
                if exists:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    await db.execute("DELETE FROM notifications WHERE telegram_id = ?", (telegram_id,))
                    await db.commit()
                    return False  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                    await db.execute("INSERT INTO notifications (telegram_id) VALUES (?)", (telegram_id,))
                    await db.commit()
                    return True  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def save_donation_snapshot(self, members: List[Dict], snapshot_time: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤"""
        if not snapshot_time:
            snapshot_time = datetime.now().isoformat()
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                for member in members:
                    await db.execute("""
                        INSERT OR REPLACE INTO player_stats_snapshots
                        (snapshot_time, player_tag, donations)
                        VALUES (?, ?, ?)
                    """, (
                        snapshot_time,
                        member.get('tag', ''),
                        member.get('donations', 0)
                    ))
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤: {e}")
    
    async def get_war_list(self, limit: int = 10, offset: int = 0) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("""
                SELECT end_time, opponent_name, team_size, clan_stars, opponent_stars,
                       result, is_cwl_war
                FROM wars 
                ORDER BY end_time DESC 
                LIMIT ? OFFSET ?
            """, (limit, offset)) as cursor:
                rows = await cursor.fetchall()
                return [
                    {
                        'end_time': row[0],
                        'opponent_name': row[1],
                        'team_size': row[2],
                        'clan_stars': row[3],
                        'opponent_stars': row[4],
                        'result': row[5],
                        'is_cwl_war': bool(row[6])
                    }
                    for row in rows
                ]
    
    async def get_cwl_bonus_data(self, year_month: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("""
                SELECT bonus_results_json FROM cwl_seasons 
                WHERE season_date LIKE ?
            """, (f"{year_month}%",)) as cursor:
                row = await cursor.fetchone()
                
                if row and row[0]:
                    try:
                        bonus_data = json.loads(row[0])
                        return bonus_data if isinstance(bonus_data, list) else []
                    except json.JSONDecodeError:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –±–æ–Ω—É—Å–æ–≤ –õ–í–ö –¥–ª—è {year_month}")
                        return []
                
                return []
    
    async def get_cwl_season_donation_stats(self, season_start: str, season_end: str) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Å–µ–∑–æ–Ω –õ–í–ö"""
        async with aiosqlite.connect(self.db_path) as db:
            # Get snapshots at the start and end of the season
            async with db.execute("""
                SELECT player_tag, donations, snapshot_time
                FROM player_stats_snapshots
                WHERE snapshot_time >= ? AND snapshot_time <= ?
                ORDER BY player_tag, snapshot_time
            """, (season_start, season_end)) as cursor:
                rows = await cursor.fetchall()
            
            # Calculate donation difference for each player
            player_donations = {}
            player_snapshots = {}
            
            for row in rows:
                player_tag = row[0]
                donations = row[1]
                snapshot_time = row[2]
                
                if player_tag not in player_snapshots:
                    player_snapshots[player_tag] = []
                player_snapshots[player_tag].append((snapshot_time, donations))
            
            # Calculate difference between first and last snapshot
            for player_tag, snapshots in player_snapshots.items():
                if len(snapshots) >= 2:
                    first_donations = snapshots[0][1]
                    last_donations = snapshots[-1][1]
                    player_donations[player_tag] = max(0, last_donations - first_donations)
                elif len(snapshots) == 1:
                    player_donations[player_tag] = snapshots[0][1]
            
            return player_donations
    
    async def get_cwl_season_attack_stats(self, season_start: str, season_end: str) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Å–µ–∑–æ–Ω –õ–í–ö"""
        async with aiosqlite.connect(self.db_path) as db:
            # Get all wars in the season
            async with db.execute("""
                SELECT end_time, is_cwl_war
                FROM wars
                WHERE end_time >= ? AND end_time <= ?
                ORDER BY end_time
            """, (season_start, season_end)) as cursor:
                war_rows = await cursor.fetchall()
            
            # Get all attacks for these wars
            player_stats = {}
            
            for war_row in war_rows:
                war_end_time = war_row[0]
                is_cwl = bool(war_row[1])
                
                async with db.execute("""
                    SELECT attacker_tag, COUNT(*) as attack_count
                    FROM attacks
                    WHERE war_id = ?
                    GROUP BY attacker_tag
                """, (war_end_time,)) as cursor:
                    attack_rows = await cursor.fetchall()
                
                for attack_row in attack_rows:
                    player_tag = attack_row[0]
                    attack_count = attack_row[1]
                    
                    if player_tag not in player_stats:
                        player_stats[player_tag] = {
                            'cwl_attacks': 0,
                            'regular_attacks': 0,
                            'cwl_wars': 0,
                            'regular_wars': 0
                        }
                    
                    if is_cwl:
                        player_stats[player_tag]['cwl_attacks'] += attack_count
                        player_stats[player_tag]['cwl_wars'] += 1
                    else:
                        player_stats[player_tag]['regular_attacks'] += attack_count
                        player_stats[player_tag]['regular_wars'] += 1
            
            return player_stats
    
    async def get_war_details(self, end_time: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        async with aiosqlite.connect(self.db_path) as db:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–π–Ω–µ
            async with db.execute("""
                SELECT * FROM wars WHERE end_time = ?
            """, (end_time,)) as cursor:
                war_row = await cursor.fetchone()
                if not war_row:
                    return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç–∞–∫–∏
            async with db.execute("""
                SELECT attacker_tag, attacker_name, defender_tag, stars, destruction,
                       attack_order, attack_timestamp, is_rule_violation
                FROM attacks WHERE war_id = ?
                ORDER BY attack_order
            """, (end_time,)) as cursor:
                attack_rows = await cursor.fetchall()
            
            war_data = {
                'end_time': war_row[0],
                'opponent_name': war_row[1],
                'team_size': war_row[2],
                'clan_stars': war_row[3],
                'opponent_stars': war_row[4],
                'clan_destruction': war_row[5],
                'opponent_destruction': war_row[6],
                'clan_attacks_used': war_row[7],
                'result': war_row[8],
                'is_cwl_war': bool(war_row[9]),
                'total_violations': war_row[10],
                'attacks': [
                    {
                        'attacker_tag': attack[0],
                        'attacker_name': attack[1],
                        'defender_tag': attack[2],
                        'stars': attack[3],
                        'destruction': attack[4],
                        'order': attack[5],
                        'timestamp': attack[6],
                        'is_violation': bool(attack[7])
                    }
                    for attack in attack_rows
                ]
            }
            
            return war_data
    
    async def save_subscription(self, subscription: Subscription) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                now = datetime.now().isoformat()
                await db.execute("""
                    INSERT OR REPLACE INTO subscriptions 
                    (telegram_id, subscription_type, start_date, end_date, is_active, 
                     payment_id, amount, currency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    subscription.telegram_id,
                    subscription.subscription_type,
                    subscription.start_date.isoformat(),
                    subscription.end_date.isoformat(),
                    1 if subscription.is_active else 0,
                    subscription.payment_id,
                    subscription.amount,
                    subscription.currency,
                    now,
                    now
                ))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def get_subscription(self, telegram_id: int) -> Optional[Subscription]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("""
                SELECT telegram_id, subscription_type, start_date, end_date, is_active,
                       payment_id, amount, currency
                FROM subscriptions 
                WHERE telegram_id = ?
            """, (telegram_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return Subscription(
                        telegram_id=row[0],
                        subscription_type=row[1],
                        start_date=datetime.fromisoformat(row[2]),
                        end_date=datetime.fromisoformat(row[3]),
                        is_active=bool(row[4]),
                        payment_id=row[5],
                        amount=row[6],
                        currency=row[7] or "RUB"
                    )
                return None
    
    async def extend_subscription(self, telegram_id: int, additional_days: int) -> bool:
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            subscription = await self.get_subscription(telegram_id)
            if subscription:
                # –ü—Ä–æ–¥–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                new_end_date = subscription.end_date + timedelta(days=additional_days)
                subscription.end_date = new_end_date
                subscription.is_active = True
                return await self.save_subscription(subscription)
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def deactivate_subscription(self, telegram_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    UPDATE subscriptions 
                    SET is_active = 0, updated_at = ?
                    WHERE telegram_id = ?
                """, (datetime.now().isoformat(), telegram_id))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def get_expired_subscriptions(self) -> List[Subscription]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        async with aiosqlite.connect(self.db_path) as db:
            current_time = datetime.now().isoformat()
            async with db.execute("""
                SELECT telegram_id, subscription_type, start_date, end_date, is_active,
                       payment_id, amount, currency
                FROM subscriptions 
                WHERE is_active = 1 AND end_date < ?
            """, (current_time,)) as cursor:
                rows = await cursor.fetchall()
                return [
                    Subscription(
                        telegram_id=row[0],
                        subscription_type=row[1],
                        start_date=datetime.fromisoformat(row[2]),
                        end_date=datetime.fromisoformat(row[3]),
                        is_active=bool(row[4]),
                        payment_id=row[5],
                        amount=row[6],
                        currency=row[7] or "RUB"
                    )
                    for row in rows
                ]
    
    async def is_notifications_enabled(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT telegram_id FROM notifications WHERE telegram_id = ?",
                (telegram_id,)
            ) as cursor:
                row = await cursor.fetchone()
                return row is not None
    
    async def enable_notifications(self, telegram_id: int) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT OR IGNORE INTO notifications (telegram_id) VALUES (?)",
                    (telegram_id,)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def disable_notifications(self, telegram_id: int) -> bool:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "DELETE FROM notifications WHERE telegram_id = ?",
                    (telegram_id,)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def get_notification_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT telegram_id FROM notifications") as cursor:
                rows = await cursor.fetchall()
                return [row[0] for row in rows]
    
    # Building tracking methods
    async def save_building_tracker(self, tracker: BuildingTracker) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO building_trackers 
                    (telegram_id, player_tag, is_active, created_at, last_check)
                    VALUES (?, ?, ?, ?, ?)
                """, (tracker.telegram_id, tracker.player_tag, int(tracker.is_active), 
                      tracker.created_at, tracker.last_check))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def get_building_tracker(self, telegram_id: int) -> Optional[BuildingTracker]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π)"""
        trackers = await self.get_user_building_trackers(telegram_id)
        return trackers[0] if trackers else None

    async def get_user_building_trackers(self, telegram_id: int) -> List[BuildingTracker]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT telegram_id, player_tag, is_active, created_at, last_check FROM building_trackers WHERE telegram_id = ?",
                (telegram_id,)
            ) as cursor:
                rows = await cursor.fetchall()
                return [BuildingTracker(
                    telegram_id=row[0],
                    player_tag=row[1],
                    is_active=bool(row[2]),
                    created_at=row[3],
                    last_check=row[4]
                ) for row in rows]

    async def get_building_tracker_for_profile(self, telegram_id: int, player_tag: str) -> Optional[BuildingTracker]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT telegram_id, player_tag, is_active, created_at, last_check FROM building_trackers WHERE telegram_id = ? AND player_tag = ?",
                (telegram_id, player_tag)
            ) as cursor:
                row = await cursor.fetchone()
                if row:
                    return BuildingTracker(
                        telegram_id=row[0],
                        player_tag=row[1],
                        is_active=bool(row[2]),
                        created_at=row[3],
                        last_check=row[4]
                    )
                return None

    async def toggle_building_tracker_for_profile(self, telegram_id: int, player_tag: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–∫–µ—Ä
                async with db.execute(
                    "SELECT is_active FROM building_trackers WHERE telegram_id = ? AND player_tag = ?",
                    (telegram_id, player_tag)
                ) as cursor:
                    row = await cursor.fetchone()
                    
                    if row:
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        new_state = not bool(row[0])
                        await db.execute(
                            "UPDATE building_trackers SET is_active = ? WHERE telegram_id = ? AND player_tag = ?",
                            (int(new_state), telegram_id, player_tag)
                        )
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
                        tracker = BuildingTracker(
                            telegram_id=telegram_id,
                            player_tag=player_tag,
                            is_active=True,
                            created_at=datetime.now().isoformat()
                        )
                        await db.execute("""
                            INSERT INTO building_trackers 
                            (telegram_id, player_tag, is_active, created_at, last_check)
                            VALUES (?, ?, ?, ?, ?)
                        """, (tracker.telegram_id, tracker.player_tag, int(tracker.is_active), 
                              tracker.created_at, tracker.last_check))
                    
                    await db.commit()
                    return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def get_active_building_trackers(self) -> List[BuildingTracker]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª–µ–π –∑–¥–∞–Ω–∏–π"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT telegram_id, player_tag, is_active, created_at, last_check FROM building_trackers WHERE is_active = 1"
            ) as cursor:
                rows = await cursor.fetchall()
                return [BuildingTracker(
                    telegram_id=row[0],
                    player_tag=row[1], 
                    is_active=bool(row[2]),
                    created_at=row[3],
                    last_check=row[4]
                ) for row in rows]
    
    async def save_building_snapshot(self, snapshot: BuildingSnapshot) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO building_snapshots 
                    (player_tag, snapshot_time, buildings_data)
                    VALUES (?, ?, ?)
                """, (snapshot.player_tag, snapshot.snapshot_time, snapshot.buildings_data))
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞ –∑–¥–∞–Ω–∏–π: {e}")
            return False
    
    async def get_latest_building_snapshot(self, player_tag: str) -> Optional[BuildingSnapshot]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞ –∑–¥–∞–Ω–∏–π –∏–≥—Ä–æ–∫–∞"""
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute(
                "SELECT player_tag, snapshot_time, buildings_data FROM building_snapshots WHERE player_tag = ? ORDER BY snapshot_time DESC LIMIT 1",
                (player_tag,)
            ) as cursor:
                row = await cursor.fetchone()
                if row:
                    return BuildingSnapshot(
                        player_tag=row[0],
                        snapshot_time=row[1],
                        buildings_data=row[2]
                    )
                return None
    
    async def update_tracker_last_check(self, telegram_id: int, last_check: str, player_tag: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                if player_tag:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    await db.execute(
                        "UPDATE building_trackers SET last_check = ? WHERE telegram_id = ? AND player_tag = ?",
                        (last_check, telegram_id, player_tag)
                    )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    await db.execute(
                        "UPDATE building_trackers SET last_check = ? WHERE telegram_id = ?",
                        (last_check, telegram_id)
                    )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–ª–∞–Ω–∞–º–∏
    async def get_linked_clans(self, telegram_id: int) -> List[LinkedClan]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    "SELECT id, telegram_id, clan_tag, clan_name, slot_number, created_at "
                    "FROM linked_clans WHERE telegram_id = ? ORDER BY slot_number",
                    (telegram_id,)
                ) as cursor:
                    rows = await cursor.fetchall()
                    return [LinkedClan(
                        id=row[0],
                        telegram_id=row[1],
                        clan_tag=row[2],
                        clan_name=row[3],
                        slot_number=row[4],
                        created_at=row[5]
                    ) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {e}")
            return []
    
    async def save_linked_clan(self, linked_clan: LinkedClan) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT OR REPLACE INTO linked_clans "
                    "(telegram_id, clan_tag, clan_name, slot_number, created_at) "
                    "VALUES (?, ?, ?, ?, ?)",
                    (linked_clan.telegram_id, linked_clan.clan_tag, linked_clan.clan_name,
                     linked_clan.slot_number, linked_clan.created_at)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞: {e}")
            return False
    
    async def delete_linked_clan(self, telegram_id: int, slot_number: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å–ª–æ—Ç–∞"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "DELETE FROM linked_clans WHERE telegram_id = ? AND slot_number = ?",
                    (telegram_id, slot_number)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞: {e}")
            return False
    
    async def get_max_linked_clans_for_user(self, telegram_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            subscription = await self.get_subscription(telegram_id)
            if subscription and subscription.is_active and not subscription.is_expired():
                if subscription.subscription_type in ["proplus", "proplus_permanent"]:
                    return 5  # Pro Plus
                elif subscription.subscription_type in ["premium"]:
                    return 3  # Premium
            return 1  # Regular user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {e}")
            return 1
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–π–Ω
    async def can_request_war_scan(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–π–Ω (1 —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å)"""
        try:
            today = datetime.now().date().isoformat()
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    "SELECT COUNT(*) FROM war_scan_requests "
                    "WHERE telegram_id = ? AND request_date = ? AND status = 'success'",
                    (telegram_id, today)
                ) as cursor:
                    row = await cursor.fetchone()
                    count = row[0] if row else 0
                    return count == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def save_war_scan_request(self, telegram_id: int, clan_tag: str, status: str, wars_added: int = 0) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–π–Ω"""
        try:
            today = datetime.now().date().isoformat()
            created_at = datetime.now().isoformat()
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "INSERT INTO war_scan_requests "
                    "(telegram_id, clan_tag, request_date, status, wars_added, created_at) "
                    "VALUES (?, ?, ?, ?, ?, ?)",
                    (telegram_id, clan_tag, today, status, wars_added, created_at)
                )
                await db.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def get_war_scan_requests_today(self, telegram_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().date().isoformat()
            async with aiosqlite.connect(self.db_path) as db:
                async with db.execute(
                    "SELECT COUNT(*) FROM war_scan_requests "
                    "WHERE telegram_id = ? AND request_date = ? AND status = 'success'",
                    (telegram_id, today)
                ) as cursor:
                    row = await cursor.fetchone()
                    return row[0] if row else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            return 0