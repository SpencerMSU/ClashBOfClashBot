"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ YooKassa
"""
import logging
import aiohttp
import json
from typing import Dict, Optional
from datetime import datetime, timedelta
import uuid
from config import config

logger = logging.getLogger(__name__)


class YooKassaService:

    TEST_SHOP_ID = "1164328"
    TEST_SECRET_KEY = "live_FVe4M7peyvzGPRZrM4UJq4pF6soCfuv4VZEgntsPmhs"
    API_URL = "https://api.yookassa.ru/v3"
    
    # –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ä—É–±–ª—è—Ö (—Å–Ω–∏–∂–µ–Ω—ã)
    SUBSCRIPTION_PRICES = {
        # Premium
        "premium_1month": 49.00,
        "premium_3months": 119.00,
        "premium_6months": 199.00,
        "premium_1year": 349.00,
        # PRO PLUS  
        "proplus_1month": 99.00,
        "proplus_3months": 249.00,
        "proplus_6months": 449.00,
        "proplus_1year": 799.00,
        # Legacy support
        "1month": 49.00,
        "3months": 119.00,
        "6months": 199.00,
        "1year": 349.00
    }
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    SUBSCRIPTION_NAMES = {
        # Premium
        "premium_1month": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "premium_3months": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "premium_6months": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", 
        "premium_1year": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥",
        # PRO PLUS
        "proplus_1month": "ClashBot –ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "proplus_3months": "ClashBot –ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "proplus_6months": "ClashBot –ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        "proplus_1year": "ClashBot –ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥",
        "proplus_permanent": "ClashBot –ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞ (–í–µ—á–Ω–∞—è)",
        # Legacy support
        "1month": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "3months": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "6months": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
        "1year": "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥"
    }
    
    def __init__(self, bot_username: str = None):
        self.session = None
        self.bot_username = bot_username or "YourBotUsername"
    
    async def _get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
    
    def _get_auth_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        import base64
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º credentials –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        shop_id = config.YOOKASSA_SHOP_ID or self.TEST_SHOP_ID
        secret_key = config.YOOKASSA_SECRET_KEY or self.TEST_SECRET_KEY
        
        credentials = f"{shop_id}:{secret_key}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        
        return {
            "Authorization": f"Basic {encoded_credentials}",
            "Content-Type": "application/json",
            "Idempotence-Key": str(uuid.uuid4())
        }
    
    async def create_payment(self, telegram_id: int, subscription_type: str, 
                           return_url: str = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa"""
        try:
            if subscription_type not in self.SUBSCRIPTION_PRICES:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}")
                return None
            
            amount = self.SUBSCRIPTION_PRICES[subscription_type]
            description = self.SUBSCRIPTION_NAMES[subscription_type]
            
            payment_data = {
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url or f"https://t.me/{self.bot_username}"
                },
                "capture": True,
                "description": description,
                "metadata": {
                    "telegram_id": str(telegram_id),
                    "subscription_type": subscription_type,
                    "created_at": datetime.now().isoformat()
                }
            }
            
            session = await self._get_session()
            async with session.post(
                f"{self.API_URL}/payments",
                headers=self._get_auth_headers(),
                data=json.dumps(payment_data)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {result.get('id')}")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.status} - {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    async def check_payment_status(self, payment_id: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            session = await self._get_session()
            async with session.get(
                f"{self.API_URL}/payments/{payment_id}",
                headers=self._get_auth_headers()
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {response.status} - {error_text}")
                    return None
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    def get_subscription_duration(self, subscription_type: str) -> timedelta:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if 'permanent' in subscription_type:
            return timedelta(days=36500)  # 100 –ª–µ—Ç –¥–ª—è –≤–µ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        elif '1month' in subscription_type:
            return timedelta(days=30)
        elif '3months' in subscription_type:
            return timedelta(days=90)
        elif '6months' in subscription_type:
            return timedelta(days=180)
        elif '1year' in subscription_type:
            return timedelta(days=365)
        else:
            # Fallback –¥–ª—è legacy —Ñ–æ—Ä–º–∞—Ç–æ–≤
            durations = {
                "1month": timedelta(days=30),
                "3months": timedelta(days=90),
                "6months": timedelta(days=180),
                "1year": timedelta(days=365)
            }
            return durations.get(subscription_type, timedelta(days=30))
    
    def get_subscription_price(self, subscription_type: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        return self.SUBSCRIPTION_PRICES.get(subscription_type, 0.0)
    
    def get_subscription_name(self, subscription_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        return self.SUBSCRIPTION_NAMES.get(subscription_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
    
    async def create_refund(self, payment_id: str, amount: float, reason: str = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            refund_data = {
                "amount": {
                    "value": f"{amount:.2f}",
                    "currency": "RUB"
                },
                "payment_id": payment_id
            }
            
            if reason:
                refund_data["description"] = reason
            
            session = await self._get_session()
            async with session.post(
                f"{self.API_URL}/refunds",
                headers=self._get_auth_headers(),
                json=refund_data
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω: {result.get('id')}")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {response.status} - {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
            return None
    
    async def process_refund_notification(self, telegram_id: int, payment_id: str, 
                                        refund_amount: float, bot) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ"""
        try:
            # –£–º–µ–Ω—å—à–∞–µ–º –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –≠—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ database service
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification_text = (
                f"üîÑ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ*\n\n"
                f"–ë—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å ID `{payment_id}`.\n"
                f"–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {refund_amount:.2f} ‚ÇΩ\n\n"
                f"–î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                f"–ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–æ—á–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É @Negodayo"
            )
            
            await bot.send_message(
                chat_id=telegram_id,
                text=notification_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
            return False