"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Java MessageGenerator
"""
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import DatabaseService
from coc_api import CocApiClient, format_clan_tag, format_player_tag
from keyboards import Keyboards, WarSort, MemberSort, MemberView
from models.user import User
from config import config

logger = logging.getLogger(__name__)


class MessageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_service: DatabaseService, coc_client: CocApiClient):
        self.db_service = db_service
        self.coc_client = coc_client
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.MEMBERS_PER_PAGE = 10
        self.WARS_PER_PAGE = 10
        
        self.ROLE_TRANSLATIONS = {
            "leader": "üëë –ì–ª–∞–≤–∞",
            "coLeader": "‚öúÔ∏è –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", 
            "admin": "üî∞ –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
            "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
        }
    
    async def handle_profile_menu_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            user = await self.db_service.find_user(chat_id)
            if user:
                async with self.coc_client as client:
                    player_data = await client.get_player_info(user.player_tag)
                    player_name = player_data.get('name') if player_data else None
                    
                    await update.message.reply_text(
                        "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                        reply_markup=Keyboards.profile_menu(player_name)
                    )
            else:
                await update.message.reply_text(
                    "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                    reply_markup=Keyboards.profile_menu(None)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text(
                "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=Keyboards.profile_menu(None)
            )
    
    async def handle_my_profile_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        await self.display_player_info(update, context, user.player_tag, 
                                     Keyboards.clan_inspection_menu())
    
    async def handle_link_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        chat_id = update.effective_chat.id
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                await update.message.reply_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.",
                    reply_markup=Keyboards.profile_menu(None)
                )
                return
            
            user = User(telegram_id=chat_id, player_tag=player_tag)
            success = await self.db_service.save_user(user)
            
            if success:
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                await update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                    f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
                    f"üè∑ –¢–µ–≥: {player_tag}",
                    reply_markup=Keyboards.profile_menu(player_name)
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=Keyboards.profile_menu(None)
                )
    
    async def handle_my_clan_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(user.player_tag)
            
            if not player_data or 'clan' not in player_data:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.",
                    reply_markup=Keyboards.profile_menu(player_data.get('name') if player_data else None)
                )
                return
            
            clan_tag = player_data['clan']['tag']
            await self.display_clan_info(update, context, clan_tag)
    
    async def display_player_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 player_tag: str, keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                await update.message.reply_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            message = self._format_player_info(player_data)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                )
    
    async def display_clan_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        async with self.coc_client as client:
            clan_data = await client.get_clan_info(clan_tag)
            
            if not clan_data:
                await update.message.reply_text(
                    "‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['inspecting_clan'] = clan_tag
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
            message = self._format_clan_info(clan_data)
            keyboard = Keyboards.clan_inspection_menu()
            
            await update.message.reply_text(
                message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
            )
    
    async def display_members_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                  clan_tag: str, page: int, sort_type: str, view_type: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        async with self.coc_client as client:
            members_data = await client.get_clan_members(clan_tag)
            
            if not members_data:
                await update.callback_query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞."
                )
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            sorted_members = self._sort_members(members_data, sort_type)
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_members = len(sorted_members)
            total_pages = (total_members + self.MEMBERS_PER_PAGE - 1) // self.MEMBERS_PER_PAGE
            start_idx = (page - 1) * self.MEMBERS_PER_PAGE
            end_idx = start_idx + self.MEMBERS_PER_PAGE
            page_members = sorted_members[start_idx:end_idx]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_members_page(page_members, page, total_pages, total_members, view_type)
            keyboard = Keyboards.members_pagination(clan_tag, page, total_pages, sort_type, view_type)
            
            await update.callback_query.edit_message_text(
                message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
            )
    
    async def display_war_list_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   clan_tag: str, sort_order: str, page: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–π–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        offset = (page - 1) * self.WARS_PER_PAGE
        wars = await self.db_service.get_war_list(self.WARS_PER_PAGE, offset)
        
        if not wars:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        filtered_wars = self._filter_wars_by_sort(wars, sort_order)
        
        total_wars = len(filtered_wars)
        total_pages = (total_wars + self.WARS_PER_PAGE - 1) // self.WARS_PER_PAGE
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_war_list(filtered_wars, page, total_pages)
        keyboard = Keyboards.war_list_pagination(clan_tag, page, total_pages, sort_order)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def display_single_war_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                        clan_tag: str, war_end_time: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        war_details = await self.db_service.get_war_details(war_end_time)
        
        if not war_details:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        message = self._format_war_details(war_details)
        keyboard = Keyboards.war_details_menu(clan_tag, war_end_time)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def handle_notifications_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        subscribed_users = await self.db_service.get_subscribed_users()
        is_subscribed = chat_id in subscribed_users
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if is_subscribed else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö: *{status_text}*\n\n" \
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        
        await update.message.reply_text(
            message, 
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=Keyboards.notification_toggle()
        )
    
    async def handle_notification_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       message_id: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        is_enabled = await self.db_service.toggle_notifications(chat_id)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö: *{status_text}*\n\n" \
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=Keyboards.notification_toggle()
        )
    
    def _format_player_info(self, player_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = player_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        th_level = player_data.get('townHallLevel', 0)
        trophies = player_data.get('trophies', 0)
        best_trophies = player_data.get('bestTrophies', 0)
        exp_level = player_data.get('expLevel', 0)
        
        message = f"üë§ *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üè∞ –†–∞—Ç—É—à–∞: {th_level} —É—Ä–æ–≤–µ–Ω—å\n"
        message += f"üèÜ –¢—Ä–æ—Ñ–µ–∏: {trophies:,}\n"
        message += f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_trophies:,}\n"
        message += f"‚≠ê –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {exp_level}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
        clan_info = player_data.get('clan')
        if clan_info:
            clan_name = clan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_tag = clan_info.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_role = clan_info.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(clan_role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            
            message += f"\nüõ° *–ö–ª–∞–Ω:* {clan_name}\n"
            message += f"üè∑ `{clan_tag}`\n"
            message += f"üëë –†–æ–ª—å: {role_text}"
        else:
            message += f"\nüö´ –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ"
        
        return message
    
    def _format_clan_info(self, clan_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        name = clan_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = clan_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = clan_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        members_count = clan_data.get('members', 0)
        war_wins = clan_data.get('warWins', 0)
        war_losses = clan_data.get('warLosses', 0)
        war_ties = clan_data.get('warTies', 0)
        
        # –õ–æ–∫–∞—Ü–∏—è
        location = clan_data.get('location', {})
        location_name = location.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if location else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        message = f"üõ° *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üìù {description}\n\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {members_count}/50\n"
        message += f"üåç –õ–æ–∫–∞—Ü–∏—è: {location_name}\n\n"
        message += f"‚öîÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω:*\n"
        message += f"üèÜ –ü–æ–±–µ–¥—ã: {war_wins}\n"
        message += f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {war_losses}\n"
        message += f"ü§ù –ù–∏—á—å–∏: {war_ties}\n"
        
        total_wars = war_wins + war_losses + war_ties
        if total_wars > 0:
            win_rate = (war_wins / total_wars) * 100
            message += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%"
        
        return message
    
    def _format_members_page(self, members: List[Dict], page: int, total_pages: int, 
                           total_members: int, view_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        message = f"üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞* (—Å—Ç—Ä. {page}/{total_pages})\n"
        message += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}\n\n"
        
        for i, member in enumerate(members, 1):
            name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            tag = member.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            role = member.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            trophies = member.get('trophies', 0)
            
            if view_type == MemberView.DETAILED:
                donations = member.get('donations', 0)
                received = member.get('donationsReceived', 0)
                
                message += f"**{i + (page-1) * self.MEMBERS_PER_PAGE}.** {name}\n"
                message += f"   üè∑ `{tag}`\n"
                message += f"   üëë {role_text}\n"
                message += f"   üèÜ {trophies:,} —Ç—Ä–æ—Ñ–µ–µ–≤\n"
                message += f"   üì§ –û—Ç–¥–∞–Ω–æ: {donations:,}\n"
                message += f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {received:,}\n\n"
            else:
                message += f"**{i + (page-1) * self.MEMBERS_PER_PAGE}.** {role_text} {name} - üèÜ {trophies:,}\n"
        
        return message
    
    def _format_war_list(self, wars: List[Dict], page: int, total_pages: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        message = f"‚öîÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω* (—Å—Ç—Ä. {page}/{total_pages})\n\n"
        
        for i, war in enumerate(wars, 1):
            opponent_name = war['opponent_name']
            team_size = war['team_size']
            clan_stars = war['clan_stars']
            opponent_stars = war['opponent_stars']
            result = war['result']
            is_cwl = war['is_cwl_war']
            
            result_emoji = {"win": "üèÜ", "lose": "‚ùå", "tie": "ü§ù"}.get(result, "‚ùì")
            war_type = "üèÜ –õ–í–ö" if is_cwl else "‚öîÔ∏è –ö–í"
            
            message += f"**{i}.** {result_emoji} vs {opponent_name}\n"
            message += f"   {war_type} {team_size}–Ω–∞{team_size} | {clan_stars}‚≠ê - {opponent_stars}‚≠ê\n\n"
        
        return message
    
    def _format_war_details(self, war: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        opponent_name = war['opponent_name']
        team_size = war['team_size']
        clan_stars = war['clan_stars']
        opponent_stars = war['opponent_stars']
        clan_destruction = war['clan_destruction']
        opponent_destruction = war['opponent_destruction']
        result = war['result']
        is_cwl = war['is_cwl_war']
        total_violations = war['total_violations']
        attacks = war.get('attacks', [])
        
        result_text = {"win": "üèÜ –ü–æ–±–µ–¥–∞", "lose": "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "tie": "ü§ù –ù–∏—á—å—è"}.get(result, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        war_type = "üèÜ –õ–∏–≥–∞ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤" if is_cwl else "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞"
        
        message = f"‚öîÔ∏è *–î–µ—Ç–∞–ª–∏ –≤–æ–π–Ω—ã*\n\n"
        message += f"üõ° –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_name}\n"
        message += f"üë• –†–∞–∑–º–µ—Ä: {team_size} –Ω–∞ {team_size}\n"
        message += f"üè∑ –¢–∏–ø: {war_type}\n"
        message += f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}\n\n"
        message += f"‚≠ê *–ó–≤–µ–∑–¥—ã:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_stars}\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_stars}\n\n"
        message += f"üí• *–†–∞–∑—Ä—É—à–µ–Ω–∏—è:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_destruction:.1f}%\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_destruction:.1f}%\n\n"
        message += f"üö´ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª: {total_violations}\n"
        message += f"‚öîÔ∏è –í—Å–µ–≥–æ –∞—Ç–∞–∫: {len(attacks)}"
        
        return message
    
    def _sort_members(self, members: List[Dict], sort_type: str) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        if sort_type == MemberSort.ROLE:
            role_order = {"leader": 0, "coLeader": 1, "admin": 2, "member": 3}
            return sorted(members, key=lambda m: (role_order.get(m.get('role', 'member'), 3), -m.get('trophies', 0)))
        elif sort_type == MemberSort.TROPHIES:
            return sorted(members, key=lambda m: -m.get('trophies', 0))
        elif sort_type == MemberSort.DONATIONS:
            return sorted(members, key=lambda m: -m.get('donations', 0))
        elif sort_type == MemberSort.NAME:
            return sorted(members, key=lambda m: m.get('name', '').lower())
        else:
            return members
    
    def _filter_wars_by_sort(self, wars: List[Dict], sort_order: str) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–π–Ω –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        if sort_order == WarSort.WINS:
            return [war for war in wars if war['result'] == 'win']
        elif sort_order == WarSort.LOSSES:
            return [war for war in wars if war['result'] == 'lose']
        elif sort_order == WarSort.CWL_ONLY:
            return [war for war in wars if war['is_cwl_war']]
        else:
            return wars  # RECENT - —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ