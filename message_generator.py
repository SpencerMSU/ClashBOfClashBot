"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Java MessageGenerator
"""
import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import DatabaseService
from coc_api import CocApiClient, format_clan_tag, format_player_tag
from keyboards import Keyboards, WarSort, MemberSort, MemberView
from models.user import User
from models.subscription import Subscription
from payment_service import YooKassaService
from config import config

logger = logging.getLogger(__name__)


class MessageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_service: DatabaseService, coc_client: CocApiClient):
        self.db_service = db_service
        self.coc_client = coc_client
        self.payment_service = YooKassaService()
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.MEMBERS_PER_PAGE = 10
        self.WARS_PER_PAGE = 10
        
        self.ROLE_TRANSLATIONS = {
            "leader": "üëë –ì–ª–∞–≤–∞",
            "coLeader": "‚öúÔ∏è –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", 
            "admin": "üî∞ –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
            "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
        }
    
    async def handle_profile_menu_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            user = await self.db_service.find_user(chat_id)
            if user:
                async with self.coc_client as client:
                    player_data = await client.get_player_info(user.player_tag)
                    player_name = player_data.get('name') if player_data else None
                    
                    await update.message.reply_text(
                        "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                        reply_markup=Keyboards.profile_menu(player_name)
                    )
            else:
                await update.message.reply_text(
                    "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                    reply_markup=Keyboards.profile_menu(None)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text(
                "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=Keyboards.profile_menu(None)
            )
    
    async def handle_my_profile_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        # Display profile info without clan inspection menu - just profile info
        await self.display_player_info(update, context, user.player_tag, None)
    
    async def handle_link_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        chat_id = update.effective_chat.id
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                await update.message.reply_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.",
                    reply_markup=Keyboards.profile_menu(None)
                )
                return
            
            user = User(telegram_id=chat_id, player_tag=player_tag)
            success = await self.db_service.save_user(user)
            
            if success:
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                await update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                    f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
                    f"üè∑ –¢–µ–≥: {player_tag}",
                    reply_markup=Keyboards.profile_menu(player_name)
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=Keyboards.profile_menu(None)
                )
    
    async def handle_my_clan_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(user.player_tag)
            
            if not player_data or 'clan' not in player_data:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.",
                    reply_markup=Keyboards.profile_menu(player_data.get('name') if player_data else None)
                )
                return
            
            clan_tag = player_data['clan']['tag']
            await self.display_clan_info(update, context, clan_tag)
    
    async def display_player_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 player_tag: str, keyboard: InlineKeyboardMarkup = None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""

        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        search_message = await update.message.reply_text(
            "üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞...",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        )

        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –Ω–∞ –æ—à–∏–±–∫—É
                await search_message.edit_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            message = self._format_player_info(player_data)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            if keyboard:
                await search_message.edit_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
            else:
                await search_message.edit_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN
                )
    
    async def display_clan_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        async with self.coc_client as client:
            clan_data = await client.get_clan_info(clan_tag)
            
            if not clan_data:
                await update.message.reply_text(
                    "‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['inspecting_clan'] = clan_tag
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ÔøΩÔøΩ–ª–∞–Ω–µ
            message = self._format_clan_info(clan_data)
            keyboard = Keyboards.clan_inspection_menu()
            
            await update.message.reply_text(
                message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
            )
    
    async def display_members_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                  clan_tag: str, page: int, sort_type: str, view_type: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        async with self.coc_client as client:
            members_data = await client.get_clan_members(clan_tag)
            
            if not members_data:
                await update.callback_query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞."
                )
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            sorted_members = self._sort_members(members_data, sort_type)
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            total_members = len(sorted_members)
            total_pages = (total_members + self.MEMBERS_PER_PAGE - 1) // self.MEMBERS_PER_PAGE
            start_idx = (page - 1) * self.MEMBERS_PER_PAGE
            end_idx = start_idx + self.MEMBERS_PER_PAGE
            page_members = sorted_members[start_idx:end_idx]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_members_page(page_members, page, total_pages, total_members, view_type)
            keyboard = Keyboards.members_with_profiles(clan_tag, page, total_pages, sort_type, view_type, page_members)
            
            await update.callback_query.edit_message_text(
                message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
            )
    
    async def display_war_list_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   clan_tag: str, sort_order: str, page: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–π–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        offset = (page - 1) * self.WARS_PER_PAGE
        wars = await self.db_service.get_war_list(self.WARS_PER_PAGE, offset)
        
        if not wars:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        filtered_wars = self._filter_wars_by_sort(wars, sort_order)
        
        total_wars = len(filtered_wars)
        total_pages = (total_wars + self.WARS_PER_PAGE - 1) // self.WARS_PER_PAGE
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * self.WARS_PER_PAGE
        end_idx = start_idx + self.WARS_PER_PAGE
        page_wars = filtered_wars[start_idx:end_idx]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_war_list(page_wars, page, total_pages)
        keyboard = Keyboards.war_list_with_details(clan_tag, page, total_pages, sort_order, page_wars)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def display_single_war_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                        clan_tag: str, war_end_time: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        war_details = await self.db_service.get_war_details(war_end_time)
        
        if not war_details:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        message = self._format_war_details(war_details)
        keyboard = Keyboards.war_details_menu(clan_tag, war_end_time)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def handle_notifications_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        subscribed_users = await self.db_service.get_subscribed_users()
        is_subscribed = chat_id in subscribed_users
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if is_subscribed else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö: *{status_text}*\n\n" \
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        
        await update.message.reply_text(
            message, 
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=Keyboards.notification_toggle()
        )
    
    async def handle_notification_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       message_id: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        is_enabled = await self.db_service.toggle_notifications(chat_id)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if is_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö: *{status_text}*\n\n" \
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=Keyboards.notification_toggle()
        )
    
    def _format_player_info(self, player_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = player_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        th_level = player_data.get('townHallLevel', 0)
        trophies = player_data.get('trophies', 0)
        best_trophies = player_data.get('bestTrophies', 0)
        exp_level = player_data.get('expLevel', 0)
        
        message = f"üë§ *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üè∞ –†–∞—Ç—É—à–∞: {th_level} —É—Ä–æ–≤–µ–Ω—å\n"
        message += f"üèÜ –¢—Ä–æ—Ñ–µ–∏: {trophies:,}\n"
        message += f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_trophies:,}\n"
        message += f"‚≠ê –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {exp_level}\n"
        
        # Add war stars information
        war_stars = player_data.get('warStars', 0)
        attack_wins = player_data.get('attackWins', 0)
        defense_wins = player_data.get('defenseWins', 0)
        
        message += f"üåü –ó–≤–µ–∑–¥—ã –≤–æ–π–Ω: {war_stars:,}\n"
        message += f"‚öîÔ∏è –ü–æ–±–µ–¥ –≤ –∞—Ç–∞–∫–µ: {attack_wins:,}\n"
        message += f"üõ°Ô∏è –ü–æ–±–µ–¥ –≤ –∑–∞—â–∏—Ç–µ: {defense_wins:,}\n"
        
        # Add donations information
        donations = player_data.get('donations', 0)
        received = player_data.get('donationsReceived', 0)
        message += f"üì§ –û—Ç–¥–∞–Ω–æ –≤–æ–π—Å–∫: {donations:,}\n"
        message += f"üì• –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–π—Å–∫: {received:,}\n"
        
        # Add league information
        league = player_data.get('league')
        if league:
            league_name = league.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"üèÖ –õ–∏–≥–∞: {league_name}\n"
        
        # Add builder hall information
        builder_hall_level = player_data.get('builderHallLevel', 0)
        versus_trophies = player_data.get('versusTrophies', 0)
        best_versus_trophies = player_data.get('bestVersusTrophies', 0)
        versus_battle_wins = player_data.get('versusBattleWins', 0)
        
        if builder_hall_level > 0:
            message += f"\nüèóÔ∏è *–ë–∞–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è:*\n"
            message += f"üèòÔ∏è –î–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è: {builder_hall_level} —É—Ä–æ–≤–µ–Ω—å\n"
            message += f"üèÜ –¢—Ä–æ—Ñ–µ–∏ –ø—Ä–æ—Ç–∏–≤: {versus_trophies:,}\n"
            message += f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ç–∏–≤: {best_versus_trophies:,}\n"
            message += f"‚öîÔ∏è –ü–æ–±–µ–¥ –ø—Ä–æ—Ç–∏–≤: {versus_battle_wins:,}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
        clan_info = player_data.get('clan')
        if clan_info:
            clan_name = clan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_tag = clan_info.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_role = clan_info.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(clan_role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            
            message += f"\nüõ° *–ö–ª–∞–Ω:* {clan_name}\n"
            message += f"üè∑ `{clan_tag}`\n"
            message += f"üëë –†–æ–ª—å: {role_text}"
            
            # Add clan level if available
            clan_level = clan_info.get('clanLevel', 0)
            if clan_level > 0:
                message += f"\nüéñÔ∏è –£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞: {clan_level}"
        else:
            message += f"\nüö´ –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ"
        
        return message
    
    def _format_clan_info(self, clan_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        name = clan_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = clan_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = clan_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        members_count = clan_data.get('members', 0)
        war_wins = clan_data.get('warWins', 0)
        war_losses = clan_data.get('warLosses', 0)
        war_ties = clan_data.get('warTies', 0)
        
        # –õ–æ–∫–∞—Ü–∏—è
        location = clan_data.get('location', {})
        location_name = location.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if location else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        message = f"üõ° *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üìù {description}\n\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {members_count}/50\n"
        message += f"üåç –õ–æ–∫–∞—Ü–∏—è: {location_name}\n\n"
        message += f"‚öîÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω:*\n"
        message += f"üèÜ –ü–æ–±–µ–¥—ã: {war_wins}\n"
        message += f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {war_losses}\n"
        message += f"ü§ù –ù–∏—á—å–∏: {war_ties}\n"
        
        total_wars = war_wins + war_losses + war_ties
        if total_wars > 0:
            win_rate = (war_wins / total_wars) * 100
            message += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%"
        
        return message
    
    def _format_members_page(self, members: List[Dict], page: int, total_pages: int, 
                           total_members: int, view_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        message = f"üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞* (—Å—Ç—Ä. {page}/{total_pages})\n"
        message += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}\n\n"
        
        for i, member in enumerate(members, 1):
            name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            tag = member.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            role = member.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            trophies = member.get('trophies', 0)
            
            if view_type == MemberView.DETAILED:
                donations = member.get('donations', 0)
                received = member.get('donationsReceived', 0)
                
                message += f"**{i + (page-1) * self.MEMBERS_PER_PAGE}.** {name}\n"
                message += f"   üè∑ `{tag}`\n"
                message += f"   üëë {role_text}\n"
                message += f"   üèÜ {trophies:,} —Ç—Ä–æ—Ñ–µ–µ–≤\n"
                message += f"   üì§ –û—Ç–¥–∞–Ω–æ: {donations:,}\n"
                message += f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {received:,}\n\n"
            else:
                message += f"**{i + (page-1) * self.MEMBERS_PER_PAGE}.** {role_text} {name} - üèÜ {trophies:,}\n"
        
        return message
    
    def _format_war_list(self, wars: List[Dict], page: int, total_pages: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        message = f"‚öîÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω* (—Å—Ç—Ä. {page}/{total_pages})\n\n"
        
        for i, war in enumerate(wars, 1):
            opponent_name = war['opponent_name']
            team_size = war['team_size']
            clan_stars = war['clan_stars']
            opponent_stars = war['opponent_stars']
            result = war['result']
            is_cwl = war['is_cwl_war']
            
            result_emoji = {"win": "üèÜ", "lose": "‚ùå", "tie": "ü§ù"}.get(result, "‚ùì")
            war_type = "üèÜ –õ–í–ö" if is_cwl else "‚öîÔ∏è –ö–í"
            
            message += f"**{i}.** {result_emoji} vs {opponent_name}\n"
            message += f"   {war_type} {team_size}–Ω–∞{team_size} | {clan_stars}‚≠ê - {opponent_stars}‚≠ê\n\n"
        
        return message
    
    def _format_war_details(self, war: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        opponent_name = war['opponent_name']
        team_size = war['team_size']
        clan_stars = war['clan_stars']
        opponent_stars = war['opponent_stars']
        clan_destruction = war['clan_destruction']
        opponent_destruction = war['opponent_destruction']
        result = war['result']
        is_cwl = war['is_cwl_war']
        total_violations = war['total_violations']
        attacks = war.get('attacks', [])
        
        result_text = {"win": "üèÜ –ü–æ–±–µ–¥–∞", "lose": "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "tie": "ü§ù –ù–∏—á—å—è"}.get(result, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        war_type = "üèÜ –õ–∏–≥–∞ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤" if is_cwl else "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞"
        
        message = f"‚öîÔ∏è *–î–µ—Ç–∞–ª–∏ –≤–æ–π–Ω—ã*\n\n"
        message += f"üõ° –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_name}\n"
        message += f"üë• –†–∞–∑–º–µ—Ä: {team_size} –Ω–∞ {team_size}\n"
        message += f"üè∑ –¢–∏–ø: {war_type}\n"
        message += f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}\n\n"
        message += f"‚≠ê *–ó–≤–µ–∑–¥—ã:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_stars}\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_stars}\n\n"
        message += f"üí• *–†–∞–∑—Ä—É—à–µ–Ω–∏—è:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_destruction:.1f}%\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_destruction:.1f}%\n\n"
        message += f"üö´ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª: {total_violations}\n"
        message += f"‚öîÔ∏è –í—Å–µ–≥–æ –∞—Ç–∞–∫: {len(attacks)}"
        
        return message
    
    def _sort_members(self, members: List[Dict], sort_type: str) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        if sort_type == MemberSort.ROLE:
            role_order = {"leader": 0, "coLeader": 1, "admin": 2, "member": 3}
            return sorted(members, key=lambda m: (role_order.get(m.get('role', 'member'), 3), -m.get('trophies', 0)))
        elif sort_type == MemberSort.TROPHIES:
            return sorted(members, key=lambda m: -m.get('trophies', 0))
        elif sort_type == MemberSort.DONATIONS:
            return sorted(members, key=lambda m: -m.get('donations', 0))
        elif sort_type == MemberSort.NAME:
            return sorted(members, key=lambda m: m.get('name', '').lower())
        else:
            return members
    
    def _filter_wars_by_sort(self, wars: List[Dict], sort_order: str) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–π–Ω –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        if sort_order == WarSort.WINS:
            return [war for war in wars if war['result'] == 'win']
        elif sort_order == WarSort.LOSSES:
            return [war for war in wars if war['result'] == 'lose']
        elif sort_order == WarSort.CWL_ONLY:
            return [war for war in wars if war['is_cwl_war']]
        else:
            return wars  # RECENT - —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ
    
    async def handle_subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            
            if subscription and subscription.is_active and not subscription.is_expired():
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                message = (
                    f"üíé <b>–í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üìÖ –¢–∏–ø: {self.payment_service.get_subscription_name(subscription.subscription_type)}\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {subscription.days_remaining()}\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É?"
                )
                keyboard = Keyboards.subscription_status()
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                message = (
                    f"üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üöÄ <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º –∏ –ø–æ–ª—É—á–∏—Ç–µ:</b>\n\n"
                    f"‚ú® <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                    f"‚Ä¢ üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                    f"‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω\n"
                    f"‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    f"‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
                    f"‚Ä¢ üõ°Ô∏è –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–Ω–∞\n\n"
                    f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>"
                )
                keyboard = Keyboards.subscription_periods()
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    message, 
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    message, 
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
    
    async def handle_subscription_period_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                  subscription_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
            payment_data = await self.payment_service.create_payment(
                telegram_id=chat_id,
                subscription_type=subscription_type,
                return_url=f"https://t.me/your_bot?start=payment_success"
            )
            
            if payment_data and 'confirmation' in payment_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['pending_payment'] = {
                    'payment_id': payment_data['id'],
                    'subscription_type': subscription_type,
                    'amount': payment_data['amount']['value']
                }
                
                subscription_name = self.payment_service.get_subscription_name(subscription_type)
                price = self.payment_service.get_subscription_price(subscription_type)
                
                message = (
                    f"üí≥ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name}\n"
                    f"üí∞ –°—É–º–º–∞: {price:.0f} ‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                    f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                
                keyboard = Keyboards.subscription_payment(payment_data['confirmation']['confirmation_url'])
                
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
                await self._schedule_payment_check(context, payment_data['id'], chat_id, subscription_type)
            
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=Keyboards.back_to_main()
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_to_main()
            )
    
    async def _schedule_payment_check(self, context: ContextTypes.DEFAULT_TYPE, payment_id: str, 
                                     chat_id: int, subscription_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        
        async def check_payment():
            for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –º–∏–Ω—É—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)
                
                payment_status = await self.payment_service.check_payment_status(payment_id)
                if payment_status and payment_status.get('status') == 'succeeded':
                    await self._process_successful_payment(chat_id, subscription_type, payment_id, payment_status)
                    break
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ job_queue)
        asyncio.create_task(check_payment())
    
    async def _process_successful_payment(self, telegram_id: int, subscription_type: str, 
                                        payment_id: str, payment_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
            duration = self.payment_service.get_subscription_duration(subscription_type)
            amount = float(payment_data['amount']['value'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            existing_subscription = await self.db_service.get_subscription(telegram_id)
            
            if existing_subscription and existing_subscription.is_active and not existing_subscription.is_expired():
                # –ü—Ä–æ–¥–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                new_end_date = existing_subscription.end_date + duration
                existing_subscription.end_date = new_end_date
                existing_subscription.payment_id = payment_id
                existing_subscription.amount = amount
                
                success = await self.db_service.save_subscription(existing_subscription)
                message = (
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
                    f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.0f} ‚ÇΩ"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                start_date = datetime.now()
                end_date = start_date + duration
                
                new_subscription = Subscription(
                    telegram_id=telegram_id,
                    subscription_type=subscription_type,
                    start_date=start_date,
                    end_date=end_date,
                    is_active=True,
                    payment_id=payment_id,
                    amount=amount
                )
                
                success = await self.db_service.save_subscription(new_subscription)
                message = (
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.0f} ‚ÇΩ"
                )
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É)
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def display_current_war(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ –∫–ª–∞–Ω–∞"""
        try:
            async with self.coc_client as client:
                war_data = await client.get_clan_current_war(clan_tag)
                
                if not war_data:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ."
                    )
                    return
                
                # Check war state
                state = war_data.get('state', 'notInWar')
                
                if state == 'notInWar':
                    await update.callback_query.edit_message_text(
                        "üïäÔ∏è –ö–ª–∞–Ω —Å–µ–π—á–∞—Å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–µ."
                    )
                    return
                
                # Format current war information
                message = self._format_current_war_info(war_data)
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ."
            )
    
    async def display_cwl_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–∏–≥–µ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤ (CWL)"""
        try:
            async with self.coc_client as client:
                cwl_data = await client.get_clan_war_league_group(clan_tag)
                
                if not cwl_data:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ö–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –õ–í–ö."
                    )
                    return
                
                # Format CWL information
                message = self._format_cwl_info(cwl_data)
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö."
            )
    
    def _format_current_war_info(self, war_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—ÇÔøΩÔøΩ—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ"""
        state = war_data.get('state', 'unknown')
        team_size = war_data.get('teamSize', 0)
        
        # Get clan and opponent info
        clan = war_data.get('clan', {})
        opponent = war_data.get('opponent', {})
        
        clan_name = clan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        clan_stars = clan.get('stars', 0)
        clan_destruction = clan.get('destructionPercentage', 0.0)
        clan_attacks = clan.get('attacks', 0)
        
        opponent_name = opponent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        opponent_stars = opponent.get('stars', 0)
        opponent_destruction = opponent.get('destructionPercentage', 0.0)
        opponent_attacks = opponent.get('attacks', 0)
        
        # State translations
        state_translations = {
            'preparation': 'üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            'inWar': '‚öîÔ∏è –ò–¥–µ—Ç –≤–æ–π–Ω–∞',
            'warEnded': 'üèÅ –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        state_text = state_translations.get(state, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"‚öîÔ∏è *–¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞*\n\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {state_text}\n"
        message += f"üë• –†–∞–∑–º–µ—Ä: {team_size} –Ω–∞ {team_size}\n\n"
        
        message += f"üõ°Ô∏è *{clan_name}*\n"
        message += f"‚≠ê –ó–≤–µ–∑–¥—ã: {clan_stars}\n"
        message += f"üí• –†–∞–∑—ÄÔøΩÔøΩ—à–µ–Ω–∏–µ: {clan_destruction:.1f}%\n"
        message += f"‚öîÔ∏è –ê—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {clan_attacks}\n\n"
        
        message += f"üõ°Ô∏è *{opponent_name}*\n"
        message += f"‚≠ê –ó–≤–µ–∑–¥—ã: {opponent_stars}\n"
        message += f"üí• –†–∞–∑—Ä—É—à–µ–Ω–∏–µ: {opponent_destruction:.1f}%\n"
        message += f"‚öîÔ∏è –ê—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {opponent_attacks}\n\n"
        
        # Show time information based on state
        if state == 'preparation':
            start_time = war_data.get('startTime')
            if start_time:
                message += f"üïê –ù–∞—á–∞–ª–æ –≤–æ–π–Ω—ã: {start_time}\n"
        elif state == 'inWar':
            end_time = war_data.get('endTime')
            if end_time:
                message += f"üïê –ö–æ–Ω–µ—Ü –≤–æ–π–Ω—ã: {end_time}\n"
        
        return message
    
    def _format_cwl_info(self, cwl_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö"""
        state = cwl_data.get('state', 'unknown')
        season = cwl_data.get('season', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # State translations
        state_translations = {
            'preparation': 'üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            'inWar': '‚öîÔ∏è –ò–¥–µ—Ç –õ–í–ö',
            'ended': 'üèÅ –õ–í–ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        state_text = state_translations.get(state, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"üèÜ *–õ–∏–≥–∞ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤*\n\n"
        message += f"üìÖ –°–µ–∑–æ–Ω: {season}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {state_text}\n\n"
        
        # Get clans in the league
        clans = cwl_data.get('clans', [])
        if clans:
            message += f"üõ°Ô∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–∏–≥–∏ ({len(clans)} –∫–ª–∞–Ω–æ–≤):*\n"
            for i, clan in enumerate(clans[:8], 1):  # Show up to 8 clans
                clan_name = clan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                clan_level = clan.get('clanLevel', 0)
                message += f"{i}. {clan_name} (—É—Ä. {clan_level})\n"
            
            if len(clans) > 8:
                message += f"... –∏ –µ—â–µ {len(clans) - 8} –∫–ª–∞–Ω–æ–≤\n"
        
        # Get rounds information
        rounds = cwl_data.get('rounds', [])
        if rounds:
            message += f"\nüìã *–†–∞—É–Ω–¥—ã:* {len(rounds)}\n"
            
            # Show current round info if available
            current_round = None
            for i, round_data in enumerate(rounds):
                war_tags = round_data.get('warTags', [])
                if war_tags and war_tags[0] != '#0':
                    current_round = i + 1
                    break
            
            if current_round:
                message += f"‚öîÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: {current_round}\n"
        
        return message
    
    async def display_cwl_bonus_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year_month: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö"""
        try:
            # Get CWL bonus data from database for the specified month
            bonus_data = await self.db_service.get_cwl_bonus_data(year_month)
            
            if not bonus_data:
                await update.callback_query.edit_message_text(
                    f"‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö –∑–∞ {year_month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return
            
            # Format bonus information  
            message = self._format_cwl_bonus_info(bonus_data, year_month)
            
            await update.callback_query.edit_message_text(
                message, parse_mode=ParseMode.MARKDOWN
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö."
            )
    
    def _format_cwl_bonus_info(self, bonus_data: List[Dict], year_month: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö"""
        # Parse year-month for display
        try:
            year, month = year_month.split('-')
            month_names = {
                '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
                '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
                '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
            }
            month_name = month_names.get(month, month)
            display_date = f"{month_name} {year}"
        except Exception:
            display_date = year_month
        
        message = f"üèÜ *–ë–æ–Ω—É—Å—ã –õ–í–ö - {display_date}*\n\n"
        
        if not bonus_data:
            message += "üì≠ –î–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            return message
        
        total_bonuses = len(bonus_data)
        message += f"üìä –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –≤—ã–¥–∞–Ω–æ: {total_bonuses}\n\n"
        
        # Group bonuses by player
        player_bonuses = {}
        for bonus in bonus_data:
            player_name = bonus.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            bonus_amount = bonus.get('bonus_amount', 0)
            if player_name not in player_bonuses:
                player_bonuses[player_name] = 0
            player_bonuses[player_name] += bonus_amount
        
        # Sort players by total bonus amount
        sorted_players = sorted(player_bonuses.items(), key=lambda x: x[1], reverse=True)
        
        message += "üéñÔ∏è *–ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö –±–æ–Ω—É—Å—ã:*\n"
        for i, (player_name, total_bonus) in enumerate(sorted_players[:10], 1):
            message += f"{i}. {player_name}: {total_bonus:,} üíé\n"
        
        if len(sorted_players) > 10:
            message += f"... –∏ –µ—â–µ {len(sorted_players) - 10} –∏–≥—Ä–æ–∫–æ–≤\n"
        
        # Calculate total bonus amount
        total_amount = sum(player_bonuses.values())
        message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {total_amount:,} üíé"
        
        return message
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.payment_service:
            await self.payment_service.close()