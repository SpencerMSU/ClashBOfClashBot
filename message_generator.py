"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–æ–≥ Java MessageGenerator
"""
import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import DatabaseService
from coc_api import CocApiClient, format_clan_tag, format_player_tag
from keyboards import Keyboards, WarSort, MemberSort, MemberView
from models.user import User
from models.user_profile import UserProfile
from user_state import UserState
from models.subscription import Subscription
from payment_service import YooKassaService
from config import config

logger = logging.getLogger(__name__)


class MessageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_service: DatabaseService, coc_client: CocApiClient):
        self.db_service = db_service
        self.coc_client = coc_client
        self.payment_service = YooKassaService(config.BOT_USERNAME)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.MEMBERS_PER_PAGE = 10
        self.WARS_PER_PAGE = 10
        
        self.ROLE_TRANSLATIONS = {
            "leader": "üëë –ì–ª–∞–≤–∞",
            "coLeader": "‚öúÔ∏è –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", 
            "admin": "üî∞ –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
            "member": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
        }
    
    def _format_datetime(self, iso_datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ISO datetime —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –ü–∞—Ä—Å–∏–º ISO datetime (—Ñ–æ—Ä–º–∞—Ç: 20250919T044950.000Z)
            dt = datetime.fromisoformat(iso_datetime_str.replace('Z', '+00:00'))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
            moscow_tz = timezone(timedelta(hours=3))
            moscow_dt = dt.astimezone(moscow_tz)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥: "19.09.2025 07:49"
            return moscow_dt.strftime('%d.%m.%Y %H:%M')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ {iso_datetime_str}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return iso_datetime_str
    
    async def handle_profile_menu_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            has_premium = subscription and subscription.is_active and not subscription.is_expired()
            
            if has_premium:
                # –î–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                profiles = await self.db_service.get_user_profiles(chat_id)
                profile_count = len(profiles)
                
                if profile_count > 1:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
                    await update.message.reply_text(
                        "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                        reply_markup=Keyboards.profile_menu(None, has_premium=True, profile_count=profile_count)
                    )
                    return
                elif profile_count == 1:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                    primary_profile = profiles[0]
                    async with self.coc_client as client:
                        player_data = await client.get_player_info(primary_profile.player_tag)
                        player_name = player_data.get('name') if player_data else None
                        
                        await update.message.reply_text(
                            "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                            reply_markup=Keyboards.profile_menu(player_name, has_premium=True, profile_count=1)
                        )
                    return
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–º–∏—É–º –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
            user = await self.db_service.find_user(chat_id)
            if user:
                async with self.coc_client as client:
                    player_data = await client.get_player_info(user.player_tag)
                    player_name = player_data.get('name') if player_data else None
                    
                    await update.message.reply_text(
                        "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                        reply_markup=Keyboards.profile_menu(player_name, has_premium=has_premium, profile_count=0)
                    )
            else:
                await update.message.reply_text(
                    "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                    reply_markup=Keyboards.profile_menu(None, has_premium=has_premium, profile_count=0)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text(
                "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=Keyboards.profile_menu(None, has_premium=False, profile_count=0)
            )
    
    async def handle_my_profile_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        # Display profile info without clan inspection menu - just profile info
        await self.display_player_info(update, context, user.player_tag, None)
    
    async def handle_link_account(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        chat_id = update.effective_chat.id
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                await update.message.reply_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.",
                    reply_markup=Keyboards.profile_menu(None)
                )
                return
            
            user = User(telegram_id=chat_id, player_tag=player_tag)
            success = await self.db_service.save_user(user)
            
            if success:
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                await update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                    f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
                    f"üè∑ –¢–µ–≥: {player_tag}",
                    reply_markup=Keyboards.profile_menu(player_name)
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=Keyboards.profile_menu(None)
                )
    
    async def handle_my_clan_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞"""
        chat_id = update.effective_chat.id
        
        user = await self.db_service.find_user(chat_id)
        if not user:
            await update.message.reply_text(
                "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".",
                reply_markup=Keyboards.profile_menu(None)
            )
            return
        
        async with self.coc_client as client:
            player_data = await client.get_player_info(user.player_tag)
            
            if not player_data or 'clan' not in player_data:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.",
                    reply_markup=Keyboards.profile_menu(player_data.get('name') if player_data else None)
                )
                return
            
            clan_tag = player_data['clan']['tag']
            await self.display_clan_info(update, context, clan_tag)
    
    async def display_player_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 player_tag: str, keyboard: InlineKeyboardMarkup = None, 
                                 back_keyboard: InlineKeyboardMarkup = None, from_callback: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""

        # Handle callback updates differently 
        if from_callback and hasattr(update, 'callback_query') and update.callback_query:
            # For callback queries, directly edit the existing message
            await update.callback_query.edit_message_text("üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞...")
            
            async with self.coc_client as client:
                player_data = await client.get_player_info(player_tag)
                
                if not player_data:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞."
                    )
                    return
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
                message = self._format_player_info(player_data)
                
                # Create achievements button for profile displays
                profile_keyboard = []
                profile_keyboard.append([InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
                                                             callback_data=f"{Keyboards.ACHIEVEMENTS_CALLBACK}:{player_tag}")])
                
                # Add back_keyboard buttons if provided
                if back_keyboard and back_keyboard.inline_keyboard:
                    profile_keyboard.extend(back_keyboard.inline_keyboard)
                
                # Add keyboard buttons if provided
                if keyboard and keyboard.inline_keyboard:
                    profile_keyboard.extend(keyboard.inline_keyboard)
                
                final_keyboard = InlineKeyboardMarkup(profile_keyboard) if profile_keyboard else None
                
                await update.callback_query.edit_message_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=final_keyboard
                )
            return

        # Handle regular message updates (original logic)
        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        search_message = await update.message.reply_text(
            "üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞...",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        )

        async with self.coc_client as client:
            player_data = await client.get_player_info(player_tag)
            
            if not player_data:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –Ω–∞ –æ—à–∏–±–∫—É
                await search_message.edit_text(
                    "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞."
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            message = self._format_player_info(player_data)
            
            # Create achievements button for profile displays
            profile_keyboard = []
            profile_keyboard.append([InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
                                                         callback_data=f"{Keyboards.ACHIEVEMENTS_CALLBACK}:{player_tag}")])
            
            # Add back_keyboard buttons if provided
            if back_keyboard and back_keyboard.inline_keyboard:
                profile_keyboard.extend(back_keyboard.inline_keyboard)
            
            # Add keyboard buttons if provided  
            if keyboard and keyboard.inline_keyboard:
                profile_keyboard.extend(keyboard.inline_keyboard)
            
            final_keyboard = InlineKeyboardMarkup(profile_keyboard) if profile_keyboard else None
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            await search_message.edit_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=final_keyboard
            )
    
    async def display_clan_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ - –∏–∑ callback –∏–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_callback = hasattr(update, 'callback_query') and update.callback_query is not None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if is_callback:
            loading_message = await update.callback_query.edit_message_text("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ...")
        else:
            loading_message = await update.message.reply_text("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ...")
        
        async with self.coc_client as client:
            clan_data = await client.get_clan_info(clan_tag)
            
            if not clan_data:
                error_message = "‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞/–∞–ø–∏."
                if is_callback:
                    await update.callback_query.edit_message_text(error_message)
                else:
                    await loading_message.edit_text(error_message)
                    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=Keyboards.main_menu())
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['inspecting_clan'] = clan_tag
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
            message = self._format_clan_info(clan_data)
            keyboard = Keyboards.clan_inspection_menu()
            
            if is_callback:
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                )
            else:
                await loading_message.edit_text(
                    message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                )
    
    async def display_members_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                  clan_tag: str, page: int, sort_type: str, view_type: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("üë• –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞...")
        
        try:
            async with self.coc_client as client:
                members_data = await client.get_clan_members(clan_tag)
                
                if not members_data:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞."
                    )
                    return
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                sorted_members = self._sort_members(members_data, sort_type)
                
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                total_members = len(sorted_members)
                total_pages = (total_members + self.MEMBERS_PER_PAGE - 1) // self.MEMBERS_PER_PAGE
                start_idx = (page - 1) * self.MEMBERS_PER_PAGE
                end_idx = start_idx + self.MEMBERS_PER_PAGE
                page_members = sorted_members[start_idx:end_idx]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._format_members_page(page_members, page, total_pages, total_members, view_type)
                keyboard = Keyboards.members_with_profiles(clan_tag, page, total_pages, sort_type, view_type, page_members)
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                )
                
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ {clan_tag}")
            await update.callback_query.edit_message_text(
                "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞."
            )
    
    async def display_war_list_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   clan_tag: str, sort_order: str, page: int):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–π–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        offset = (page - 1) * self.WARS_PER_PAGE
        wars = await self.db_service.get_war_list(self.WARS_PER_PAGE, offset)
        
        if not wars:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        filtered_wars = self._filter_wars_by_sort(wars, sort_order)
        
        total_wars = len(filtered_wars)
        total_pages = (total_wars + self.WARS_PER_PAGE - 1) // self.WARS_PER_PAGE
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * self.WARS_PER_PAGE
        end_idx = start_idx + self.WARS_PER_PAGE
        page_wars = filtered_wars[start_idx:end_idx]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_war_list(page_wars, page, total_pages)
        keyboard = Keyboards.war_list_with_details(clan_tag, page, total_pages, sort_order, page_wars)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def display_single_war_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                        clan_tag: str, war_end_time: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        war_details = await self.db_service.get_war_details(war_end_time)
        
        if not war_details:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        message = self._format_war_details(war_details)
        keyboard = Keyboards.war_details_menu(clan_tag, war_end_time)
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def display_war_attacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 clan_tag: str, war_end_time: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫ –≤–æ–π–Ω—ã"""
        war_details = await self.db_service.get_war_details(war_end_time)
        
        if not war_details:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        message = self._format_war_attacks(war_details)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º –≤–æ–π–Ω—ã", 
                                callback_data=f"{Keyboards.WAR_INFO_CALLBACK}:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–π–Ω", 
                                callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:1")]
        ])
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def display_war_violations(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   clan_tag: str, war_end_time: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–π–Ω—ã"""
        war_details = await self.db_service.get_war_details(war_end_time)
        
        if not war_details:
            await update.callback_query.edit_message_text(
                "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            )
            return
        
        message = self._format_war_violations(war_details)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º –≤–æ–π–Ω—ã", 
                                callback_data=f"{Keyboards.WAR_INFO_CALLBACK}:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–π–Ω", 
                                callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:1")]
        ])
        
        await update.callback_query.edit_message_text(
            message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
        )
    
    async def handle_notifications_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            is_premium = subscription and subscription.is_active and not subscription.is_expired()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_status = await self.db_service.is_notifications_enabled(chat_id)
            
            message = (
                f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if notification_status else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            )
            
            if is_premium:
                message += (
                    f"üíé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'üëë –ü–†–û –ü–õ–Æ–°' if 'proplus' in subscription.subscription_type else 'üíé –ü—Ä–µ–º–∏—É–º'}\n\n"
                    f"üîî –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í\n"
                    f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                    f"üèóÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π"
                )
            else:
                message += (
                    f"üì± –î–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í\n"
                    f"üíé –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
                )
            
            keyboard = Keyboards.notification_menu(is_premium)
            
            await update.message.reply_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

    async def handle_notification_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       message_id: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            is_premium = subscription and subscription.is_active and not subscription.is_expired()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            is_enabled = await self.db_service.toggle_notifications(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
            message = (
                f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if is_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            )
            
            if is_premium:
                message += (
                    f"üíé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'üëë –ü–†–û –ü–õ–Æ–°' if 'proplus' in subscription.subscription_type else 'üíé –ü—Ä–µ–º–∏—É–º'}\n\n"
                    f"üîî –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í\n"
                    f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                )
            else:
                message += (
                    f"üì± –î–æ—Å—Ç—É–ø–Ω—ã –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í\n"
                    f"üíé –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
                )
            
            await update.callback_query.edit_message_text(
                message,
                parse_mode=ParseMode.HTML,
                reply_markup=Keyboards.notification_toggle()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    
    def _format_player_info(self, player_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ"""
        name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = player_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        th_level = player_data.get('townHallLevel', 0)
        trophies = player_data.get('trophies', 0)
        best_trophies = player_data.get('bestTrophies', 0)
        exp_level = player_data.get('expLevel', 0)
        
        message = f"üë§ *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üè∞ –†–∞—Ç—É—à–∞: {th_level} —É—Ä–æ–≤–µ–Ω—å\n"
        message += f"üèÜ –¢—Ä–æ—Ñ–µ–∏: {trophies:,}\n"
        message += f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_trophies:,}\n"
        message += f"‚≠ê –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {exp_level}\n"
        
        # Add war stars information
        war_stars = player_data.get('warStars', 0)
        attack_wins = player_data.get('attackWins', 0)
        defense_wins = player_data.get('defenseWins', 0)
        
        message += f"üåü –ó–≤–µ–∑–¥—ã –≤–æ–π–Ω: {war_stars:,}\n"
        message += f"‚öîÔ∏è –ü–æ–±–µ–¥ –≤ –∞—Ç–∞–∫–µ: {attack_wins:,}\n"
        message += f"üõ°Ô∏è –ü–æ–±–µ–¥ –≤ –∑–∞—â–∏—Ç–µ: {defense_wins:,}\n"
        
        # Add donations information
        donations = player_data.get('donations', 0)
        received = player_data.get('donationsReceived', 0)
        message += f"üì§ –û—Ç–¥–∞–Ω–æ –≤–æ–π—Å–∫: {donations:,}\n"
        message += f"üì• –ü–æ–ª—É—á–µ–Ω–æ –≤–æ–π—Å–∫: {received:,}\n"
        
        # Add super troops information
        super_troops = self._format_super_troops_info(player_data)
        if super_troops:
            message += f"\n{super_troops}"
        
        # Add league information
        league = player_data.get('league')
        if league:
            league_name = league.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"üèÖ –õ–∏–≥–∞: {league_name}\n"
        
        # Add builder hall information
        builder_hall_level = player_data.get('builderHallLevel', 0)
        versus_trophies = player_data.get('versusTrophies', 0)
        best_versus_trophies = player_data.get('bestVersusTrophies', 0)
        versus_battle_wins = player_data.get('versusBattleWins', 0)
        
        # Show builder base info if player has any builder base activity or level > 0
        if builder_hall_level > 0 or versus_trophies > 0 or best_versus_trophies > 0 or versus_battle_wins > 0:
            message += f"\nüèóÔ∏è *–ë–∞–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è:*\n"
            message += f"üèòÔ∏è –î–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—è: {builder_hall_level} —É—Ä–æ–≤–µ–Ω—å\n"
            message += f"üèÜ –¢—Ä–æ—Ñ–µ–∏ –ø—Ä–æ—Ç–∏–≤: {versus_trophies:,}\n"
            message += f"ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ç–∏–≤: {best_versus_trophies:,}\n"
            message += f"‚öîÔ∏è –ü–æ–±–µ–¥ –ø—Ä–æ—Ç–∏–≤: {versus_battle_wins:,}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
        clan_info = player_data.get('clan')
        if clan_info:
            clan_name = clan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_tag = clan_info.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            clan_role = clan_info.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(clan_role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            
            message += f"\nüõ° *–ö–ª–∞–Ω:* {clan_name}\n"
            message += f"üè∑ `{clan_tag}`\n"
            message += f"üëë –†–æ–ª—å: {role_text}"
            
            # Add clan position if available
            clan_rank = player_data.get('clanRank')
            if clan_rank:
                message += f"\nüìç –ü–æ–∑–∏—Ü–∏—è –≤ –∫–ª–∞–Ω–µ: {clan_rank}"
            
            # Add clan level if available
            clan_level = clan_info.get('clanLevel', 0)
            if clan_level > 0:
                message += f"\nüéñÔ∏è –£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞: {clan_level}"
        else:
            message += f"\nüö´ –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ"
        
        return message
    
    def _format_super_troops_info(self, player_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–∞—Ö"""
        try:
            troops = player_data.get('troops', [])
            super_troops = []
            
            # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—É–ø–µ—Ä –≤–æ–π—Å–∫ —Å –∏—Ö –æ–±—ã—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏  
            super_troop_names = {
                'Super Barbarian': '‚öîÔ∏è –°—É–ø–µ—Ä –≤–∞—Ä–≤–∞—Ä',
                'Super Archer': 'üèπ –°—É–ø–µ—Ä –ª—É—á–Ω–∏—Ü–∞', 
                'Super Giant': 'üóø –°—É–ø–µ—Ä –≥–∏–≥–∞–Ω—Ç',
                'Sneaky Goblin': 'üëª –°–∫—Ä—ã—Ç–Ω—ã–π –≥–æ–±–ª–∏–Ω',
                'Super Wall Breaker': 'üí• –°—É–ø–µ—Ä —Å—Ç–µ–Ω–æ–±–æ–π',
                'Super Wizard': 'üßô‚Äç‚ôÇÔ∏è –°—É–ø–µ—Ä –º–∞–≥',
                'Inferno Dragon': 'üî• –ò–Ω—Ñ–µ—Ä–Ω–æ –¥—Ä–∞–∫–æ–Ω',
                'Super Minion': 'üëø –°—É–ø–µ—Ä –ø—Ä–∏—Å–ª—É–∂–Ω–∏–∫',
                'Super Valkyrie': '‚ö° –°—É–ø–µ—Ä –≤–∞–ª—å–∫–∏—Ä–∏—è',
                'Super Witch': 'üßô‚Äç‚ôÄÔ∏è –°—É–ø–µ—Ä –≤–µ–¥—å–º–∞',
                'Ice Hound': 'üßä –õ–µ–¥—è–Ω–∞—è –≥–æ–Ω—á–∞—è',
                'Super Bowler': 'üé≥ –°—É–ø–µ—Ä –±–æ—É–ª–µ—Ä',
                'Super Dragon': 'üê≤ –°—É–ø–µ—Ä –¥—Ä–∞–∫–æ–Ω',
                'Super Miner': '‚õèÔ∏è –°—É–ø–µ—Ä —à–∞—Ö—Ç–µ—Ä'
            }
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–∞
            for troop in troops:
                troop_name = troop.get('name', '')
                if troop_name in super_troop_names:
                    level = troop.get('level', 0)
                    max_level = troop.get('maxLevel', 0)
                    village = troop.get('village', 'home')
                    
                    if village == 'home' and level > 0:  # –¢–æ–ª—å–∫–æ –≤–æ–π—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ—Ä–µ–≤–Ω–∏
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–∞
                        remaining_time = self._calculate_super_troop_time(troop)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ
                        if remaining_time > 0:
                            display_name = super_troop_names[troop_name]
                            
                            super_troops.append({
                                'name': display_name,
                                'level': level,
                                'max_level': max_level,
                                'remaining_time': remaining_time
                            })
            
            if not super_troops:
                return ""
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            super_troops.sort(key=lambda x: x['remaining_time'], reverse=True)
            
            message = "‚ö° *–°—É–ø–µ—Ä –≤–æ–π—Å–∫–∞:*\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 —Å—É–ø–µ—Ä –≤–æ–π—Å–∫ –∫–∞–∫ –°–£–ü–ï–† –í–û–ô–ö–û 1 –∏ 2
            for i, troop in enumerate(super_troops[:2], 1):
                status = "–ê–∫—Ç–∏–≤–Ω–æ" if troop['remaining_time'] > 0 else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
                time_text = f"{troop['remaining_time']}—á" if troop['remaining_time'] > 0 else "0—á"
                
                message += f"üî• –°–£–ü–ï–† –í–û–ô–ö–û {i}: {troop['name']}\n"
                message += f"   üìä –£—Ä–æ–≤–µ–Ω—å: {troop['level']}/{troop['max_level']}\n"
                message += f"   ‚è∞ –í—Ä–µ–º—è: {time_text} | {status}\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
            if len(super_troops) == 1:
                message += f"üî• –°–£–ü–ï–† –í–û–ô–ö–û 2: –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n"
                message += f"   üìä –£—Ä–æ–≤–µ–Ω—å: 0/0\n"
                message += f"   ‚è∞ –í—Ä–µ–º—è: 0—á | –ù–µ–∞–∫—Ç–∏–≤–Ω–æ\n"
            elif len(super_troops) == 0:
                message += f"üî• –°–£–ü–ï–† –í–û–ô–ö–û 1: –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n"
                message += f"   üìä –£—Ä–æ–≤–µ–Ω—å: 0/0\n"
                message += f"   ‚è∞ –í—Ä–µ–º—è: 0—á | –ù–µ–∞–∫—Ç–∏–≤–Ω–æ\n"
                message += f"üî• –°–£–ü–ï–† –í–û–ô–ö–û 2: –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n"
                message += f"   üìä –£—Ä–æ–≤–µ–Ω—å: 0/0\n"
                message += f"   ‚è∞ –í—Ä–µ–º—è: 0—á | –ù–µ–∞–∫—Ç–∏–≤–Ω–æ\n"
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫: {e}")
            return ""
    
    def _calculate_super_troop_time(self, troop: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–ø–µ—Ä —Ä–µ–∂–∏–º–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º COC API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–∞—Ö –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            level = troop.get('level', 0)
            
            # –ï—Å–ª–∏ –≤–æ–π—Å–∫–æ –Ω–µ –ø—Ä–æ–∫–∞—á–µ–Ω–æ, –æ–Ω–æ —Ç–æ—á–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            if level == 0:
                return 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ superTroopIsActive –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ
            # –í —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö API —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
            is_active = troop.get('superTroopIsActive', False)
            if isinstance(is_active, bool) and is_active:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è
                remaining_time = troop.get('superTroopRemainingTime', 72)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 72 —á–∞—Å–∞
                return max(0, remaining_time)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            # –°—É–ø–µ—Ä –≤–æ–π—Å–∫–∞ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –æ—Å–æ–±—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            max_level = troop.get('maxLevel', 0)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–≤–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∏ –±–æ–ª—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            # –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–π—Å–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å—É–ø–µ—Ä –≤–æ–π—Å–∫–æ
            if level > 0 and level == max_level and max_level > 25:  # –°—É–ø–µ—Ä –≤–æ–π—Å–∫–∞ –æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—É–ø–µ—Ä –≤–æ–π—Å–∫
                return 48  # 48 —á–∞—Å–æ–≤ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            
            return 0
                
        except Exception:
            return 0
    
    def _format_clan_info(self, clan_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        name = clan_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        tag = clan_data.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = clan_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        members_count = clan_data.get('members', 0)
        war_wins = clan_data.get('warWins', 0)
        war_losses = clan_data.get('warLosses', 0)
        war_ties = clan_data.get('warTies', 0)
        
        # –õ–æ–∫–∞—Ü–∏—è
        location = clan_data.get('location', {})
        location_name = location.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if location else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        message = f"üõ° *{name}*\n"
        message += f"üè∑ `{tag}`\n"
        message += f"üìù {description}\n\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {members_count}/50\n"
        message += f"üåç –õ–æ–∫–∞—Ü–∏—è: {location_name}\n\n"
        message += f"‚öîÔ∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω:*\n"
        message += f"üèÜ –ü–æ–±–µ–¥—ã: {war_wins}\n"
        message += f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {war_losses}\n"
        message += f"ü§ù –ù–∏—á—å–∏: {war_ties}\n"
        
        total_wars = war_wins + war_losses + war_ties
        if total_wars > 0:
            win_rate = (war_wins / total_wars) * 100
            message += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%"
        
        return message
    
    def _format_members_page(self, members: List[Dict], page: int, total_pages: int, 
                           total_members: int, view_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        message = f"üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞* (—Å—Ç—Ä. {page}/{total_pages})\n"
        message += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}\n\n"
        
        for i, member in enumerate(members, 1):
            # Escape special characters in names to prevent parsing errors
            name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            tag = member.get('tag', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            role = member.get('role', 'member')
            role_text = self.ROLE_TRANSLATIONS.get(role, 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫')
            trophies = member.get('trophies', 0)
            
            if view_type == MemberView.DETAILED:
                donations = member.get('donations', 0)
                received = member.get('donationsReceived', 0)
                
                message += f"*{i + (page-1) * self.MEMBERS_PER_PAGE}.* {name}\n"
                message += f"   üè∑ `{tag}`\n"
                message += f"   üëë {role_text}\n"
                message += f"   üèÜ {trophies:,} —Ç—Ä–æ—Ñ–µ–µ–≤\n"
                message += f"   üì§ –û—Ç–¥–∞–Ω–æ: {donations:,}\n"
                message += f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {received:,}\n\n"
            else:
                message += f"*{i + (page-1) * self.MEMBERS_PER_PAGE}.* {role_text} {name} - üèÜ {trophies:,}\n"
        
        return message
    
    def _format_war_list(self, wars: List[Dict], page: int, total_pages: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        message = f"‚öîÔ∏è *–ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω* (—Å—Ç—Ä. {page}/{total_pages})\n\n"
        
        for i, war in enumerate(wars, 1):
            # Escape special characters in opponent names to prevent parsing errors
            opponent_name = war['opponent_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            team_size = war['team_size']
            clan_stars = war['clan_stars']
            opponent_stars = war['opponent_stars']
            result = war['result']
            is_cwl = war['is_cwl_war']
            
            result_emoji = {"win": "üèÜ", "lose": "‚ùå", "tie": "ü§ù"}.get(result, "‚ùì")
            war_type = "üèÜ –õ–í–ö" if is_cwl else "‚öîÔ∏è –ö–í"
            
            message += f"*{i}.* {result_emoji} vs {opponent_name}\n"
            message += f"   {war_type} {team_size}–Ω–∞{team_size} | {clan_stars}‚≠ê - {opponent_stars}‚≠ê\n\n"
        
        return message
    
    def _format_war_details(self, war: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        opponent_name = war['opponent_name']
        team_size = war['team_size']
        clan_stars = war['clan_stars']
        opponent_stars = war['opponent_stars']
        clan_destruction = war['clan_destruction']
        opponent_destruction = war['opponent_destruction']
        result = war['result']
        is_cwl = war['is_cwl_war']
        total_violations = war['total_violations']
        attacks = war.get('attacks', [])
        
        result_text = {"win": "üèÜ –ü–æ–±–µ–¥–∞", "lose": "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "tie": "ü§ù –ù–∏—á—å—è"}.get(result, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        war_type = "üèÜ –õ–∏–≥–∞ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤" if is_cwl else "‚öîÔ∏è –ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞"
        
        message = f"‚öîÔ∏è *–î–µ—Ç–∞–ª–∏ –≤–æ–π–Ω—ã*\n\n"
        message += f"üõ° –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_name}\n"
        message += f"üë• –†–∞–∑–º–µ—Ä: {team_size} –Ω–∞ {team_size}\n"
        message += f"üè∑ –¢–∏–ø: {war_type}\n"
        message += f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_text}\n\n"
        message += f"‚≠ê *–ó–≤–µ–∑–¥—ã:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_stars}\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_stars}\n\n"
        message += f"üí• *–†–∞–∑—Ä—É—à–µ–Ω–∏—è:*\n"
        message += f"   –ù–∞—à –∫–ª–∞–Ω: {clan_destruction:.1f}%\n"
        message += f"   –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {opponent_destruction:.1f}%\n\n"
        message += f"üö´ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª: {total_violations}\n"
        message += f"‚öîÔ∏è –í—Å–µ–≥–æ –∞—Ç–∞–∫: {len(attacks)}"
        
        return message
    
    def _format_war_attacks(self, war: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫ –≤–æ–π–Ω—ã"""
        opponent_name = war['opponent_name']
        attacks = war.get('attacks', [])
        team_size = war['team_size']
        
        message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫*\n\n"
        message += f"üõ° vs {opponent_name}\n"
        message += f"‚öîÔ∏è –í—Å–µ–≥–æ –∞—Ç–∞–∫: {len(attacks)}\n\n"
        
        if not attacks:
            message += "‚ùå –î–∞–Ω–Ω—ã–µ –æ–± –∞—Ç–∞–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            return message
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ç–∞–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
        player_attacks = {}
        for attack in attacks:
            attacker = attack.get('attacker_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if attacker not in player_attacks:
                player_attacks[attacker] = []
            player_attacks[attacker].append(attack)
        
        message += "üë• *–ê—Ç–∞–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º:*\n"
        for i, (player, player_attack_list) in enumerate(player_attacks.items(), 1):
            total_stars = sum(attack.get('stars', 0) for attack in player_attack_list)
            total_destruction = sum(attack.get('destruction_percentage', 0) for attack in player_attack_list)
            avg_destruction = total_destruction / len(player_attack_list) if player_attack_list else 0
            
            message += f"{i}. **{player}**\n"
            message += f"   ‚öîÔ∏è –ê—Ç–∞–∫: {len(player_attack_list)} | ‚≠ê –ó–≤–µ–∑–¥: {total_stars} | üí• –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ: {avg_destruction:.1f}%\n\n"
        
        return message
    
    def _format_war_violations(self, war: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–π–Ω—ã"""
        opponent_name = war['opponent_name']
        total_violations = war['total_violations']
        attacks = war.get('attacks', [])
        team_size = war['team_size']
        
        message = f"üö´ *–ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª*\n\n"
        message += f"üõ° vs {opponent_name}\n"
        message += f"üö´ –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {total_violations}\n\n"
        
        if total_violations == 0:
            message += "‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±–ª—é–¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω—ã."
            return message
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç–∞–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        violations = []
        member_attack_count = {}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for attack in attacks:
            attacker = attack.get('attacker_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            member_attack_count[attacker] = member_attack_count.get(attacker, 0) + 1
        
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏
        expected_attackers = team_size  # –ö–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        actual_attackers = len(member_attack_count)
        
        if actual_attackers < expected_attackers:
            missed_attacks = expected_attackers - actual_attackers
            violations.append(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ç–∞–∫: {missed_attacks}")
        
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏ (–º–µ–Ω–µ–µ 2 –∞—Ç–∞–∫)
        incomplete_attacks = []
        for player, count in member_attack_count.items():
            if count < 2:
                incomplete_attacks.append(f"{player} ({count}/2)")
        
        if incomplete_attacks:
            violations.append(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –∞—Ç–∞–∫–∏: {', '.join(incomplete_attacks)}")
        
        if violations:
            message += "üìã *–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:*\n"
            for violation in violations:
                message += f"‚Ä¢ {violation}\n"
        else:
            message += "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
        return message
    
    def _sort_members(self, members: List[Dict], sort_type: str) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        if sort_type == MemberSort.ROLE:
            role_order = {"leader": 0, "coLeader": 1, "admin": 2, "member": 3}
            return sorted(members, key=lambda m: (role_order.get(m.get('role', 'member'), 3), -m.get('trophies', 0)))
        elif sort_type == MemberSort.TROPHIES:
            return sorted(members, key=lambda m: -m.get('trophies', 0))
        elif sort_type == MemberSort.DONATIONS:
            return sorted(members, key=lambda m: -m.get('donations', 0))
        elif sort_type == MemberSort.NAME:
            return sorted(members, key=lambda m: m.get('name', '').lower())
        else:
            return members
    
    def _filter_wars_by_sort(self, wars: List[Dict], sort_order: str) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–π–Ω –ø–æ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        if sort_order == WarSort.WINS:
            return [war for war in wars if war['result'] == 'win']
        elif sort_order == WarSort.LOSSES:
            return [war for war in wars if war['result'] == 'lose']
        elif sort_order == WarSort.CWL_ONLY:
            return [war for war in wars if war['is_cwl_war']]
        else:
            return wars  # RECENT - —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ
    
    async def handle_subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            
            if subscription and subscription.is_active and not subscription.is_expired():
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                subscription_type_display = "üëë –ü–†–û –ü–õ–Æ–°" if "proplus" in subscription.subscription_type else "üíé –ü—Ä–µ–º–∏—É–º"
                message = (
                    f"{subscription_type_display} <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üìÖ –¢–∏–ø: {self.payment_service.get_subscription_name(subscription.subscription_type)}\n"
                    f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {subscription.days_remaining()}\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
                )
                keyboard = Keyboards.subscription_status(True)
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                from policy import get_policy_url
                
                message = (
                    f"üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
                    f"üíé <b>–ü—Ä–µ–º–∏—É–º:</b>\n"
                    f"‚Ä¢ üîî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    f"‚Ä¢ üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    f"‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
                    f"üëë <b>–ü–†–û –ü–õ–Æ–°:</b>\n"
                    f"‚Ä¢ ‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º\n"
                    f"‚Ä¢ üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                    f"‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                    f"‚Ä¢ üõ°Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                    f"‚Ä¢ ‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                    f"üìã <a href='{get_policy_url()}'>–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</a>\n\n"
                    f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:</b>"
                )
                keyboard = Keyboards.subscription_types()
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    message, 
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    message, 
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
    
    async def handle_subscription_extend(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await self.db_service.get_subscription(chat_id)
            
            if not subscription or not subscription.is_active or subscription.is_expired():
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ–Ω—é
                await self.handle_subscription_menu(update, context)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_type_display = "üëë –ü–†–û –ü–õ–Æ–°" if "proplus" in subscription.subscription_type else "üíé –ü—Ä–µ–º–∏—É–º"
            message = (
                f"{subscription_type_display} <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"üìÖ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {self.payment_service.get_subscription_name(subscription.subscription_type)}\n"
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {subscription.days_remaining()}\n\n"
                f"üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>\n\n"
                f"üíé <b>–ü—Ä–µ–º–∏—É–º:</b>\n"
                f"‚Ä¢ üîî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
                f"üëë <b>–ü–†–û –ü–õ–Æ–°:</b>\n"
                f"‚Ä¢ ‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º\n"
                f"‚Ä¢ üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                f"‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                f"‚Ä¢ üõ°Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                f"‚Ä¢ ‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>"
            )
            keyboard = Keyboards.subscription_types()
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    
    
    async def handle_subscription_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                subscription_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if subscription_type == "premium":
                message = (
                    f"üíé <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"üîî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                    f"üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    f"üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
                    f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>"
                )
            else:  # proplus
                message = (
                    f"üëë <b>–ü–†–û –ü–õ–Æ–° –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                    f"‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º\n"
                    f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                    f"üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                    f"üõ°Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                    f"‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
                    f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>"
                )
            
            keyboard = Keyboards.subscription_periods(subscription_type)
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
    
    async def handle_subscription_payment_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                     subscription_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            price = self.payment_service.get_subscription_price(subscription_type)
            name = self.payment_service.get_subscription_name(subscription_type)
            
            message = (
                f"üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"üì¶ –£—Å–ª—É–≥–∞: {name}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ\n\n"
                f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏?"
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                                    callback_data=f"confirm_payment:{subscription_type}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                                    callback_data=Keyboards.SUBSCRIPTION_CALLBACK)]
            ])
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
    
    async def handle_subscription_period_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                                  subscription_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ YooKassa
            payment_data = await self.payment_service.create_payment(
                telegram_id=chat_id,
                subscription_type=subscription_type,
                return_url=f"https://t.me/{config.BOT_USERNAME}?start=payment_success_{subscription_type}"
            )
            
            if payment_data and 'confirmation' in payment_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['pending_payment'] = {
                    'payment_id': payment_data['id'],
                    'subscription_type': subscription_type,
                    'amount': payment_data['amount']['value']
                }
                
                subscription_name = self.payment_service.get_subscription_name(subscription_type)
                price = self.payment_service.get_subscription_price(subscription_type)
                
                message = (
                    f"üí≥ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name}\n"
                    f"üí∞ –°—É–º–º–∞: {price:.0f} ‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                    f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                )
                
                keyboard = Keyboards.subscription_payment(payment_data['confirmation']['confirmation_url'])
                
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
                await self._schedule_payment_check(context, payment_data['id'], chat_id, subscription_type)
            
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=Keyboards.back_to_main()
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_to_main()
            )
    
    async def _schedule_payment_check(self, context: ContextTypes.DEFAULT_TYPE, payment_id: str, 
                                     chat_id: int, subscription_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        
        async def check_payment():
            for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 5 –º–∏–Ω—É—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)
                
                payment_status = await self.payment_service.check_payment_status(payment_id)
                if payment_status and payment_status.get('status') == 'succeeded':
                    await self._process_successful_payment(chat_id, subscription_type, payment_id, payment_status)
                    break
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ job_queue)
        asyncio.create_task(check_payment())
    
    async def _process_successful_payment(self, telegram_id: int, subscription_type: str, 
                                        payment_id: str, payment_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
            duration = self.payment_service.get_subscription_duration(subscription_type)
            amount = float(payment_data['amount']['value'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            existing_subscription = await self.db_service.get_subscription(telegram_id)
            
            if existing_subscription and existing_subscription.is_active and not existing_subscription.is_expired():
                # –ü—Ä–æ–¥–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                new_end_date = existing_subscription.end_date + duration
                existing_subscription.end_date = new_end_date
                existing_subscription.payment_id = payment_id
                existing_subscription.amount = amount
                
                success = await self.db_service.save_subscription(existing_subscription)
                message = (
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
                    f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.0f} ‚ÇΩ"
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                start_date = datetime.now()
                end_date = start_date + duration
                
                new_subscription = Subscription(
                    telegram_id=telegram_id,
                    subscription_type=subscription_type,
                    start_date=start_date,
                    end_date=end_date,
                    is_active=True,
                    payment_id=payment_id,
                    amount=amount
                )
                
                success = await self.db_service.save_subscription(new_subscription)
                message = (
                    f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {amount:.0f} ‚ÇΩ"
                )
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
                await self._send_payment_notification(telegram_id, message)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    async def _send_payment_notification(self, telegram_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            from config import config
            from telegram import Bot
            
            bot = Bot(token=config.BOT_TOKEN)
            await bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self._save_pending_notification(telegram_id, message)
    
    async def _save_pending_notification(self, telegram_id: int, message: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_data = {
                'telegram_id': telegram_id,
                'message': message,
                'type': 'payment_success',
                'created_at': datetime.now().isoformat()
            }
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def display_current_war(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ –∫–ª–∞–Ω–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("‚öîÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ...")
        
        try:
            async with self.coc_client as client:
                war_data = await client.get_clan_current_war(clan_tag)
                
                if not war_data:
                    await update.callback_query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ."
                    )
                    return
                
                # Check war state
                state = war_data.get('state', 'notInWar')
                
                if state == 'notInWar':
                    await update.callback_query.edit_message_text(
                        "üïäÔ∏è –ö–ª–∞–Ω —Å–µ–π—á–∞—Å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–µ."
                    )
                    return
                
                # Format current war information
                message = self._format_current_war_info(war_data)
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN
                )
        
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ –¥–ª—è –∫–ª–∞–Ω–∞ {clan_tag}")
            await update.callback_query.edit_message_text(
                "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–π–Ω–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ."
            )
    
    async def display_cwl_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–∏–≥–µ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤ (CWL)"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö...")
        
        try:
            async with self.coc_client as client:
                cwl_data = await client.get_clan_war_league_group(clan_tag)
                
                if not cwl_data:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–ª–∞–Ω–∞ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
                    from translations import translation_manager
                    message = translation_manager.get_text(update, 'cwl_not_participating', 
                                                         "‚ùå –ö–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –õ–í–ö.")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∫–ª–∞–Ω–∞
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            translation_manager.get_text(update, 'cwl_back_to_clan', "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞–Ω—É"),
                            callback_data="clan_info"
                        )]
                    ])
                    
                    await update.callback_query.edit_message_text(
                        message,
                        reply_markup=keyboard
                    )
                    return
                
                # Format CWL information
                message = self._format_cwl_info(cwl_data)
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN
                )
        
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö –¥–ª—è –∫–ª–∞–Ω–∞ {clan_tag}")
            await update.callback_query.edit_message_text(
                "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –õ–í–ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö."
            )
    
    def _format_current_war_info(self, war_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—ÇÔøΩÔøΩ—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ"""
        state = war_data.get('state', 'unknown')
        team_size = war_data.get('teamSize', 0)
        
        # Get clan and opponent info
        clan = war_data.get('clan', {})
        opponent = war_data.get('opponent', {})
        
        clan_name = clan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        clan_stars = clan.get('stars', 0)
        clan_destruction = clan.get('destructionPercentage', 0.0)
        clan_attacks = clan.get('attacks', 0)
        
        opponent_name = opponent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        opponent_stars = opponent.get('stars', 0)
        opponent_destruction = opponent.get('destructionPercentage', 0.0)
        opponent_attacks = opponent.get('attacks', 0)
        
        # State translations
        state_translations = {
            'preparation': 'üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            'inWar': '‚öîÔ∏è –ò–¥–µ—Ç –≤–æ–π–Ω–∞',
            'warEnded': 'üèÅ –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        state_text = state_translations.get(state, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"‚öîÔ∏è *–¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞*\n\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {state_text}\n"
        message += f"üë• –†–∞–∑–º–µ—Ä: {team_size} –Ω–∞ {team_size}\n\n"
        
        message += f"üõ°Ô∏è *{clan_name}*\n"
        message += f"‚≠ê –ó–≤–µ–∑–¥—ã: {clan_stars}\n"
        message += f"üí• –†–∞–∑—ÄÔøΩÔøΩ—à–µ–Ω–∏–µ: {clan_destruction:.1f}%\n"
        message += f"‚öîÔ∏è –ê—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {clan_attacks}\n\n"
        
        message += f"üõ°Ô∏è *{opponent_name}*\n"
        message += f"‚≠ê –ó–≤–µ–∑–¥—ã: {opponent_stars}\n"
        message += f"üí• –†–∞–∑—Ä—É—à–µ–Ω–∏–µ: {opponent_destruction:.1f}%\n"
        message += f"‚öîÔ∏è –ê—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {opponent_attacks}\n\n"
        
        # Show time information based on state
        if state == 'preparation':
            start_time = war_data.get('startTime')
            if start_time:
                formatted_time = self._format_datetime(start_time)
                message += f"üïê –ù–∞—á–∞–ª–æ –≤–æ–π–Ω—ã: {formatted_time}\n"
        elif state == 'inWar':
            end_time = war_data.get('endTime')
            if end_time:
                formatted_time = self._format_datetime(end_time)
                message += f"üïê –ö–æ–Ω–µ—Ü –≤–æ–π–Ω—ã: {formatted_time}\n"
        
        return message
    
    def _format_cwl_info(self, cwl_data: Dict[Any, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö"""
        state = cwl_data.get('state', 'unknown')
        season = cwl_data.get('season', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        # State translations
        state_translations = {
            'preparation': 'üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            'inWar': '‚öîÔ∏è –ò–¥–µ—Ç –õ–í–ö',
            'ended': 'üèÅ –õ–í–ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        state_text = state_translations.get(state, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"üèÜ *–õ–∏–≥–∞ –≤–æ–π–Ω –∫–ª–∞–Ω–æ–≤*\n\n"
        message += f"üìÖ –°–µ–∑–æ–Ω: {season}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {state_text}\n\n"
        
        # Get clans in the league
        clans = cwl_data.get('clans', [])
        if clans:
            message += f"üõ°Ô∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ª–∏–≥–∏ ({len(clans)} –∫–ª–∞–Ω–æ–≤):*\n"
            for i, clan in enumerate(clans[:8], 1):  # Show up to 8 clans
                clan_name = clan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                clan_level = clan.get('clanLevel', 0)
                message += f"{i}. {clan_name} (—É—Ä. {clan_level})\n"
            
            if len(clans) > 8:
                message += f"... –∏ –µ—â–µ {len(clans) - 8} –∫–ª–∞–Ω–æ–≤\n"
        
        # Get rounds information
        rounds = cwl_data.get('rounds', [])
        if rounds:
            message += f"\nüìã *–†–∞—É–Ω–¥—ã:* {len(rounds)}\n"
            
            # Show current round info if available
            current_round = None
            for i, round_data in enumerate(rounds):
                war_tags = round_data.get('warTags', [])
                if war_tags and war_tags[0] != '#0':
                    current_round = i + 1
                    break
            
            if current_round:
                message += f"‚öîÔ∏è –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥: {current_round}\n"
        
        return message
    
    async def display_cwl_bonus_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, year_month: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö"""
        try:
            # Get CWL bonus data from database for the specified month
            bonus_data = await self.db_service.get_cwl_bonus_data(year_month)
            
            if not bonus_data:
                await update.callback_query.edit_message_text(
                    f"‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö –∑–∞ {year_month} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return
            
            # Format bonus information  
            message = self._format_cwl_bonus_info(bonus_data, year_month)
            
            await update.callback_query.edit_message_text(
                message, parse_mode=ParseMode.MARKDOWN
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö."
            )
    
    def _format_cwl_bonus_info(self, bonus_data: List[Dict], year_month: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö –õ–í–ö"""
        # Parse year-month for display
        try:
            year, month = year_month.split('-')
            month_names = {
                '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
                '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
                '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
            }
            month_name = month_names.get(month, month)
            display_date = f"{month_name} {year}"
        except Exception:
            display_date = year_month
        
        message = f"üèÜ *–ë–æ–Ω—É—Å—ã –õ–í–ö - {display_date}*\n\n"
        
        if not bonus_data:
            message += "üì≠ –î–∞–Ω–Ω—ã–µ –æ –±–æ–Ω—É—Å–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            return message
        
        total_bonuses = len(bonus_data)
        message += f"üìä –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –≤—ã–¥–∞–Ω–æ: {total_bonuses}\n\n"
        
        # Group bonuses by player
        player_bonuses = {}
        for bonus in bonus_data:
            player_name = bonus.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            bonus_amount = bonus.get('bonus_amount', 0)
            if player_name not in player_bonuses:
                player_bonuses[player_name] = 0
            player_bonuses[player_name] += bonus_amount
        
        # Sort players by total bonus amount
        sorted_players = sorted(player_bonuses.items(), key=lambda x: x[1], reverse=True)
        
        message += "üéñÔ∏è *–ò–≥—Ä–æ–∫–∏ –∏ –∏—Ö –±–æ–Ω—É—Å—ã:*\n"
        for i, (player_name, total_bonus) in enumerate(sorted_players[:10], 1):
            message += f"{i}. {player_name}: {total_bonus:,} üíé\n"
        
        if len(sorted_players) > 10:
            message += f"... –∏ –µ—â–µ {len(sorted_players) - 10} –∏–≥—Ä–æ–∫–æ–≤\n"
        
        # Calculate total bonus amount
        total_amount = sum(player_bonuses.values())
        message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {total_amount:,} üíé"
        
        return message
    
    async def display_cwl_bonus_distribution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        try:
            clan_tag = context.user_data.get('inspecting_clan')
            if not clan_tag:
                await update.callback_query.edit_message_text("‚ùå –ö–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return
            
            # Get clan info to determine league
            async with self.coc_client as client:
                clan_data = await client.get_clan_info(clan_tag)
                
                if not clan_data:
                    await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.")
                    return
                
                clan_name = clan_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # Get clan league
                war_league = clan_data.get('warLeague', {})
                league_name = war_league.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # Determine number of bonus spots based on league
                bonus_spots = self._get_bonus_spots_by_league(league_name)
                
                # Get current CWL season dates (approximate - from start of current month to now)
                now = datetime.now()
                # CWL typically starts around the 1st of the month
                season_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
                season_end = now
                
                # Get donation stats for the season
                donation_stats = await self.db_service.get_cwl_season_donation_stats(
                    season_start.isoformat(), season_end.isoformat()
                )
                
                # Get attack stats for the season
                attack_stats = await self.db_service.get_cwl_season_attack_stats(
                    season_start.isoformat(), season_end.isoformat()
                )
                
                # Get current clan members to map tags to names
                members = clan_data.get('memberList', [])
                member_map = {m.get('tag'): m.get('name') for m in members}
                
                # Calculate bonus distribution
                distribution = self._calculate_bonus_distribution(
                    donation_stats, attack_stats, member_map, bonus_spots
                )
                
                # Format and display the message
                message = self._format_cwl_bonus_distribution(
                    clan_name, league_name, bonus_spots, distribution
                )
                
                await update.callback_query.edit_message_text(
                    message, parse_mode=ParseMode.MARKDOWN
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –õ–í–ö: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤."
            )
    
    def _get_bonus_spots_by_league(self, league_name: str) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ –ª–∏–≥–µ"""
        # Based on Clash of Clans CWL league bonus structure
        league_bonuses = {
            'Champion League I': 8,
            'Champion League II': 7,
            'Champion League III': 6,
            'Master League I': 5,
            'Master League II': 4,
            'Master League III': 3,
            'Crystal League I': 3,
            'Crystal League II': 2,
            'Crystal League III': 2,
            'Gold League I': 2,
            'Gold League II': 2,
            'Gold League III': 2,
            'Silver League I': 2,
            'Silver League II': 2,
            'Silver League III': 2,
            'Bronze League I': 2,
            'Bronze League II': 2,
            'Bronze League III': 2,
        }
        return league_bonuses.get(league_name, 2)  # Default to 2 if unknown
    
    def _calculate_bonus_distribution(self, donation_stats: Dict[str, int], 
                                     attack_stats: Dict[str, Dict], 
                                     member_map: Dict[str, str],
                                     bonus_spots: int) -> List[Dict]:
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        candidates = []
        
        # Combine all player data
        all_player_tags = set(donation_stats.keys()) | set(attack_stats.keys())
        
        for player_tag in all_player_tags:
            player_name = member_map.get(player_tag, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            donations = donation_stats.get(player_tag, 0)
            attacks = attack_stats.get(player_tag, {
                'cwl_attacks': 0,
                'regular_attacks': 0,
                'cwl_wars': 0,
                'regular_wars': 0
            })
            
            # Skip players who don't meet minimum regular war attacks (10)
            if attacks['regular_attacks'] < 10:
                continue
            
            candidates.append({
                'player_tag': player_tag,
                'player_name': player_name,
                'donations': donations,
                'cwl_attacks': attacks['cwl_attacks'],
                'cwl_wars': attacks['cwl_wars'],
                'regular_attacks': attacks['regular_attacks'],
                'regular_wars': attacks['regular_wars']
            })
        
        if not candidates:
            return []
        
        # Sort to find top donator
        sorted_by_donations = sorted(candidates, key=lambda x: x['donations'], reverse=True)
        
        # First spot always goes to top donator
        distribution = []
        if sorted_by_donations:
            top_donator = sorted_by_donations[0]
            distribution.append({
                'rank': 1,
                'player_name': top_donator['player_name'],
                'reason': f"üéÅ –¢–æ–ø –¥–æ–Ω–∞—Ç–æ–≤: {top_donator['donations']:,}",
                'cwl_attacks': top_donator['cwl_attacks'],
                'regular_attacks': top_donator['regular_attacks']
            })
            top_donator_tag = top_donator['player_tag']
        else:
            top_donator_tag = None
        
        # Sort remaining candidates by attack performance
        # Priority: CWL attacks completed (7/7 > 6/7 > ...), then by regular war attacks
        remaining_candidates = [c for c in candidates if c['player_tag'] != top_donator_tag]
        
        def attack_priority(candidate):
            # Return tuple for sorting: (CWL attacks completed, regular attacks)
            # Higher CWL attacks are better, then higher regular attacks
            cwl_ratio = candidate['cwl_attacks']
            return (cwl_ratio, candidate['regular_attacks'])
        
        sorted_by_attacks = sorted(remaining_candidates, key=attack_priority, reverse=True)
        
        # Fill remaining bonus spots
        for i, candidate in enumerate(sorted_by_attacks[:bonus_spots - 1], 2):
            distribution.append({
                'rank': i,
                'player_name': candidate['player_name'],
                'reason': f"‚öîÔ∏è –õ–í–ö: {candidate['cwl_attacks']} –∞—Ç–∞–∫, –ö–í: {candidate['regular_attacks']} –∞—Ç–∞–∫",
                'cwl_attacks': candidate['cwl_attacks'],
                'regular_attacks': candidate['regular_attacks']
            })
        
        return distribution
    
    def _format_cwl_bonus_distribution(self, clan_name: str, league_name: str, 
                                      bonus_spots: int, distribution: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        message = f"üíé *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –õ–í–ö*\n\n"
        message += f"üõ°Ô∏è –ö–ª–∞–Ω: {clan_name}\n"
        message += f"üèÜ –õ–∏–≥–∞: {league_name}\n"
        message += f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: {bonus_spots}\n\n"
        
        # Add description of the system
        message += "üìã *–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:*\n"
        message += "1Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ - –∏–≥—Ä–æ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –∑–∞ —Å–µ–∑–æ–Ω\n"
        message += "2Ô∏è‚É£ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ - –∏–≥—Ä–æ–∫–∏ —Å –ª—É—á—à–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∞—Ç–∞–∫ –≤ –õ–í–ö\n"
        message += "‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º 10 –∞—Ç–∞–∫ –≤ –æ–±—ã—á–Ω—ã—Ö –ö–í –∑–∞ —Å–µ–∑–æ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        message += "üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–æ–ª—å—à–µ –∞—Ç–∞–∫ –õ–í–ö ‚Üí –±–æ–ª—å—à–µ –∞—Ç–∞–∫ –ö–í\n\n"
        
        if not distribution:
            message += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –Ω–∞ –±–æ–Ω—É—Å—ã.\n"
            message += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            message += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω\n"
            message += "‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (10 –∞—Ç–∞–∫ –ö–í)\n"
            return message
        
        message += "üéñÔ∏è *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –º–µ—Å—Ç:*\n\n"
        
        for entry in distribution:
            rank_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(entry['rank'], f"{entry['rank']}.")
            message += f"{rank_emoji} {entry['player_name']}\n"
            message += f"   {entry['reason']}\n\n"
        
        if len(distribution) < bonus_spots:
            message += f"‚ÑπÔ∏è –û—Å—Ç–∞–ª–æ—Å—å {bonus_spots - len(distribution)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç\n"
        
        return message
    
    async def handle_premium_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_service.get_subscription(chat_id)
            
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.callback_query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
                    reply_markup=Keyboards.subscription_status(False)
                )
                return
            
            subscription_type_display = "üëë –ü–†–û –ü–õ–Æ–°" if "proplus" in subscription.subscription_type else "üíé –ü—Ä–µ–º–∏—É–º"
            
            message = (
                f"{subscription_type_display} <b>–ú–µ–Ω—é –ø—Ä–µ–º–∏—É–º</b>\n\n"
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é!\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription.end_date.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {subscription.days_remaining()}\n\n"
                f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                f"‚Ä¢ üîî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π\n"
                f"‚Ä¢ ‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"‚Ä¢ üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            )
            
            keyboard = Keyboards.premium_menu()
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é.")
    
    async def handle_advanced_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_service.get_subscription(chat_id)
            
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.callback_query.edit_message_text(
                    "‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                    reply_markup=Keyboards.subscription_status(False)
                )
                return
            
            message = (
                f"‚öôÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ö–í.\n"
                f"–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (m) –∏–ª–∏ —á–∞—Å–∞—Ö (h).\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 14m, 2h, 30m\n\n"
                f"‚è∞ –ú–∞–∫—Å–∏–º—É–º: 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –ö–í\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            keyboard = Keyboards.notification_advanced_menu()
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message, parse_mode=ParseMode.HTML)
                await update.callback_query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    message, 
                    parse_mode=ParseMode.HTML
                )
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    reply_markup=keyboard
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_msg)
            else:
                await update.message.reply_text(error_msg)
    
    async def handle_building_tracker_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_service.get_subscription(chat_id)
            
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.callback_query.edit_message_text(
                    "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                    reply_markup=Keyboards.subscription_status(False)
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ —Ñ–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞ SuperCell - –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã
            check_interval_text = "–∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            from building_monitor import BuildingMonitor
            building_monitor = context.bot_data.get('building_monitor', None)
            is_active = False
            
            if building_monitor:
                is_active = await building_monitor.is_tracking_active(chat_id)
            
            message = (
                f"üèóÔ∏è <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π</b>\n\n"
                f"üìã <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                f"‚Ä¢ –ß–µ–∫–µ—Ä {check_interval_text} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π, –≥–µ—Ä–æ–µ–≤, –ø–∏—Ç–æ–º—Ü–µ–≤, —Å—Ç–µ–Ω –∏ –¥–µ—Ä–µ–≤–Ω–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è\n"
                f"‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—É–ª—É—á—à–µ–Ω–∏–π) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º —Å–∫–∞–Ω–æ–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–æ—Ñ–∏–ª–∏\n\n"
                f"üèóÔ∏è <b>–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:</b>\n"
                f"‚Ä¢ –í—Å–µ –∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ—Ä–µ–≤–Ω–∏\n"
                f"‚Ä¢ –ì–µ—Ä–æ–∏ –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏\n"
                f"‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤/–ø–∏—Ç–æ–º—Ü—ã\n"
                f"‚Ä¢ –í–æ–π—Å–∫–∞ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è (—É–ª—É—á—à–µ–Ω–∏—è –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏)\n"
                f"‚Ä¢ –°—Ç–µ–Ω—ã\n"
                f"‚Ä¢ –î–µ—Ä–µ–≤–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∏ –µ—ë —É–ª—É—á—à–µ–Ω–∏—è\n\n"
                f"‚è±Ô∏è <b>–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ SuperCell)\n\n"
                f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
                f"‚Ä¢ –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –î–ï–ô–°–¢–í–£–Æ–©–ï–ô –ø–æ–¥–ø–∏—Å–∫–∏\n"
                f"‚Ä¢ –ü—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ü–ï–†–ï–°–¢–ê–ù–£–¢ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è\n"
                f"‚Ä¢ –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∫–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
                f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' if is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n\n"
                f"üí° <b>–ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
                f"\"üèóÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüë§ –ê–∫–∫–∞—É–Ω—Ç: PlayerName\nüî® –ú–æ—Ä—Ç–∏—Ä–∞ —É–ª—É—á—à–µ–Ω–∞ —Å 14 –Ω–∞ 15 —É—Ä–æ–≤–µ–Ω—å!\""
            )
            
            keyboard = Keyboards.building_tracker_menu(is_active)
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    
    async def handle_building_tracker_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_service.get_subscription(chat_id)
            
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.callback_query.edit_message_text(
                    "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                    reply_markup=Keyboards.subscription_status(False)
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞) –∏–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            user_profiles = await self.db_service.get_user_profiles(chat_id)
            user = await self.db_service.find_user(chat_id) if not user_profiles else None
            
            if not user_profiles and not user:
                await update.callback_query.edit_message_text(
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
                )
                return
            
            from building_monitor import BuildingMonitor
            building_monitor = context.bot_data.get('building_monitor', None)

            if not building_monitor:
                await update.callback_query.edit_message_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            is_active = await building_monitor.is_tracking_active(chat_id)
            
            if is_active:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                success = await building_monitor.deactivate_tracking(chat_id)
                if success:
                    message = "üî¥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."
                else:
                    message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            else:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                player_tag = user.player_tag if user else None
                success = await building_monitor.activate_tracking(chat_id, player_tag)
                if success:
                    profile_count = len(user_profiles) if user_profiles else 1
                    message = (
                        "üü¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!\n\n"
                        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {profile_count}\n"
                        "üìã –°–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π —Å–Ω–∏–º–æ–∫ –≤–∞—à–∏—Ö –∑–¥–∞–Ω–∏–π.\n"
                        "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 1.5 –º–∏–Ω—É—Ç—ã.\n"
                        "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–º —É–ª—É—á—à–µ–Ω–∏–∏."
                    )
                    if profile_count > 1:
                        message += "\nüë§ –í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
                else:
                    message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            new_status = not is_active if success else is_active
            keyboard = Keyboards.building_tracker_menu(new_status)
            
            await update.callback_query.edit_message_text(
                message, 
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

    async def handle_profile_manager_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await self.db_service.get_subscription(chat_id)
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            max_profiles = Keyboards.get_subscription_max_profiles(subscription.subscription_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profiles = await self.db_service.get_user_profiles(chat_id)
            profile_data = []
            
            for profile in profiles:
                async with self.coc_client as client:
                    player_data = await client.get_player_info(profile.player_tag)
                    profile_info = {
                        'player_tag': profile.player_tag,
                        'profile_name': profile.profile_name or f"–ü—Ä–æ—Ñ–∏–ª—å {len(profile_data) + 1}",
                        'player_name': player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if player_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'is_primary': profile.is_primary
                    }
                    profile_data.append(profile_info)
            
            message = f"üë• *–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π*\n\n"
            message += f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}/{max_profiles}\n"
            if profiles:
                message += "‚≠ê - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            else:
                message += "\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n–ù–∞–∂–º–∏—Ç–µ \"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=Keyboards.profile_manager_menu(profile_data, max_profiles),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=Keyboards.profile_manager_menu(profile_data, max_profiles),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π.")

    async def display_profile_from_manager(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            back_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Ñ–∏–ª–µ–π", 
                                    callback_data=Keyboards.PROFILE_MANAGER_CALLBACK)],
                [InlineKeyboardButton("‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º", 
                                    callback_data=f"set_primary:{player_tag}")]
            ])
            
            await self.display_player_info(
                update, context, player_tag, back_keyboard=back_keyboard, from_callback=True
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")

    async def handle_profile_delete_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            profiles = await self.db_service.get_user_profiles(chat_id)
            if not profiles:
                await update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            
            profile_data = []
            for profile in profiles:
                async with self.coc_client as client:
                    player_data = await client.get_player_info(profile.player_tag)
                    profile_info = {
                        'player_tag': profile.player_tag,
                        'profile_name': profile.profile_name or f"–ü—Ä–æ—Ñ–∏–ª—å {len(profile_data) + 1}",
                        'player_name': player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if player_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    }
                    profile_data.append(profile_info)
            
            message = "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            message += "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
            message += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=Keyboards.profile_delete_menu(profile_data),
                parse_mode=ParseMode.MARKDOWN
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è.")

    async def handle_profile_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            async with self.coc_client as client:
                player_data = await client.get_player_info(player_tag)
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if player_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            success = await self.db_service.delete_user_profile(chat_id, player_tag)
            
            if success:
                message = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {player_name} ({player_tag}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
            
            await update.callback_query.edit_message_text(message)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)
            await self.handle_profile_manager_request(update, context)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

    async def handle_profile_add_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await self.db_service.get_subscription(chat_id)
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.callback_query.edit_message_text("‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
            max_profiles = Keyboards.get_subscription_max_profiles(subscription.subscription_type)
            current_count = await self.db_service.get_user_profile_count(chat_id)
            
            if current_count >= max_profiles:
                await update.callback_query.edit_message_text(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π ({max_profiles}).\n"
                    "–£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π."
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–≥–∞ –∏–≥—Ä–æ–∫–∞
            context.user_data['state'] = UserState.AWAITING_PLAYER_TAG_TO_ADD_PROFILE
            
            await update.callback_query.edit_message_text(
                f"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –≤ Clash of Clans.\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF\n\n"
                f"–ü—Ä–æ—Ñ–∏–ª–µ–π: {current_count}/{max_profiles}",
                parse_mode=ParseMode.MARKDOWN
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    async def handle_add_profile_tag(self, update: Update, context: ContextTypes.DEFAULT_TYPE, player_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —Ç–µ–≥—É"""
        chat_id = update.effective_chat.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await self.db_service.get_subscription(chat_id)
            if not subscription or not subscription.is_active or subscription.is_expired():
                await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
            max_profiles = Keyboards.get_subscription_max_profiles(subscription.subscription_type)
            current_count = await self.db_service.get_user_profile_count(chat_id)
            
            if current_count >= max_profiles:
                await update.message.reply_text(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π ({max_profiles})."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            async with self.coc_client as client:
                player_data = await client.get_player_info(player_tag)
                
                if not player_data:
                    await update.message.reply_text(
                        "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞."
                    )
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å
            existing_profiles = await self.db_service.get_user_profiles(chat_id)
            if any(p.player_tag == player_tag for p in existing_profiles):
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {player_data.get('name', '–∏–≥—Ä–æ–∫–∞')} ({player_tag}) —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile_name = f"–ü—Ä–æ—Ñ–∏–ª—å {current_count + 1}"
            is_primary = current_count == 0  # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º
            
            new_profile = UserProfile(
                telegram_id=chat_id,
                player_tag=player_tag,
                profile_name=profile_name,
                is_primary=is_primary
            )
            
            success = await self.db_service.save_user_profile(new_profile)
            
            if success:
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                message += f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
                message += f"üè∑ –¢–µ–≥: {player_tag}\n"
                message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {profile_name}"
                
                if is_primary:
                    message += "\n‚≠ê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
                
                await update.message.reply_text(message)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ—Ñ–∏–ª–µ–π
                await asyncio.sleep(2)
                await self.handle_profile_manager_request(update, context)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    async def handle_linked_clans_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤"""
        chat_id = update.effective_chat.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_message = await update.message.reply_text("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            linked_clans = await self.db_service.get_linked_clans(chat_id)
            max_clans = await self.db_service.get_max_linked_clans_for_user(chat_id)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            clans_data = []
            for clan in linked_clans:
                clans_data.append({
                    'clan_tag': clan.clan_tag,
                    'clan_name': clan.clan_name,
                    'slot_number': clan.slot_number
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            subscription = await self.db_service.get_subscription(chat_id)
            user_tier = "–æ–±—ã—á–Ω—ã–π"
            if subscription and subscription.is_active and not subscription.is_expired():
                if subscription.subscription_type in ["proplus", "proplus_permanent"]:
                    user_tier = "Pro Plus"
                elif subscription.subscription_type in ["premium"]:
                    user_tier = "Premium"
            
            message = f"üîó *–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω—ã*\n\n"
            message += f"üë§ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {user_tier}\n"
            message += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(linked_clans)}/{max_clans}\n\n"
            
            if linked_clans:
                message += "üõ° *–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω—ã:*\n"
                for clan in linked_clans:
                    message += f"   {clan.slot_number}. {clan.clan_name} `{clan.clan_tag}`\n"
            else:
                message += "üìù –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤.\n"
                message += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–ª–∞–Ω."
            
            await loading_message.edit_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=Keyboards.linked_clans_menu(clans_data, max_clans)
            )
        
        except asyncio.TimeoutError:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            await loading_message.edit_text(
                "‚è±Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤: {e}")
            await loading_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    async def handle_link_clan_tag(self, update: Update, context: ContextTypes.DEFAULT_TYPE, clan_tag: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª–∞–Ω–∞ –ø–æ —Ç–µ–≥—É"""
        chat_id = update.effective_chat.id
        slot_number = context.user_data.get('linking_clan_slot', 1)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ —á–µ—Ä–µ–∑ API
            async with self.coc_client as client:
                clan_data = await client.get_clan_info(clan_tag)
                
                if not clan_data:
                    await update.message.reply_text(
                        "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    return
                
                clan_name = clan_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞–Ω')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                max_clans = await self.db_service.get_max_linked_clans_for_user(chat_id)
                current_clans = await self.db_service.get_linked_clans(chat_id)
                
                if len(current_clans) >= max_clans:
                    await update.message.reply_text(
                        f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤ ({max_clans}).\n"
                        f"–£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–Ω, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π."
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫–ª–∞–Ω–µ
                from models.linked_clan import LinkedClan
                linked_clan = LinkedClan(
                    telegram_id=chat_id,
                    clan_tag=clan_tag,
                    clan_name=clan_name,
                    slot_number=slot_number
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = await self.db_service.save_linked_clan(linked_clan)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ –ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                        f"üõ° –ö–ª–∞–Ω: {clan_name}\n"
                        f"üè∑ –¢–µ–≥: `{clan_tag}`\n"
                        f"üìç –°–ª–æ—Ç: {slot_number}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
                    await asyncio.sleep(2)
                    await self.handle_linked_clans_request(update, context)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–ª–∞–Ω–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–ª–∞–Ω–∞.")
    
    async def handle_linked_clan_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, slot_number: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞"""
        chat_id = update.effective_chat.id
        
        try:
            success = await self.db_service.delete_linked_clan(chat_id, slot_number)
            
            if success:
                await update.callback_query.edit_message_text(
                    f"‚úÖ –ö–ª–∞–Ω –∏–∑ —Å–ª–æ—Ç–∞ {slot_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤
                await asyncio.sleep(2)
                await self.handle_linked_clans_request(update, context)
            else:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞: {e}")
            await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–Ω–∞.")
    
    async def close(self):

        if self.payment_service:
            await self.payment_service.close()
    
    async def handle_community_center_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ü–µ–Ω—Ç—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        try:
            message = (
                f"üèõÔ∏è <b>–¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</b>\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                f"–æ –∏–≥—Ä–µ Clash of Clans.\n\n"
                f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
                f"‚Ä¢ üèóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π - —É–∑–Ω–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è —É–ª—É—á—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–¥–∞–Ω–∏–π\n"
                f"‚Ä¢ üè∞ –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑ - –ª—É—á—à–∏–µ –±–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –¢–•\n"
                f"‚Ä¢ –ë–æ–ª—å—à–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º!"
            )
            
            keyboard = Keyboards.community_center_menu()
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é —Ü–µ–Ω—Ç—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: {e}")
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω—Ç—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
    
    async def handle_building_costs_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π"""
        try:
            message = (
                f"üèóÔ∏è <b>–°—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è —É–ª—É—á—à–µ–Ω–∏—è:\n\n"
                f"üè∞ <b>–û–±–æ—Ä–æ–Ω–∞</b> - –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è\n"
                f"‚öîÔ∏è <b>–ê—Ä–º–∏—è</b> - –≤–æ–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è\n"
                f"üíé <b>–†–µ—Å—É—Ä—Å—ã</b> - –¥–æ–±—ã–≤–∞—é—â–∏–µ –∏ —Ö—Ä–∞–Ω—è—â–∏–µ –∑–¥–∞–Ω–∏—è\n"
                f"üëë <b>–ì–µ—Ä–æ–∏</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –≥–µ—Ä–æ–µ–≤\n"
                f"üî® <b>–î–µ—Ä–µ–≤–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è</b> - –∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –¥–µ—Ä–µ–≤–Ω–∏"
            )
            
            keyboard = Keyboards.building_costs_menu()
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")
    
    async def handle_building_category_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–¥–∞–Ω–∏–π"""
        try:
            category_names = {
                "defense": "üè∞ –û–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–¥–∞–Ω–∏—è",
                "army": "‚öîÔ∏è –í–æ–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è",
                "resources": "üíé –†–µ—Å—É—Ä—Å–Ω—ã–µ –∑–¥–∞–Ω–∏—è",
                "heroes": "üëë –ì–µ—Ä–æ–∏",
                "builder": "üî® –î–µ—Ä–µ–≤–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è"
            }
            
            category_name = category_names.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            
            message = (
                f"<b>{category_name}</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                f"–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —É–ª—É—á—à–µ–Ω–∏—è:"
            )
            
            keyboard = Keyboards.building_category_menu(category)
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–¥–∞–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    
    async def handle_building_detail_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, building_id: str, page: int = 1):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            from building_data import get_building_info, format_currency, format_time
            
            building_info = get_building_info(building_id)
            
            if not building_info:
                await update.callback_query.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            building_name = building_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ")
            levels = building_info.get("levels", {})
            
            if not levels:
                await update.callback_query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–≤–Ω—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ–µ–º (–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π)
            is_hero = building_id in ['barbarian_king', 'archer_queen', 'grand_warden', 'royal_champion']
            levels_per_page = 10 if is_hero else 15
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏
            sorted_levels = sorted(levels.items())
            total_levels = len(sorted_levels)
            total_pages = (total_levels + levels_per_page - 1) // levels_per_page
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if page < 1:
                page = 1
            elif page > total_pages:
                page = total_pages
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = (page - 1) * levels_per_page
            end_idx = min(start_idx + levels_per_page, total_levels)
            
            message = f"üèóÔ∏è <b>{building_name}</b>\n"
            if is_hero:
                message += f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
            else:
                message += "\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i in range(start_idx, end_idx):
                level, data = sorted_levels[i]
                cost = format_currency(data["cost"], data["currency"])
                time_str = format_time(data["time"])
                th_level = data.get("th_level", "?")
                
                message += f"<b>–£—Ä–æ–≤–µ–Ω—å {level}:</b> {cost}, {time_str} (–¢–• {th_level})\n"
            
            if not is_hero:
                message += f"\nüí° <i>–í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: {total_levels}</i>"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            # –î–ª—è –≥–µ—Ä–æ–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            if is_hero and total_pages > 1:
                nav_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                if page > 1:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                          callback_data=f"{Keyboards.BUILDING_DETAIL_CALLBACK}:{building_id}:{page-1}"))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", 
                                                      callback_data="noop"))
                
                # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                if page < total_pages:
                    nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                          callback_data=f"{Keyboards.BUILDING_DETAIL_CALLBACK}:{building_id}:{page+1}"))
                
                keyboard.append(nav_buttons)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                if total_pages > 3:
                    quick_nav = []
                    if page > 2:
                        quick_nav.append(InlineKeyboardButton("‚èÆÔ∏è –í –Ω–∞—á–∞–ª–æ", 
                                                            callback_data=f"{Keyboards.BUILDING_DETAIL_CALLBACK}:{building_id}:1"))
                    if page < total_pages - 1:
                        quick_nav.append(InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü ‚è≠Ô∏è", 
                                                            callback_data=f"{Keyboards.BUILDING_DETAIL_CALLBACK}:{building_id}:{total_pages}"))
                    if quick_nav:
                        keyboard.append(quick_nav)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Ä–æ–≤–Ω—è—Ö
                info_text = f"üí° –í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: {total_levels}"
                if building_id == 'barbarian_king':
                    info_text += " (–º–∞–∫—Å. 80)"
                elif building_id == 'archer_queen':
                    info_text += " (–º–∞–∫—Å. 80)"
                elif building_id == 'grand_warden':
                    info_text += " (–º–∞–∫—Å. 55)"
                elif building_id == 'royal_champion':
                    info_text += " (–º–∞–∫—Å. 30)"
                
                message += f"\n\n{info_text}"
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                                                callback_data=Keyboards.BUILDING_COSTS_CALLBACK)])
            
            keyboard_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=keyboard_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏–∏: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏–∏.")
    
    async def handle_base_layouts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∞–∑"""
        try:
            message = (
                f"üè∞ <b>–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Ç—É—à–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—É—á—à–∏—Ö —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∞–∑:\n\n"
                f"üí° <i>–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑ "
                f"–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –¢–• —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏.</i>"
            )
            
            keyboard = Keyboards.base_layouts_menu()
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∞–∑: {e}")
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∞–∑."
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)
    
    async def handle_base_layouts_th_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, th_level: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¢–• –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫"""
        try:
            message = (
                f"üè∞ <b>–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑ - –¢–• {th_level}</b>\n\n"
                f"üöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
                f"–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
                f"‚Ä¢ üõ°Ô∏è –õ—É—á—à–∏–µ –∑–∞—â–∏—Ç–Ω—ã–µ –±–∞–∑—ã\n"
                f"‚Ä¢ ‚öîÔ∏è –§–∞—Ä–º –±–∞–∑—ã\n"
                f"‚Ä¢ üèÜ –¢—Ä–æ—Ñ–µ–π–Ω—ã–µ –±–∞–∑—ã\n"
                f"‚Ä¢ üî• –í–æ–µ–Ω–Ω—ã–µ –±–∞–∑—ã\n\n"
                f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¢–•", callback_data=Keyboards.BASE_LAYOUTS_CALLBACK)],
                [InlineKeyboardButton("üèõÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=Keyboards.COMMUNITY_CENTER_CALLBACK)]
            ])
            
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¢–• {th_level} —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫: {e}")
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫.")
    
    async def handle_achievements_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     player_tag: str, page: int = 1, sort_type: str = "progress"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            async with self.coc_client as client:
                player_data = await client.get_player_info(player_tag)
                
                if not player_data:
                    from translations import translation_manager
                    error_msg = translation_manager.get_text(update, 'player_not_found', "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await update.callback_query.edit_message_text(error_msg)
                    return
                
                player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                achievements = player_data.get('achievements', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ achievements –Ω–µ None
                if achievements is None:
                    achievements = []
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
                message, total_pages = self._format_achievements_page(update, player_name, achievements, page, sort_type)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = Keyboards.achievements_menu(player_tag, page, sort_type, total_pages)
                
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ {player_tag}: {e}")
            from translations import translation_manager
            error_msg = translation_manager.get_text(update, 'loading_error', "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
            try:
                await update.callback_query.edit_message_text(error_msg)
            except Exception as edit_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {edit_error}")
                # Fallback: try to send a new message if editing fails
                if update.effective_chat:
                    try:
                        await update.effective_chat.send_message(error_msg)
                    except Exception as send_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {send_error}")
    
    def _format_achievements_page(self, update: Update, player_name: str, achievements: List[Dict], 
                                page: int, sort_type: str) -> tuple:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ achievements –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if not achievements or not isinstance(achievements, list):
            achievements = []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        try:
            if sort_type == "progress":
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
                def safe_progress_key(x):
                    if not x or not isinstance(x, dict):
                        return 0
                    value = x.get('value', 0)
                    target = x.get('target', 1)
                    if not isinstance(value, (int, float)) or not isinstance(target, (int, float)):
                        return 0
                    return value / max(target, 1)
                
                achievements = sorted(achievements, key=safe_progress_key, reverse=True)
            elif sort_type == "profitability":
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–≥—Ä–∞–¥–∞ –≤ –≥–µ–º–∞—Ö)
                def safe_gems_key(x):
                    if not x or not isinstance(x, dict):
                        return 0
                    completion_info = x.get('completionInfo', {})
                    if not isinstance(completion_info, dict):
                        return 0
                    gems = completion_info.get('gems', 0)
                    return gems if isinstance(gems, (int, float)) else 0
                
                achievements = sorted(achievements, key=safe_gems_key, reverse=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        items_per_page = 5
        total_pages = max(1, (len(achievements) + items_per_page - 1) // items_per_page) if achievements else 1
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages
            
        start_idx = (page - 1) * items_per_page
        end_idx = start_idx + items_per_page
        page_achievements = achievements[start_idx:end_idx] if achievements else []
        
        sort_name = "–ø—Ä–æ–≥—Ä–µ—Å—Å—É" if sort_type == "progress" else "–ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"
        
        message = (
            f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - {player_name}</b>\n"
            f"üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ: {sort_name}\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"
        )
        
        if not achievements:
            message += "‚ùå –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
            return message, total_pages
        
        if not page_achievements:
            message += "‚ùå –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
            return message, total_pages
        
        for i, achievement in enumerate(page_achievements, 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ achievement –Ω–µ None –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
                if not achievement or not isinstance(achievement, dict):
                    continue
                    
                name = achievement.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                from translations import translation_manager
                translated_name = translation_manager.get_achievement_name(update, name)
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                description = translation_manager.get_achievement_description(update, name)
                
                value = achievement.get('value', 0)
                target = achievement.get('target', 0)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
                if not isinstance(value, (int, float)):
                    value = 0
                if not isinstance(target, (int, float)):
                    target = 0
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_percent = (value / max(target, 1)) * 100
                
                # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if value >= target:
                    status = "‚úÖ"
                    progress_bar = "üü©üü©üü©üü©üü©"
                else:
                    status = "‚è≥"
                    filled_blocks = int((progress_percent / 100) * 5)
                    progress_bar = "üü©" * filled_blocks + "‚¨ú" * (5 - filled_blocks)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ
                completion_info = achievement.get('completionInfo', {})
                if isinstance(completion_info, dict):
                    gems = completion_info.get('gems', 0)
                    xp = completion_info.get('experienceReward', 0)
                else:
                    gems = 0
                    xp = 0
                
                message += f"{status} <b>{translated_name}</b>\n"
                if description:
                    message += f"   ‚ÑπÔ∏è <i>{description}</i>\n"
                message += f"   üìä {progress_bar} {progress_percent:.1f}%\n"
                message += f"   üéØ {value:,}/{target:,}\n"
                
                if gems > 0 or xp > 0:
                    rewards = []
                    if gems > 0:
                        rewards.append(f"üíé {gems}")
                    if xp > 0:
                        rewards.append(f"‚≠ê {xp}")
                    message += f"   üéÅ {' | '.join(rewards)}\n"
                
                message += "\n"
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {i}: {e}")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                continue
        
        return message, total_pages
    
    async def handle_analyzer_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω"""
        try:
            chat_id = update.effective_chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            user = await self.db_service.find_user(chat_id)
            if not user or not user.player_tag:
                await update.message.reply_text(
                    "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä</b>\n\n"
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.",
                    parse_mode='HTML',
                    reply_markup=Keyboards.main_menu()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading_message = await update.message.reply_text(
                "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–π–Ω</b>\n\n"
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â—É—é –≤–æ–µ–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é...",
                parse_mode='HTML'
            )
            
            async with self.coc_client as client:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ –∏ –µ–≥–æ –∫–ª–∞–Ω–µ
                player_data = await client.get_player_info(user.player_tag)
                if not player_data or 'clan' not in player_data:
                    await loading_message.edit_text(
                        "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–π–Ω</b>\n\n"
                        "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–æ–≤.",
                        parse_mode='HTML'
                    )
                    return
                
                clan_tag = player_data['clan']['tag']
                clan_name = player_data['clan']['name']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–æ–π–Ω—ã
                war_analysis = await self._analyze_clan_wars(client, clan_tag, clan_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                message = self._format_analyzer_report(war_analysis, player_data)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", 
                                        callback_data="analyzer_refresh")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                        callback_data="main_menu")]
                ])
                
                await loading_message.edit_text(
                    message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            error_message = "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–π–Ω</b>\n\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if 'loading_message' in locals():
                await loading_message.edit_text(error_message, parse_mode='HTML')
            else:
                await update.message.reply_text(error_message, parse_mode='HTML')
    
    async def _analyze_clan_wars(self, client, clan_tag: str, clan_name: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –≤–æ–π–Ω –∫–ª–∞–Ω–∞"""
        analysis = {
            'clan_name': clan_name,
            'current_war': None,
            'cwl_war': None,
            'is_attack_day': False,
            'recommendations': []
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É
            current_war = await client.get_clan_current_war(clan_tag)
            if current_war and current_war.get('state') in ['inWar', 'preparation']:
                analysis['current_war'] = current_war
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–Ω—å –∞—Ç–∞–∫ –ª–∏ —Å–µ–π—á–∞—Å
                if current_war.get('state') == 'inWar':
                    analysis['is_attack_day'] = True
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞—Ç–∞–∫
                    analysis['recommendations'] = self._generate_attack_recommendations(current_war)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –õ–í–ö (League War)
            try:
                cwl_war = await client.get_current_cwl_war(clan_tag)
                if cwl_war and cwl_war.get('state') in ['inWar', 'preparation']:
                    analysis['cwl_war'] = cwl_war
                    
                    if cwl_war.get('state') == 'inWar':
                        analysis['is_attack_day'] = True
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –õ–í–ö
                        cwl_recommendations = self._generate_attack_recommendations(cwl_war, is_cwl=True)
                        analysis['recommendations'].extend(cwl_recommendations)
            except Exception as cwl_error:
                logger.debug(f"–õ–í–ö –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {cwl_error}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–π–Ω: {e}")
        
        return analysis
    
    def _generate_attack_recommendations(self, war_data: Dict, is_cwl: bool = False) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∞—Ç–∞–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è AI –ª–æ–≥–∏–∫–∞)"""
        recommendations = []
        
        try:
            clan_members = war_data.get('clan', {}).get('members', [])
            opponent_members = war_data.get('opponent', {}).get('members', [])
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è TH –∏ –∞—Ç–∞–∫
            for member in clan_members:
                member_name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                member_th = member.get('townhallLevel', 0)
                attacks_used = len(member.get('attacks', []))
                max_attacks = 2  # –í –æ–±—ã—á–Ω—ã—Ö –≤–æ–π–Ω–∞—Ö –ø–æ 2 –∞—Ç–∞–∫–∏
                
                if attacks_used < max_attacks:
                    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–µ–ª–∏
                    suitable_targets = []
                    for opponent in opponent_members:
                        opponent_name = opponent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        opponent_th = opponent.get('townhallLevel', 0)
                        opponent_pos = opponent.get('mapPosition', 0)
                        
                        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
                        if member_th >= opponent_th:  # –ú–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ä–∞–≤–Ω—ã—Ö –∏–ª–∏ —Å–ª–∞–±–µ–µ
                            difficulty = self._calculate_attack_difficulty(member_th, opponent_th)
                            success_chance = self._estimate_success_chance(member_th, opponent_th, member, opponent)
                            
                            suitable_targets.append({
                                'name': opponent_name,
                                'position': opponent_pos,
                                'th_level': opponent_th,
                                'difficulty': difficulty,
                                'success_chance': success_chance
                            })
                    
                    if suitable_targets:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞
                        suitable_targets.sort(key=lambda x: x['success_chance'], reverse=True)
                        best_target = suitable_targets[0]
                        
                        rec_type = "–õ–í–ö" if is_cwl else "–ö–í"
                        recommendations.append({
                            'attacker': member_name,
                            'attacker_th': member_th,
                            'target': best_target,
                            'war_type': rec_type,
                            'attacks_remaining': max_attacks - attacks_used
                        })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return recommendations[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def _calculate_attack_difficulty(self, attacker_th: int, defender_th: int) -> str:
        """–†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏"""
        diff = attacker_th - defender_th
        if diff >= 2:
            return "–õ–µ–≥–∫–∞—è"
        elif diff == 1:
            return "–£–º–µ—Ä–µ–Ω–Ω–∞—è"
        elif diff == 0:
            return "–°–ª–æ–∂–Ω–∞—è"
        else:
            return "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è"
    
    def _estimate_success_chance(self, attacker_th: int, defender_th: int, attacker: Dict, defender: Dict) -> int:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞ –∞—Ç–∞–∫–∏ (0-100%)"""
        base_chance = 60  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –≤ TH
        th_diff = attacker_th - defender_th
        base_chance += th_diff * 15
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Ç–∞–∫–∞—Ö)
        attacker_attacks = len(attacker.get('attacks', []))
        if attacker_attacks > 0:
            base_chance += 10  # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç –≤ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω–µ
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        return max(10, min(95, base_chance))
    
    def _format_analyzer_report(self, analysis: Dict, player_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        clan_name = analysis['clan_name']
        player_name = player_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        message = f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–π–Ω</b>\n\n"
        message += f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
        message += f"üõ°Ô∏è –ö–ª–∞–Ω: {clan_name}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–π–Ω
        has_active_war = analysis['current_war'] or analysis['cwl_war']
        
        if not has_active_war:
            message += "üò¥ <b>–°—Ç–∞—Ç—É—Å:</b> –ú–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
            message += "üìã –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à –∫–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–∞—Ö.\n"
            message += "üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ö–í –∏–ª–∏ –õ–í–ö."
            return message
        
        if analysis['is_attack_day']:
            message += "‚öîÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> –î–µ–Ω—å –∞—Ç–∞–∫! üî•\n\n"
        else:
            message += "üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –î–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –≤–æ–π–Ω–∞—Ö
        if analysis['current_war']:
            war = analysis['current_war']
            state = "–ò–¥–µ—Ç –≤–æ–π–Ω–∞" if war.get('state') == 'inWar' else "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
            message += f"‚öîÔ∏è <b>–ö–ª–∞–Ω–æ–≤–∞—è –≤–æ–π–Ω–∞:</b> {state}\n"
            
            clan_stars = war.get('clan', {}).get('stars', 0)
            opponent_stars = war.get('opponent', {}).get('stars', 0)
            message += f"‚≠ê –°—á–µ—Ç: {clan_stars} - {opponent_stars}\n\n"
        
        if analysis['cwl_war']:
            message += f"üèÜ <b>–õ–í–ö:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ç–∞–∫–∞–º
        if analysis['recommendations'] and analysis['is_attack_day']:
            message += "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ç–∞–∫–∞–º:</b>\n\n"
            
            for i, rec in enumerate(analysis['recommendations'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                target = rec['target']
                message += f"{i}. <b>{rec['attacker']}</b> (–¢–•{rec['attacker_th']})\n"
                message += f"   üéØ –¶–µ–ª—å: {target['name']} (#{target['position']}, –¢–•{target['th_level']})\n"
                message += f"   üìä –£—Å–ø–µ—Ö: {target['success_chance']}% | {target['difficulty']}\n"
                message += f"   ‚öîÔ∏è –ê—Ç–∞–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {rec['attacks_remaining']}\n\n"
            
            if len(analysis['recommendations']) > 3:
                message += f"... –∏ –µ—â–µ {len(analysis['recommendations']) - 3} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n\n"
        
        elif analysis['is_attack_day']:
            message += "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            message += "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–∏ –∞—Ç–∞–∫–∏ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ü–µ–ª–µ–π."
        
        message += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –¢–• –∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç–∞–∫–∞—Ö</i>"
        
        return message