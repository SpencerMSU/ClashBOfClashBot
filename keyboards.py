"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞ - –∞–Ω–∞–ª–æ–≥ Java Keyboards
"""
from typing import List, Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, date


class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    PROFILE_BTN = "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
    CLAN_BTN = "üõ° –ö–ª–∞–Ω"
    LINK_ACC_BTN = "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    SEARCH_PROFILE_BTN = "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–≥—É"
    MY_CLAN_BTN = "üõ° –ú–æ–π –∫–ª–∞–Ω (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)"
    SEARCH_CLAN_BTN = "üîç –ù–∞–π—Ç–∏ –∫–ª–∞–Ω –ø–æ —Ç–µ–≥—É"
    BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    MY_PROFILE_PREFIX = "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    CLAN_MEMBERS_BTN = "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    CLAN_WARLOG_BTN = "‚öîÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–π–Ω—ã"
    BACK_TO_CLAN_MENU_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∫–ª–∞–Ω–æ–≤"
    CLAN_CURRENT_CWL_BTN = "‚öîÔ∏è –¢–µ–∫—É—â–µ–µ –õ–í–ö"
    CLAN_CWL_BONUS_BTN = "üèÜ –ë–æ–Ω—É—Å—ã –õ–í–ö"
    NOTIFICATIONS_BTN = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ö–í"
    CLAN_CURRENT_WAR_BTN = "‚öîÔ∏è –¢–µ–∫—É—â–∞—è –ö–í"
    SUBSCRIPTION_BTN = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
    MEMBERS_CALLBACK = "members"
    WAR_LIST_CALLBACK = "warlist"
    WAR_INFO_CALLBACK = "warinfo"
    PROFILE_CALLBACK = "profile"
    NOTIFY_TOGGLE_CALLBACK = "notify_toggle"
    CWL_BONUS_CALLBACK = "cwlbonus"
    MEMBERS_SORT_CALLBACK = "members_sort"
    MEMBERS_VIEW_CALLBACK = "members_view"
    SUBSCRIPTION_CALLBACK = "subscription"
    SUBSCRIPTION_PERIOD_CALLBACK = "sub_period"
    SUBSCRIPTION_PAY_CALLBACK = "sub_pay"
    
    @staticmethod
    def main_menu() -> ReplyKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [KeyboardButton(Keyboards.PROFILE_BTN), KeyboardButton(Keyboards.CLAN_BTN)],
            [KeyboardButton(Keyboards.NOTIFICATIONS_BTN)]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def profile_menu(player_name: Optional[str] = None) -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = []
        
        if player_name:
            keyboard.append([KeyboardButton(f"{Keyboards.MY_PROFILE_PREFIX} ({player_name})")])
        else:
            keyboard.append([KeyboardButton(Keyboards.LINK_ACC_BTN)])
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        keyboard.append([KeyboardButton(Keyboards.SUBSCRIPTION_BTN)])
        
        keyboard.extend([
            [KeyboardButton(Keyboards.SEARCH_PROFILE_BTN)],
            [KeyboardButton(Keyboards.MY_CLAN_BTN)] if player_name else [],
            [KeyboardButton(Keyboards.BACK_BTN)]
        ])
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        keyboard = [row for row in keyboard if row]
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def clan_menu() -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é –∫–ª–∞–Ω–∞"""
        keyboard = [
            [KeyboardButton(Keyboards.SEARCH_CLAN_BTN)],
            [KeyboardButton(Keyboards.BACK_BTN)]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def clan_inspection_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∞–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=Keyboards.MEMBERS_CALLBACK)],
            [InlineKeyboardButton("‚öîÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω", callback_data=Keyboards.WAR_LIST_CALLBACK)],
            [InlineKeyboardButton("‚öîÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞", callback_data="current_war")],
            [InlineKeyboardButton("üèÜ –õ–í–ö", callback_data="cwl_info")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def members_pagination(clan_tag: str, current_page: int, total_pages: int, 
                          sort_type: str = "role", view_type: str = "compact") -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        keyboard = []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤–∏–¥
        sort_buttons = [
            InlineKeyboardButton("üéñ –ü–æ —Ä–æ–ª–∏", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:role:{view_type}:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ —Ç—Ä–æ—Ñ–µ—è–º", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:trophies:{view_type}:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        view_buttons = [
            InlineKeyboardButton("üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:compact:{current_page}"),
            InlineKeyboardButton("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:detailed:{current_page}")
        ]
        keyboard.append(view_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def war_list_pagination(clan_tag: str, current_page: int, total_pages: int,
                           sort_order: str = "recent") -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        keyboard = []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_buttons = [
            InlineKeyboardButton("üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ–±–µ–¥—ã", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:wins:{current_page}"),
            InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:losses:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def war_details_menu(clan_tag: str, war_end_time: str) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫", 
                                callback_data=f"war_attacks:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("üö´ –ù–∞—Ä—É—à–µ–Ω–∏—è", 
                                callback_data=f"war_violations:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–π–Ω", 
                                callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:1")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def notification_toggle() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                                callback_data=Keyboards.NOTIFY_TOGGLE_CALLBACK)]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def cwl_bonus_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        keyboard = []
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
        current_date = date.today()
        for i in range(3):
            month_date = date(current_date.year, current_date.month - i, 1) if current_date.month - i > 0 else date(current_date.year - 1, 12 + current_date.month - i, 1)
            month_str = month_date.strftime("%Y-%m")
            month_name = month_date.strftime("%B %Y")
            
            keyboard.append([
                InlineKeyboardButton(f"üèÜ {month_name}", 
                                   callback_data=f"{Keyboards.CWL_BONUS_CALLBACK}:{month_str}")
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_periods() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üíé 1 –º–µ—Å—è—Ü - 299‚ÇΩ", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:1month")],
            [InlineKeyboardButton("üíé 3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:3months")],
            [InlineKeyboardButton("üíé 6 –º–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:6months")],
            [InlineKeyboardButton("üíé 1 –≥–æ–¥ - 2799‚ÇΩ", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:1year")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_payment(payment_url: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_status() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        keyboard = [
            [InlineKeyboardButton("üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º", 
                                callback_data=Keyboards.SUBSCRIPTION_CALLBACK)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
class WarSort:
    """–¢–∏–ø—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–π–Ω"""
    RECENT = "recent"
    WINS = "wins"
    LOSSES = "losses"
    CWL_ONLY = "cwl_only"


class MemberSort:
    """–¢–∏–ø—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    ROLE = "role"
    TROPHIES = "trophies"
    DONATIONS = "donations"
    NAME = "name"


class MemberView:
    """–¢–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    COMPACT = "compact"
    DETAILED = "detailed"