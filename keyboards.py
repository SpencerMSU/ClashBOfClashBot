"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞ - –∞–Ω–∞–ª–æ–≥ Java Keyboards
"""
from typing import List, Optional, Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, date


class Keyboards:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    PROFILE_BTN = "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
    CLAN_BTN = "üõ° –ö–ª–∞–Ω"
    LINK_ACC_BTN = "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
    SEARCH_PROFILE_BTN = "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–≥—É"
    MY_CLAN_BTN = "üõ° –ú–æ–π –∫–ª–∞–Ω (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)"
    SEARCH_CLAN_BTN = "üîç –ù–∞–π—Ç–∏ –∫–ª–∞–Ω –ø–æ —Ç–µ–≥—É"
    BACK_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    MY_PROFILE_PREFIX = "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    PROFILE_MANAGER_BTN = "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"
    CLAN_MEMBERS_BTN = "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    CLAN_WARLOG_BTN = "‚öîÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–π–Ω—ã"
    BACK_TO_CLAN_MENU_BTN = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∫–ª–∞–Ω–æ–≤"
    CLAN_CURRENT_CWL_BTN = "‚öîÔ∏è –¢–µ–∫—É—â–µ–µ –õ–í–ö"
    CLAN_CWL_BONUS_BTN = "üèÜ –ë–æ–Ω—É—Å—ã –õ–í–ö"
    NOTIFICATIONS_BTN = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    CLAN_CURRENT_WAR_BTN = "‚öîÔ∏è –¢–µ–∫—É—â–∞—è –ö–í"
    SUBSCRIPTION_BTN = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
    LINKED_CLANS_BTN = "üîó –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω—ã"
    COMMUNITY_CENTER_BTN = "üèõÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    ACHIEVEMENTS_BTN = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
    MEMBERS_CALLBACK = "members"
    WAR_LIST_CALLBACK = "warlist"
    WAR_INFO_CALLBACK = "warinfo"
    PROFILE_CALLBACK = "profile"
    NOTIFY_TOGGLE_CALLBACK = "notify_toggle"
    CWL_BONUS_CALLBACK = "cwlbonus"
    MEMBERS_SORT_CALLBACK = "members_sort"
    MEMBERS_VIEW_CALLBACK = "members_view"
    SUBSCRIPTION_CALLBACK = "subscription"
    SUBSCRIPTION_EXTEND_CALLBACK = "subscription_extend"
    SUBSCRIPTION_TYPE_CALLBACK = "sub_type"
    SUBSCRIPTION_PERIOD_CALLBACK = "sub_period"
    SUBSCRIPTION_PAY_CALLBACK = "sub_pay"
    PREMIUM_MENU_CALLBACK = "premium_menu"
    NOTIFY_ADVANCED_CALLBACK = "notify_advanced"
    NOTIFY_CUSTOM_CALLBACK = "notify_custom"
    BUILDING_TRACKER_CALLBACK = "building_tracker"
    BUILDING_TOGGLE_CALLBACK = "building_toggle"
    PROFILE_MANAGER_CALLBACK = "profile_manager"
    PROFILE_SELECT_CALLBACK = "profile_select"
    PROFILE_DELETE_CALLBACK = "profile_delete"
    PROFILE_DELETE_CONFIRM_CALLBACK = "profile_delete_confirm"
    PROFILE_ADD_CALLBACK = "profile_add"
    LINKED_CLANS_CALLBACK = "linked_clans"
    LINKED_CLAN_SELECT_CALLBACK = "linked_clan_select"
    LINKED_CLAN_ADD_CALLBACK = "linked_clan_add"
    LINKED_CLAN_DELETE_CALLBACK = "linked_clan_delete"
    COMMUNITY_CENTER_CALLBACK = "community_center"
    BUILDING_COSTS_CALLBACK = "building_costs"
    BUILDING_CATEGORY_CALLBACK = "building_category"
    BUILDING_DETAIL_CALLBACK = "building_detail"
    BASE_LAYOUTS_CALLBACK = "base_layouts"
    BASE_LAYOUTS_TH_CALLBACK = "base_layouts_th"
    ACHIEVEMENTS_CALLBACK = "achievements"
    ACHIEVEMENTS_SORT_CALLBACK = "achievements_sort"
    ACHIEVEMENTS_PAGE_CALLBACK = "achievements_page"
    
    @staticmethod
    def main_menu() -> ReplyKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [KeyboardButton(Keyboards.PROFILE_BTN), KeyboardButton(Keyboards.CLAN_BTN)],
            [KeyboardButton(Keyboards.NOTIFICATIONS_BTN), KeyboardButton(Keyboards.COMMUNITY_CENTER_BTN)]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def profile_menu(player_name: Optional[str] = None, has_premium: bool = False, 
                    profile_count: int = 0) -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = []
        
        if has_premium and profile_count > 0:
            # –î–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
            keyboard.append([KeyboardButton(Keyboards.PROFILE_MANAGER_BTN)])
        elif player_name:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–º–∏—É–º —Å –æ–¥–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
            keyboard.append([KeyboardButton(f"{Keyboards.MY_PROFILE_PREFIX} ({player_name})")])
        else:
            keyboard.append([KeyboardButton(Keyboards.LINK_ACC_BTN)])
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        keyboard.append([KeyboardButton(Keyboards.SUBSCRIPTION_BTN)])
        
        keyboard.extend([
            [KeyboardButton(Keyboards.SEARCH_PROFILE_BTN)],
            [KeyboardButton(Keyboards.MY_CLAN_BTN)] if (player_name or (has_premium and profile_count > 0)) else [],
            [KeyboardButton(Keyboards.BACK_BTN)]
        ])
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        keyboard = [row for row in keyboard if row]
        
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def clan_menu() -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é –∫–ª–∞–Ω–∞"""
        keyboard = [
            [KeyboardButton(Keyboards.SEARCH_CLAN_BTN)],
            [KeyboardButton(Keyboards.LINKED_CLANS_BTN)],
            [KeyboardButton(Keyboards.BACK_BTN)]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    @staticmethod
    def clan_inspection_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∞–Ω–∞"""
        keyboard = [
            [InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=Keyboards.MEMBERS_CALLBACK)],
            [InlineKeyboardButton("‚öîÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω", callback_data=Keyboards.WAR_LIST_CALLBACK)],
            [InlineKeyboardButton("‚öîÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞", callback_data="current_war")],
            [InlineKeyboardButton("üèÜ –õ–í–ö", callback_data="cwl_info")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def members_pagination(clan_tag: str, current_page: int, total_pages: int, 
                          sort_type: str = "role", view_type: str = "compact") -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        keyboard = []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤–∏–¥
        sort_buttons = [
            InlineKeyboardButton("üéñ –ü–æ —Ä–æ–ª–∏", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:role:{view_type}:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ —Ç—Ä–æ—Ñ–µ—è–º", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:trophies:{view_type}:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        view_buttons = [
            InlineKeyboardButton("üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:compact:{current_page}"),
            InlineKeyboardButton("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:detailed:{current_page}")
        ]
        keyboard.append(view_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def members_with_profiles(clan_tag: str, current_page: int, total_pages: int, 
                             sort_type: str = "role", view_type: str = "compact", 
                             members: List[Dict] = None) -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        if members:
            for i in range(0, len(members), 2):
                row = []
                for j in range(2):
                    if i + j < len(members):
                        member = members[i + j]
                        name = member.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        tag = member.get('tag', '')
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                        display_name = name[:15] + "..." if len(name) > 15 else name
                        row.append(InlineKeyboardButton(f"üë§ {display_name}", 
                                                       callback_data=f"{Keyboards.PROFILE_CALLBACK}:{tag}"))
                keyboard.append(row)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤–∏–¥
        sort_buttons = [
            InlineKeyboardButton("üéñ –ü–æ —Ä–æ–ª–∏", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:role:{view_type}:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ —Ç—Ä–æ—Ñ–µ—è–º", 
                               callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:trophies:{view_type}:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        view_buttons = [
            InlineKeyboardButton("üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:compact:{current_page}"),
            InlineKeyboardButton("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ", 
                               callback_data=f"{Keyboards.MEMBERS_VIEW_CALLBACK}:{clan_tag}:{sort_type}:detailed:{current_page}")
        ]
        keyboard.append(view_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.MEMBERS_SORT_CALLBACK}:{clan_tag}:{sort_type}:{view_type}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        # Add back button
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ", callback_data="clan_info")])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def war_list_pagination(clan_tag: str, current_page: int, total_pages: int,
                           sort_order: str = "recent") -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        keyboard = []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_buttons = [
            InlineKeyboardButton("üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ–±–µ–¥—ã", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:wins:{current_page}"),
            InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:losses:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def war_list_with_details(clan_tag: str, current_page: int, total_pages: int,
                             sort_order: str = "recent", wars: List[Dict] = None) -> InlineKeyboardMarkup:
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–æ–π–Ω
        if wars:
            for war in wars:
                opponent_name = war.get('opponent_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                result = war.get('result', 'tie')
                result_emoji = {"win": "üèÜ", "lose": "‚ùå", "tie": "ü§ù"}.get(result, "‚ùì")
                is_cwl = war.get('is_cwl_war', False)
                war_type = "–õ–í–ö" if is_cwl else "–ö–í"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                display_name = opponent_name[:20] + "..." if len(opponent_name) > 20 else opponent_name
                war_end_time = war.get('end_time', '')
                
                keyboard.append([
                    InlineKeyboardButton(f"{result_emoji} {war_type} vs {display_name}", 
                                       callback_data=f"{Keyboards.WAR_INFO_CALLBACK}:{clan_tag}:{war_end_time}")
                ])
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_buttons = [
            InlineKeyboardButton("üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:{current_page}"),
            InlineKeyboardButton("üèÜ –ü–æ–±–µ–¥—ã", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:wins:{current_page}"),
            InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è", 
                               callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:losses:{current_page}")
        ]
        keyboard.append(sort_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="noop"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:{sort_order}:{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def war_details_menu(clan_tag: str, war_end_time: str) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç–∞–∫", 
                                callback_data=f"war_attacks:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("üö´ –ù–∞—Ä—É—à–µ–Ω–∏—è", 
                                callback_data=f"war_violations:{clan_tag}:{war_end_time}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –≤–æ–π–Ω", 
                                callback_data=f"{Keyboards.WAR_LIST_CALLBACK}:{clan_tag}:recent:1")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def notification_toggle() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                                callback_data=Keyboards.NOTIFY_TOGGLE_CALLBACK)]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def cwl_bonus_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        keyboard = []
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
        current_date = date.today()
        for i in range(3):
            month_date = date(current_date.year, current_date.month - i, 1) if current_date.month - i > 0 else date(current_date.year - 1, 12 + current_date.month - i, 1)
            month_str = month_date.strftime("%Y-%m")
            month_name = month_date.strftime("%B %Y")
            
            keyboard.append([
                InlineKeyboardButton(f"üèÜ {month_name}", 
                                   callback_data=f"{Keyboards.CWL_BONUS_CALLBACK}:{month_str}")
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def back_to_main() -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_types() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_TYPE_CALLBACK}:premium")],
            [InlineKeyboardButton("üëë –ü–†–û –ü–õ–Æ–°", 
                                callback_data=f"{Keyboards.SUBSCRIPTION_TYPE_CALLBACK}:proplus")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_periods(subscription_type: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if subscription_type == "premium":
            keyboard = [
                [InlineKeyboardButton("üíé 1 –º–µ—Å—è—Ü", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:premium_1month"),
                 InlineKeyboardButton("49‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:premium_1month")],
                [InlineKeyboardButton("üíé 3 –º–µ—Å—è—Ü–∞", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:premium_3months"),
                 InlineKeyboardButton("119‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:premium_3months")],
                [InlineKeyboardButton("üíé 6 –º–µ—Å—è—Ü–µ–≤", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:premium_6months"),
                 InlineKeyboardButton("199‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:premium_6months")],
                [InlineKeyboardButton("üíé 1 –≥–æ–¥", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:premium_1year"),
                 InlineKeyboardButton("349‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:premium_1year")]
            ]
        else:  # proplus
            keyboard = [
                [InlineKeyboardButton("üëë 1 –º–µ—Å—è—Ü", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:proplus_1month"),
                 InlineKeyboardButton("99‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:proplus_1month")],
                [InlineKeyboardButton("üëë 3 –º–µ—Å—è—Ü–∞", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:proplus_3months"),
                 InlineKeyboardButton("249‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:proplus_3months")],
                [InlineKeyboardButton("üëë 6 –º–µ—Å—è—Ü–µ–≤", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:proplus_6months"),
                 InlineKeyboardButton("449‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:proplus_6months")],
                [InlineKeyboardButton("üëë 1 –≥–æ–¥", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PERIOD_CALLBACK}:proplus_1year"),
                 InlineKeyboardButton("799‚ÇΩ", 
                                    callback_data=f"{Keyboards.SUBSCRIPTION_PAY_CALLBACK}:proplus_1year")]
            ]
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", 
                                            callback_data=f"{Keyboards.SUBSCRIPTION_CALLBACK}")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_payment(payment_url: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def subscription_status(has_subscription: bool = False) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        keyboard = []
        if has_subscription:
            keyboard.append([InlineKeyboardButton("üíé –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                                callback_data=Keyboards.SUBSCRIPTION_EXTEND_CALLBACK)])
            keyboard.append([InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                                                callback_data=Keyboards.PREMIUM_MENU_CALLBACK)])
        else:
            keyboard.append([InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                                callback_data=Keyboards.SUBSCRIPTION_CALLBACK)])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def premium_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", 
                                callback_data=Keyboards.NOTIFY_ADVANCED_CALLBACK)],
            [InlineKeyboardButton("üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π", 
                                callback_data=Keyboards.BUILDING_TRACKER_CALLBACK)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def building_tracker_menu(is_active: bool = False) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π"""
        keyboard = []
        
        if is_active:
            keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", 
                                                callback_data=Keyboards.BUILDING_TOGGLE_CALLBACK)])
            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ", callback_data="noop")])
        else:
            keyboard.append([InlineKeyboardButton("üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", 
                                                callback_data=Keyboards.BUILDING_TOGGLE_CALLBACK)])
            keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–Ω–æ", callback_data="noop")])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é", 
                                            callback_data=Keyboards.PREMIUM_MENU_CALLBACK)])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def notification_menu(is_premium: bool = False) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í", 
                                callback_data=Keyboards.NOTIFY_TOGGLE_CALLBACK)]
        ]
        
        if is_premium:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", 
                                                callback_data=Keyboards.NOTIFY_ADVANCED_CALLBACK)])
            keyboard.append([InlineKeyboardButton("üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π", 
                                                callback_data=Keyboards.BUILDING_TRACKER_CALLBACK)])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def notification_advanced_menu() -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        keyboard = [
            [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 1 (–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")],
            [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 2 (–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")],
            [KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 3 (–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")],
            [KeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    def profile_manager_menu(profiles: List[Dict[str, Any]], max_profiles: int) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        for i, profile in enumerate(profiles):
            profile_name = profile.get('profile_name') or f"–ü—Ä–æ—Ñ–∏–ª—å {i+1}"
            player_name = profile.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text = f"üë§ {profile_name} ({player_name})"
            if profile.get('is_primary'):
                text = f"‚≠ê {text}"
            
            keyboard.append([InlineKeyboardButton(text, 
                                                callback_data=f"{Keyboards.PROFILE_SELECT_CALLBACK}:{profile['player_tag']}")])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç)
        if len(profiles) < max_profiles:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
                                                callback_data=Keyboards.PROFILE_ADD_CALLBACK)])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏)
        if profiles:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
                                                callback_data=Keyboards.PROFILE_DELETE_CALLBACK)])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è", callback_data="profile_menu")])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def profile_delete_menu(profiles: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        keyboard = []
        
        for i, profile in enumerate(profiles):
            profile_name = profile.get('profile_name') or f"–ü—Ä–æ—Ñ–∏–ª—å {i+1}"
            player_name = profile.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text = f"üóëÔ∏è {profile_name} ({player_name})"
            
            keyboard.append([InlineKeyboardButton(text, 
                                                callback_data=f"{Keyboards.PROFILE_DELETE_CONFIRM_CALLBACK}:{profile['player_tag']}")])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=Keyboards.PROFILE_MANAGER_CALLBACK)])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod 
    def get_subscription_max_profiles(subscription_type: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if subscription_type.startswith("premium"):
            return 3
        elif subscription_type.startswith("proplus") or subscription_type.startswith("pro"):
            return 5
        return 1  # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–ª—å–∫–æ 1 –ø—Ä–æ—Ñ–∏–ª—å

    @staticmethod
    def linked_clans_menu(linked_clans: List[Dict[str, Any]], max_clans: int) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞
        for clan in linked_clans:
            clan_name = clan.get('clan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞–Ω')
            slot_number = clan.get('slot_number', 1)
            keyboard.append([
                InlineKeyboardButton(
                    f"üõ° {clan_name}", 
                    callback_data=f"{Keyboards.LINKED_CLAN_SELECT_CALLBACK}:{clan['clan_tag']}"
                ),
                InlineKeyboardButton(
                    f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"{Keyboards.LINKED_CLAN_DELETE_CALLBACK}:{slot_number}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤—ã—Ö –∫–ª–∞–Ω–æ–≤
        current_count = len(linked_clans)
        for slot in range(current_count + 1, max_clans + 1):
            keyboard.append([
                InlineKeyboardButton(
                    f"‚ûï –°–ª–æ—Ç {slot} (–ø—É—Å—Ç–æ–π)", 
                    callback_data=f"{Keyboards.LINKED_CLAN_ADD_CALLBACK}:{slot}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(keyboard)


        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def community_center_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Ü–µ–Ω—Ç—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        keyboard = [
            [InlineKeyboardButton("üèóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–µ–Ω–∏–π", 
                                callback_data=Keyboards.BUILDING_COSTS_CALLBACK)],
            [InlineKeyboardButton("üè∞ –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑", 
                                callback_data=Keyboards.BASE_LAYOUTS_CALLBACK)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def building_costs_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–¥–∞–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üè∞ –û–±–æ—Ä–æ–Ω–∞", callback_data=f"{Keyboards.BUILDING_CATEGORY_CALLBACK}:defense")],
            [InlineKeyboardButton("‚öîÔ∏è –ê—Ä–º–∏—è", callback_data=f"{Keyboards.BUILDING_CATEGORY_CALLBACK}:army")],
            [InlineKeyboardButton("üíé –†–µ—Å—É—Ä—Å—ã", callback_data=f"{Keyboards.BUILDING_CATEGORY_CALLBACK}:resources")],
            [InlineKeyboardButton("üëë –ì–µ—Ä–æ–∏", callback_data=f"{Keyboards.BUILDING_CATEGORY_CALLBACK}:heroes")],
            [InlineKeyboardButton("üî® –î–µ—Ä–µ–≤–Ω—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è", callback_data=f"{Keyboards.BUILDING_CATEGORY_CALLBACK}:builder")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=Keyboards.COMMUNITY_CENTER_CALLBACK)]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def building_category_menu(category: str) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        keyboard = []
        
        if category == "defense":
            buildings = [
                ("üèπ –ë–∞—à–Ω—è –ª—É—á–Ω–∏—Ü", "archer_tower"),
                ("üí£ –ü—É—à–∫–∞", "cannon"),
                ("üè∞ –ú–æ—Ä—Ç–∏—Ä–∞", "mortar"),
                ("‚úàÔ∏è –í–æ–∑–¥—É—à–Ω–∞—è –∑–∞—â–∏—Ç–∞", "air_defense"),
                ("üßô –ë–∞—à–Ω—è –º–∞–≥–æ–≤", "wizard_tower"),
                ("üí® –í–æ–∑–¥—É—à–Ω–∞—è –º–µ—Ç–ª–∞", "air_sweeper"),
                ("‚ö° –°–∫—Ä—ã—Ç–∞—è —Ç–µ—Å–ª–∞", "hidden_tesla"),
                ("üí• –ë–∞—à–Ω—è-–±–æ–º–±–∞", "bomb_tower"),
                ("üèπ –ê–¥—Å–∫–∏–π –ª—É–∫", "x_bow"),
                ("üî• –ë–∞—à–Ω—è –∞–¥–∞", "inferno_tower"),
                ("ü¶Ö –û—Ä–ª–∏–Ω–∞—è –∞—Ä—Ç–∏–ª–ª–µ—Ä–∏—è", "eagle_artillery"),
                ("üí´ –†–∞–∑–±—Ä–æ—Å", "scattershot"),
                ("üß± –°—Ç–µ–Ω—ã", "walls")
            ]
        elif category == "army":
            buildings = [
                ("üè∫ –ö–∞–∑–∞—Ä–º–∞", "army_camp"),
                ("‚öîÔ∏è –£—á–µ–±–Ω—ã–µ –∫–∞–∑–∞—Ä–º—ã", "barracks"),
                ("üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "laboratory"),
                ("ü™Ñ –§–∞–±—Ä–∏–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π", "spell_factory"),
                ("üè∞ –ó–∞–º–æ–∫ –∫–ª–∞–Ω–∞", "clan_castle"),
                ("üè∫ –¢—ë–º–Ω—ã–µ –∫–∞–∑–∞—Ä–º—ã", "dark_barracks"),
                ("üåü –§–∞–±—Ä–∏–∫–∞ —Ç—ë–º–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π", "dark_spell_factory")
            ]
        elif category == "resources":
            buildings = [
                ("ü•á –ó–æ–ª–æ—Ç–∞—è —à–∞—Ö—Ç–∞", "gold_mine"),
                ("üíú –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å —ç–ª–∏–∫—Å–∏—Ä–∞", "elixir_collector"),
                ("‚ö´ –ë—É—Ä —Ç—ë–º–Ω–æ–≥–æ —ç–ª–∏–∫—Å–∏—Ä–∞", "dark_elixir_drill"),
                ("üèõÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–æ–ª–æ—Ç–∞", "gold_storage"),
                ("üèõÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ —ç–ª–∏–∫—Å–∏—Ä–∞", "elixir_storage"),
                ("üèõÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—ë–º–Ω–æ–≥–æ —ç–ª–∏–∫—Å–∏—Ä–∞", "dark_elixir_storage")
            ]
        elif category == "heroes":
            buildings = [
                ("üëë –ö–æ—Ä–æ–ª—å –≤–∞—Ä–≤–∞—Ä–æ–≤", "barbarian_king"),
                ("üë∏ –ö–æ—Ä–æ–ª–µ–≤–∞ –ª—É—á–Ω–∏—Ü", "archer_queen"),
                ("üßô‚Äç‚ôÇÔ∏è –í–µ–ª–∏–∫–∏–π —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å", "grand_warden"),
                ("‚öîÔ∏è –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —á–µ–º–ø–∏–æ–Ω", "royal_champion")
            ]
        elif category == "builder":
            buildings = [
                ("üèóÔ∏è –ó–∞–ª —Å—Ç—Ä–æ–∏—Ç–µ–ª—è", "builder_hall"),
                ("‚öîÔ∏è –ö–∞–∑–∞—Ä–º—ã –ë–î", "builder_barracks"),
                ("üèπ –ë–∞—à–Ω—è –ª—É—á–Ω–∏—Ü –ë–î", "builder_archer_tower"),
                ("üí£ –ü—É—à–∫–∞ –ë–î", "builder_cannon"),
                ("üî• –ü–µ—á—å –ë–î", "builder_firecrackers"),
                ("‚ö° –¢–µ—Å–ª–∞ –ë–î", "builder_tesla"),
                ("üí£ –ì–∏–≥–∞–Ω—Ç—Å–∫–∞—è –ø—É—à–∫–∞ –ë–î", "giant_cannon"),
                ("üèπ –ú–µ–≥–∞ —Ç–µ—Å–ª–∞ –ë–î", "mega_tesla")
            ]
        else:
            buildings = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–¥–∞–Ω–∏—è (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(buildings), 2):
            row = []
            for j in range(2):
                if i + j < len(buildings):
                    name, building_id = buildings[i + j]
                    row.append(InlineKeyboardButton(name, 
                                                  callback_data=f"{Keyboards.BUILDING_DETAIL_CALLBACK}:{building_id}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data=Keyboards.BUILDING_COSTS_CALLBACK)])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def base_layouts_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¢–• –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –±–∞–∑"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¢–• –æ—Ç 1 –¥–æ 16 (–ø–æ 4 –≤ —Ä—è–¥)
        for i in range(1, 17, 4):
            row = []
            for j in range(4):
                if i + j <= 16:
                    th_level = i + j
                    row.append(InlineKeyboardButton(f"–¢–• {th_level}", 
                                                  callback_data=f"{Keyboards.BASE_LAYOUTS_TH_CALLBACK}:{th_level}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞", callback_data=Keyboards.COMMUNITY_CENTER_CALLBACK)])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def achievements_menu(player_tag: str, page: int = 1, sort_type: str = "progress", total_pages: int = 1) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sort_buttons = []
        if sort_type != "progress":
            sort_buttons.append(InlineKeyboardButton("üìà –ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", 
                                                   callback_data=f"{Keyboards.ACHIEVEMENTS_SORT_CALLBACK}:{player_tag}:progress:1"))
        if sort_type != "profitability":
            sort_buttons.append(InlineKeyboardButton("üí∞ –ü–æ –ø—Ä–∏–±—ã–ª–∏", 
                                                   callback_data=f"{Keyboards.ACHIEVEMENTS_SORT_CALLBACK}:{player_tag}:profitability:1"))
        
        if sort_buttons:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
            for i in range(0, len(sort_buttons), 2):
                row = sort_buttons[i:i+2]
                keyboard.append(row)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", 
                                                   callback_data=f"{Keyboards.ACHIEVEMENTS_PAGE_CALLBACK}:{player_tag}:{sort_type}:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", 
                                                   callback_data=f"{Keyboards.ACHIEVEMENTS_PAGE_CALLBACK}:{player_tag}:{sort_type}:{page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", 
                                            callback_data=f"{Keyboards.PROFILE_CALLBACK}:{player_tag}")])
        
        return InlineKeyboardMarkup(keyboard)


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
class WarSort:
    """–¢–∏–ø—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–π–Ω"""
    RECENT = "recent"
    WINS = "wins"
    LOSSES = "losses"
    CWL_ONLY = "cwl_only"


class MemberSort:
    """–¢–∏–ø—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    ROLE = "role"
    TROPHIES = "trophies"
    DONATIONS = "donations"
    NAME = "name"


class MemberView:
    """–¢–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    COMPACT = "compact"
    DETAILED = "detailed"