package utils

// TranslationManager manages translations for the bot - exact copy from Python translations.py
type TranslationManager struct {
	supportedLanguages []string
	defaultLanguage    string
	translations       map[string]map[string]string
}

// NewTranslationManager creates a new translation manager
func NewTranslationManager() *TranslationManager {
	tm := &TranslationManager{
		supportedLanguages: []string{"ru", "en"},
		defaultLanguage:    "ru",
		translations:       make(map[string]map[string]string),
	}
	
	tm.initTranslations()
	return tm
}

// initTranslations initializes all translations - exact copy from Python __init__
func (tm *TranslationManager) initTranslations() {
	// Russian translations
	tm.translations["ru"] = map[string]string{
		// CWL Messages
		"cwl_not_participating":         "‚ùå –ö–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ –õ–í–ö.",
		"cwl_back_to_clan":             "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞–Ω—É",
		
		// Analyzer Messages
		"analyzer_coming_soon":          "ü§ñ <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–æ–π–Ω</b>\\n\\nüöß <b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\\n\\n–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\\n–ö–æ–≥–¥–∞-—Ç–æ –æ–Ω –±—É–¥–µ—Ç, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å.\\n\\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
		
		// General Error Messages
		"error_occurred":               "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
		"invalid_tag":                  "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞. –ü—Ä–∏–º–µ—Ä: #ABC123DEF",
		"player_not_found":             "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.",
		"clan_not_found":               "‚ùå –ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.",
		"no_data_available":            "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
		
		// Button Texts
		"back":                         "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
		"cancel":                       "‚ùå –û—Ç–º–µ–Ω–∞",
		"confirm":                      "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
		"menu":                         "üì± –ú–µ–Ω—é",
		"refresh":                      "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
		"settings":                     "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
		
		// Subscription Messages
		"subscription_required":        "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
		"subscription_expired":         "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
		"subscription_active":          "‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {date}",
		
		// Profile Messages
		"profile_linked":               "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ!",
		"profile_already_linked":       "‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.",
		"profile_limit_reached":        "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏.",
		"primary_profile_set":          "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
		
		// War Messages
		"war_not_found":               "‚ùå –í–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∫–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –≤–æ–π–Ω–µ.",
		"war_in_preparation":          "‚è≥ –í–æ–π–Ω–∞ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
		"war_ended":                   "üèÅ –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
		"no_attacks":                  "‚öîÔ∏è –ê—Ç–∞–∫ –µ—â–µ –Ω–µ –±—ã–ª–æ.",
		
		// Building Tracker Messages
		"building_tracker_enabled":    "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–æ.",
		"building_tracker_disabled":   "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
		"building_upgrade_detected":   "üî® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è: {building} –¥–æ —É—Ä–æ–≤–Ω—è {level}",
		
		// Achievement translations - exact copy from Python
		"Friend in Need":               "–î—Ä—É–≥ –≤ –ë–µ–¥–µ",
		"Mortar Mauler":               "–°–æ–∫—Ä—É—à–∏—Ç–µ–ª—å –ú–æ—Ä—Ç–∏—Ä", 
		"Heroic Heist":                "–ì–µ—Ä–æ–∏—á–µ—Å–∫–æ–µ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ",
		"League All-Star":             "–ó–≤–µ–∑–¥–∞ –õ–∏–≥–∏",
		"X-Bow Exterminator":          "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –ê–¥—Å–∫–∏—Ö –õ—É–∫–æ–≤",
		"Firefighter":                 "–ü–æ–∂–∞—Ä–Ω—ã–π",
		"War Hero":                    "–ì–µ—Ä–æ–π –í–æ–π–Ω—ã",
		"Treasurer":                   "–ö–∞–∑–Ω–∞—á–µ–π",
		"Anti-Artillery":              "–ü—Ä–æ—Ç–∏–≤–æ–∞—Ä—Ç–∏–ª–ª–µ—Ä–∏–π—Å–∫–∏–π",
		"Sharing is caring":           "–î–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞—á–∏—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è",
		"Keep your village safe":      "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤–æ—é –¥–µ—Ä–µ–≤–Ω—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
		"Master Engineering":          "–ú–∞—Å—Ç–µ—Ä –¢–µ—Ö–Ω–∏–∫–∏",
		"Next Generation Model":       "–ú–æ–¥–µ–ª—å –ù–æ–≤–æ–≥–æ –ü–æ–∫–æ–ª–µ–Ω–∏—è",
		"Un-Build It":                 "–†–∞–∑—Ä—É—à–∏—Ç—å –≠—Ç–æ",
		"Champion Builder":            "–ß–µ–º–ø–∏–æ–Ω –°—Ç—Ä–æ–∏—Ç–µ–ª—å",
		"High Gear":                   "–í—ã—Å–æ–∫–∞—è –°–∫–æ—Ä–æ—Å—Ç—å",
		"Hidden Treasures":            "–°–∫—Ä—ã—Ç—ã–µ –°–æ–∫—Ä–æ–≤–∏—â–∞",
		"Games Champion":              "–ß–µ–º–ø–∏–æ–Ω –ò–≥—Ä",
		"Dragon Slayer":               "–£–±–∏–π—Ü–∞ –î—Ä–∞–∫–æ–Ω–æ–≤",
		"War League Legend":           "–õ–µ–≥–µ–Ω–¥–∞ –õ–∏–≥–∏ –í–æ–π–Ω",
		"Bigger Coffers":              "–ë–æ–ª—å—à–∏–µ –°—É–Ω–¥—É–∫–∏",
		"Get those Goblins!":          "–ü–æ–π–º–∞–π –ì–æ–±–ª–∏–Ω–æ–≤!",
		"Bigger & Better":             "–ë–æ–ª—å—à–µ –∏ –õ—É—á—à–µ",
		"Nice and Tidy":               "–ß–∏—Å—Ç–æ –∏ –ê–∫–∫—É—Ä–∞—Ç–Ω–æ",
		"Release the Beasts":          "–í—ã–ø—É—Å—Ç–∏ –ó–≤–µ—Ä–µ–π",
		"Gold Grab":                   "–ó–∞—Ö–≤–∞—Ç –ó–æ–ª–æ—Ç–∞",
		"Elixir Escapade":             "–≠–ª–∏–∫—Å–∏—Ä–Ω–æ–µ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
		"Sweet Victory!":              "–°–ª–∞–¥–∫–∞—è –ü–æ–±–µ–¥–∞!",
		"Empire Builder":              "–°—Ç—Ä–æ–∏—Ç–µ–ª—å –ò–º–ø–µ—Ä–∏–∏",
		"Wall Buster":                 "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –°—Ç–µ–Ω",
		"Humiliator":                  "–£–Ω–∏–∑–∏—Ç–µ–ª—å",
		"Union Buster":                "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –°–æ—é–∑–æ–≤",
		"Conqueror":                   "–ó–∞–≤–æ–µ–≤–∞—Ç–µ–ª—å",
		"Unbreakable":                 "–ù–µ—Å–æ–∫—Ä—É—à–∏–º—ã–π",
	}
	
	// English translations
	tm.translations["en"] = map[string]string{
		// CWL Messages
		"cwl_not_participating":         "‚ùå Clan is not participating in current CWL season.",
		"cwl_back_to_clan":             "‚¨ÖÔ∏è Back to clan",
		
		// Analyzer Messages
		"analyzer_coming_soon":          "ü§ñ <b>War Analyzer</b>\\n\\nüöß <b>Under Development</b>\\n\\nThe analyzer is currently under development.\\nIt will be available someday, but not now.\\n\\nStay tuned for updates!",
		
		// General Error Messages
		"error_occurred":               "‚ùå An error occurred. Please try again later.",
		"invalid_tag":                  "‚ùå Invalid tag format. Example: #ABC123DEF",
		"player_not_found":             "‚ùå Player not found. Check the tag is correct.",
		"clan_not_found":               "‚ùå Clan not found. Check the tag is correct.",
		"no_data_available":            "üì≠ No data available to display.",
		
		// Button Texts
		"back":                         "‚¨ÖÔ∏è Back",
		"cancel":                       "‚ùå Cancel",
		"confirm":                      "‚úÖ Confirm",
		"menu":                         "üì± Menu",
		"refresh":                      "üîÑ Refresh",
		"settings":                     "‚öôÔ∏è Settings",
		
		// Subscription Messages
		"subscription_required":        "üíé This feature is available only for premium users.",
		"subscription_expired":         "‚è∞ Your subscription has expired. Renew for premium features access.",
		"subscription_active":          "‚úÖ You have active subscription until {date}",
		
		// Profile Messages
		"profile_linked":               "‚úÖ Player profile linked successfully!",
		"profile_already_linked":       "‚ö†Ô∏è This profile is already linked to your account.",
		"profile_limit_reached":        "‚ùå Profile limit reached for your subscription type.",
		"primary_profile_set":          "‚úÖ Primary profile has been set.",
		
		// War Messages
		"war_not_found":               "‚ùå War not found or clan is not in war.",
		"war_in_preparation":          "‚è≥ War is in preparation phase.",
		"war_ended":                   "üèÅ War has ended.",
		"no_attacks":                  "‚öîÔ∏è No attacks yet.",
		
		// Building Tracker Messages
		"building_tracker_enabled":    "‚úÖ Building upgrade tracking enabled.",
		"building_tracker_disabled":   "‚ùå Building upgrade tracking disabled.",
		"building_upgrade_detected":   "üî® Building upgrade detected: {building} to level {level}",
		
		// Achievement translations remain in English (original names)
		"Friend in Need":               "Friend in Need",
		"Mortar Mauler":               "Mortar Mauler",
		"Heroic Heist":                "Heroic Heist",
		"League All-Star":             "League All-Star",
		"X-Bow Exterminator":          "X-Bow Exterminator",
		"Firefighter":                 "Firefighter",
		"War Hero":                    "War Hero",
		"Treasurer":                   "Treasurer",
		"Anti-Artillery":              "Anti-Artillery",
		"Sharing is caring":           "Sharing is caring",
		"Keep your village safe":      "Keep your village safe",
		"Master Engineering":          "Master Engineering",
		"Next Generation Model":       "Next Generation Model",
		"Un-Build It":                 "Un-Build It",
		"Champion Builder":            "Champion Builder",
		"High Gear":                   "High Gear",
		"Hidden Treasures":            "Hidden Treasures",
		"Games Champion":              "Games Champion",
		"Dragon Slayer":               "Dragon Slayer",
		"War League Legend":           "War League Legend",
		"Bigger Coffers":              "Bigger Coffers",
		"Get those Goblins!":          "Get those Goblins!",
		"Bigger & Better":             "Bigger & Better",
		"Nice and Tidy":               "Nice and Tidy",
		"Release the Beasts":          "Release the Beasts",
		"Gold Grab":                   "Gold Grab",
		"Elixir Escapade":             "Elixir Escapade",
		"Sweet Victory!":              "Sweet Victory!",
		"Empire Builder":              "Empire Builder",
		"Wall Buster":                 "Wall Buster",
		"Humiliator":                  "Humiliator",
		"Union Buster":                "Union Buster",
		"Conqueror":                   "Conqueror",
		"Unbreakable":                 "Unbreakable",
	}
}

// GetText returns translated text - exact copy from Python get_text()
func (tm *TranslationManager) GetText(key string, language string) string {
	// Use default language if language not supported
	if !tm.isLanguageSupported(language) {
		language = tm.defaultLanguage
	}
	
	// Get translation
	if langTranslations, exists := tm.translations[language]; exists {
		if translation, exists := langTranslations[key]; exists {
			return translation
		}
	}
	
	// Fallback to default language
	if language != tm.defaultLanguage {
		if defaultTranslations, exists := tm.translations[tm.defaultLanguage]; exists {
			if translation, exists := defaultTranslations[key]; exists {
				return translation
			}
		}
	}
	
	// Return key if no translation found
	return key
}

// GetUserLanguage determines user language from language code - exact copy from Python
func (tm *TranslationManager) GetUserLanguage(languageCode string) string {
	if languageCode == "" {
		return tm.defaultLanguage
	}
	
	// Extract language from language code (e.g., "en-US" -> "en")
	if len(languageCode) >= 2 {
		lang := languageCode[:2]
		if tm.isLanguageSupported(lang) {
			return lang
		}
	}
	
	return tm.defaultLanguage
}

// isLanguageSupported checks if language is supported
func (tm *TranslationManager) isLanguageSupported(language string) bool {
	for _, supported := range tm.supportedLanguages {
		if supported == language {
			return true
		}
	}
	return false
}

// GetSupportedLanguages returns list of supported languages
func (tm *TranslationManager) GetSupportedLanguages() []string {
	return tm.supportedLanguages
}

// GetDefaultLanguage returns default language
func (tm *TranslationManager) GetDefaultLanguage() string {
	return tm.defaultLanguage
}

// TranslateAchievement translates achievement name - exact copy from Python
func (tm *TranslationManager) TranslateAchievement(achievementName string, language string) string {
	return tm.GetText(achievementName, language)
}

// AddTranslation adds a new translation key
func (tm *TranslationManager) AddTranslation(key, language, translation string) {
	if tm.translations[language] == nil {
		tm.translations[language] = make(map[string]string)
	}
	tm.translations[language][key] = translation
}

// HasTranslation checks if translation exists
func (tm *TranslationManager) HasTranslation(key, language string) bool {
	if langTranslations, exists := tm.translations[language]; exists {
		_, exists := langTranslations[key]
		return exists
	}
	return false
}

// Global translation manager instance
var GlobalTranslationManager = NewTranslationManager()