package bot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Button text constants
const (
	ProfileBtn              = "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
	ClanBtn                 = "üõ° –ö–ª–∞–Ω"
	LinkAccBtn              = "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
	SearchProfileBtn        = "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–µ–≥—É"
	MyClanBtn               = "üõ° –ú–æ–π –∫–ª–∞–Ω (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)"
	SearchClanBtn           = "üîç –ù–∞–π—Ç–∏ –∫–ª–∞–Ω –ø–æ —Ç–µ–≥—É"
	BackBtn                 = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
	MyProfilePrefix         = "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
	ProfileManagerBtn       = "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"
	ClanMembersBtn          = "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
	ClanWarlogBtn           = "‚öîÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–π–Ω—ã"
	BackToClanMenuBtn       = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∫–ª–∞–Ω–æ–≤"
	ClanCurrentCWLBtn       = "‚öîÔ∏è –¢–µ–∫—É—â–µ–µ –õ–í–ö"
	ClanCWLBonusBtn         = "üèÜ –ë–æ–Ω—É—Å—ã –õ–í–ö"
	NotificationsBtn        = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
	ClanCurrentWarBtn       = "‚öîÔ∏è –¢–µ–∫—É—â–∞—è –ö–í"
	SubscriptionBtn         = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞"
	LinkedClansBtn          = "üîó –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–ª–∞–Ω—ã"
	CommunityCenterBtn      = "üèõÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
	AchievementsBtn         = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
	AnalyzerBtn             = "ü§ñ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"
	RequestWarScanBtn       = "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–π–Ω–∞—Ö? –ó–∞–ø—Ä–æ—Å–∏—Ç—å!"
)

// Callback data constants
const (
	MembersCallback                 = "members"
	WarListCallback                 = "warlist"
	WarInfoCallback                 = "warinfo"
	ProfileCallback                 = "profile"
	NotifyToggleCallback            = "notify_toggle"
	CWLBonusCallback                = "cwlbonus"
	MembersSortCallback             = "members_sort"
	MembersViewCallback             = "members_view"
	SubscriptionCallback            = "subscription"
	SubscriptionExtendCallback      = "subscription_extend"
	SubscriptionTypeCallback        = "sub_type"
	SubscriptionPeriodCallback      = "sub_period"
	SubscriptionPayCallback         = "sub_pay"
	PremiumMenuCallback             = "premium_menu"
	NotifyAdvancedCallback          = "notify_advanced"
	NotifyCustomCallback            = "notify_custom"
	BuildingTrackerCallback         = "building_tracker"
	BuildingToggleCallback          = "building_toggle"
	ProfileManagerCallback          = "profile_manager"
	ProfileSelectCallback           = "profile_select"
	ProfileDeleteCallback           = "profile_delete"
	ProfileDeleteConfirmCallback    = "profile_delete_confirm"
	ProfileAddCallback              = "profile_add"
	LinkedClansCallback             = "linked_clans"
	LinkedClanSelectCallback        = "linked_clan_select"
	LinkedClanAddCallback           = "linked_clan_add"
	LinkedClanDeleteCallback        = "linked_clan_delete"
	CommunityCenterCallback         = "community_center"
	BuildingCostsCallback           = "building_costs"
	BuildingCategoryCallback        = "building_category"
	BuildingDetailCallback          = "building_detail"
	BaseLayoutsCallback             = "base_layouts"
	BaseLayoutsTHCallback           = "base_layouts_th"
	AchievementsCallback            = "achievements"
	AchievementsSortCallback        = "achievements_sort"
	AchievementsPageCallback        = "achievements_page"
	CWLBonusDistributionCallback    = "cwl_bonus_distribution"
	WarScanRequestCallback          = "war_scan_request"
)

// MainMenu returns the main menu keyboard
func MainMenu() tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{
		{
			tgbotapi.NewKeyboardButton(ProfileBtn),
			tgbotapi.NewKeyboardButton(ClanBtn),
		},
		{
			tgbotapi.NewKeyboardButton(NotificationsBtn),
			tgbotapi.NewKeyboardButton(CommunityCenterBtn),
		},
		{
			tgbotapi.NewKeyboardButton(AnalyzerBtn),
		},
	}
	return tgbotapi.NewReplyKeyboard(keyboard...)
}

// ProfileMenu returns the profile menu keyboard
func ProfileMenu(playerName *string, hasPremium bool, profileCount int) tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{}
	
	if hasPremium && profileCount > 0 {
		// For premium users with profiles, show profile manager
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton(ProfileManagerBtn),
		})
	} else if playerName != nil && *playerName != "" {
		// For regular users or premium with single profile
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton(fmt.Sprintf("%s (%s)", MyProfilePrefix, *playerName)),
		})
	} else {
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton(LinkAccBtn),
		})
	}
	
	// Always add subscription button
	keyboard = append(keyboard, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(SubscriptionBtn),
	})
	
	keyboard = append(keyboard, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(SearchProfileBtn),
	})
	
	if playerName != nil || (hasPremium && profileCount > 0) {
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton(MyClanBtn),
		})
	}
	
	keyboard = append(keyboard, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(BackBtn),
	})
	
	return tgbotapi.NewReplyKeyboard(keyboard...)
}

// ClanMenu returns the clan menu keyboard
func ClanMenu(playerName *string, hasPremium bool, profileCount int) tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{
		{tgbotapi.NewKeyboardButton(SearchClanBtn)},
		{tgbotapi.NewKeyboardButton(LinkedClansBtn)},
		{tgbotapi.NewKeyboardButton(RequestWarScanBtn)},
	}
	
	// Add "My clan" button if user has linked account
	if playerName != nil || (hasPremium && profileCount > 0) {
		keyboard = append(keyboard, []tgbotapi.KeyboardButton{
			tgbotapi.NewKeyboardButton(MyClanBtn),
		})
	}
	
	keyboard = append(keyboard, []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton(BackBtn),
	})
	
	return tgbotapi.NewReplyKeyboard(keyboard...)
}

// ClanInspectionMenu returns the clan inspection inline keyboard
func ClanInspectionMenu() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", MembersCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("‚öîÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–æ–π–Ω", WarListCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("‚öîÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–π–Ω–∞", "current_war")},
		{tgbotapi.NewInlineKeyboardButtonData("üèÜ –õ–í–ö", "cwl_info")},
		{tgbotapi.NewInlineKeyboardButtonData("üíé –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –õ–í–ö", CWLBonusDistributionCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// MembersPagination returns the members pagination inline keyboard
func MembersPagination(clanTag string, currentPage, totalPages int, sortType, viewType string) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{}
	
	// Sort buttons
	sortButtons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üéñ –ü–æ —Ä–æ–ª–∏",
			fmt.Sprintf("%s:%s:role:%s:%d", MembersSortCallback, clanTag, viewType, currentPage)),
		tgbotapi.NewInlineKeyboardButtonData("üèÜ –ü–æ —Ç—Ä–æ—Ñ–µ—è–º",
			fmt.Sprintf("%s:%s:trophies:%s:%d", MembersSortCallback, clanTag, viewType, currentPage)),
	}
	keyboard = append(keyboard, sortButtons)
	
	// View buttons
	viewButtons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üìã –ö–æ–º–ø–∞–∫—Ç–Ω–æ",
			fmt.Sprintf("%s:%s:%s:compact:%d", MembersViewCallback, clanTag, sortType, currentPage)),
		tgbotapi.NewInlineKeyboardButtonData("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ",
			fmt.Sprintf("%s:%s:%s:detailed:%d", MembersViewCallback, clanTag, sortType, currentPage)),
	}
	keyboard = append(keyboard, viewButtons)
	
	// Navigation buttons
	navButtons := []tgbotapi.InlineKeyboardButton{}
	if currentPage > 1 {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è",
			fmt.Sprintf("%s:%s:%s:%s:%d", MembersSortCallback, clanTag, sortType, viewType, currentPage-1)))
	}
	
	navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("%d/%d", currentPage, totalPages), "noop"))
	
	if currentPage < totalPages {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è",
			fmt.Sprintf("%s:%s:%s:%s:%d", MembersSortCallback, clanTag, sortType, viewType, currentPage+1)))
	}
	
	keyboard = append(keyboard, navButtons)
	
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// WarListPagination returns the war list pagination inline keyboard
func WarListPagination(clanTag string, currentPage, totalPages int, sortOrder string) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{}
	
	// Sort buttons
	sortButtons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üìÖ –ù–µ–¥–∞–≤–Ω–∏–µ",
			fmt.Sprintf("%s:%s:recent:%d", WarListCallback, clanTag, currentPage)),
		tgbotapi.NewInlineKeyboardButtonData("üèÜ –ü–æ–±–µ–¥—ã",
			fmt.Sprintf("%s:%s:wins:%d", WarListCallback, clanTag, currentPage)),
		tgbotapi.NewInlineKeyboardButtonData("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è",
			fmt.Sprintf("%s:%s:losses:%d", WarListCallback, clanTag, currentPage)),
	}
	keyboard = append(keyboard, sortButtons)
	
	// Navigation buttons
	navButtons := []tgbotapi.InlineKeyboardButton{}
	if currentPage > 1 {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è",
			fmt.Sprintf("%s:%s:%s:%d", WarListCallback, clanTag, sortOrder, currentPage-1)))
	}
	
	navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData(
		fmt.Sprintf("%d/%d", currentPage, totalPages), "noop"))
	
	if currentPage < totalPages {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚û°Ô∏è",
			fmt.Sprintf("%s:%s:%s:%d", WarListCallback, clanTag, sortOrder, currentPage+1)))
	}
	
	keyboard = append(keyboard, navButtons)
	
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// NotificationToggle returns the notification toggle inline keyboard
func NotificationToggle() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "enable_all_notifications")},
		{tgbotapi.NewInlineKeyboardButtonData("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "disable_all_notifications")},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// SubscriptionTypes returns the subscription types inline keyboard
func SubscriptionTypes() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üíé Premium", fmt.Sprintf("%s:premium", SubscriptionTypeCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("üíéüíé Pro Plus", fmt.Sprintf("%s:pro_plus", SubscriptionTypeCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// SubscriptionPeriods returns the subscription periods inline keyboard for a given type
func SubscriptionPeriods(subscriptionType string) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{}
	
	if subscriptionType == "premium" {
		keyboard = append(keyboard,
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíé 7 –¥–Ω–µ–π - 50‚ÇΩ", 
				fmt.Sprintf("%s:premium_7", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíé 30 –¥–Ω–µ–π - 150‚ÇΩ", 
				fmt.Sprintf("%s:premium_30", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíé 90 –¥–Ω–µ–π - 350‚ÇΩ", 
				fmt.Sprintf("%s:premium_90", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíé 180 –¥–Ω–µ–π - 600‚ÇΩ", 
				fmt.Sprintf("%s:premium_180", SubscriptionPeriodCallback))},
		)
	} else if subscriptionType == "pro_plus" {
		keyboard = append(keyboard,
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíéüíé 7 –¥–Ω–µ–π - 100‚ÇΩ", 
				fmt.Sprintf("%s:pro_plus_7", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíéüíé 30 –¥–Ω–µ–π - 300‚ÇΩ", 
				fmt.Sprintf("%s:pro_plus_30", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíéüíé 90 –¥–Ω–µ–π - 700‚ÇΩ", 
				fmt.Sprintf("%s:pro_plus_90", SubscriptionPeriodCallback))},
			[]tgbotapi.InlineKeyboardButton{tgbotapi.NewInlineKeyboardButtonData("üíéüíé 180 –¥–Ω–µ–π - 1200‚ÇΩ", 
				fmt.Sprintf("%s:pro_plus_180", SubscriptionPeriodCallback))},
		)
	}
	
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", SubscriptionCallback),
	})
	
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// SubscriptionPayment returns the subscription payment inline keyboard
func SubscriptionPayment(paymentURL string) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", paymentURL)},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// BackToMain returns a simple back to main menu keyboard
func BackToMain() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// CommunityCenterMenu returns the community center menu keyboard
func CommunityCenterMenu() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üèóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–¥–∞–Ω–∏–π", BuildingCostsCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("üó∫Ô∏è –ë–∞–∑—ã", BaseLayoutsCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// BuildingCostsMenu returns the building costs menu keyboard
func BuildingCostsMenu() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üè∞ –ó–∞—â–∏—Ç–∞", fmt.Sprintf("%s:defense", BuildingCategoryCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("‚öîÔ∏è –ê—Ä–º–∏—è", fmt.Sprintf("%s:army", BuildingCategoryCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("üí∞ –†–µ—Å—É—Ä—Å—ã", fmt.Sprintf("%s:resources", BuildingCategoryCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("üëë –ì–µ—Ä–æ–∏", fmt.Sprintf("%s:heroes", BuildingCategoryCallback))},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CommunityCenterCallback)},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// PremiumMenu returns the premium features menu keyboard
func PremiumMenu() tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üèóÔ∏è –¢—Ä–µ–∫–µ—Ä –∑–¥–∞–Ω–∏–π", BuildingTrackerCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", NotifyAdvancedCallback)},
		{tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")},
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// BuildingTrackerMenu returns the building tracker menu keyboard
func BuildingTrackerMenu(isActive bool) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{}
	
	if isActive {
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", 
				fmt.Sprintf("%s:false", BuildingToggleCallback)),
		})
	} else {
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üü¢ –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä", 
				fmt.Sprintf("%s:true", BuildingToggleCallback)),
		})
	}
	
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", PremiumMenuCallback),
	})
	
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// GetSubscriptionMaxProfiles returns the max profiles for a subscription type
func GetSubscriptionMaxProfiles(subscriptionType string) int {
	if subscriptionType == "pro_plus_7" || subscriptionType == "pro_plus_30" || 
	   subscriptionType == "pro_plus_90" || subscriptionType == "pro_plus_180" {
		return 3
	}
	return 1
}
