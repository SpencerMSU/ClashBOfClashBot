package bot

import (
	"ClashBOfClashBot/config"
	"ClashBOfClashBot/internal/api"
	"ClashBOfClashBot/internal/database"
	// "ClashBOfClashBot/internal/services"  // Temporarily disabled - requires model compatibility fixes
	"ClashBOfClashBot/internal/utils"
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ClashBot is the main bot structure
type ClashBot struct {
	config    *config.Config
	bot       *tgbotapi.BotAPI
	db        *database.DatabaseService
	cocClient *api.CocApiClient
	// warArchiver     *services.WarArchiver     // Temporarily disabled
	// buildingMonitor *services.BuildingMonitor // Temporarily disabled
	
	// Handlers
	messageHandler  *MessageHandler
	callbackHandler *CallbackHandler
	messageGen      *MessageGenerator
	
	// Context for cancellation
	ctx    context.Context
	cancel context.CancelFunc
}

// NewClashBot creates a new ClashBot instance
func NewClashBot(cfg *config.Config) (*ClashBot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}
	
	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)
	
	// Create context for graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	
	clashBot := &ClashBot{
		config: cfg,
		bot:    bot,
		ctx:    ctx,
		cancel: cancel,
	}
	
	return clashBot, nil
}

// Initialize initializes all bot components
func (b *ClashBot) Initialize() error {
	log.Println("üîß Initializing bot components...")
	
	// Initialize database
	var err error
	b.db, err = database.NewDatabaseService(b.config.DatabasePath)
	if err != nil {
		return fmt.Errorf("failed to initialize database: %w", err)
	}
	log.Println("‚úÖ Database initialized")
	
	// Initialize COC API client
	b.cocClient = api.NewCocApiClient("https://api.clashofclans.com/v1", b.config.CocAPIToken)
	log.Println("‚úÖ COC API client initialized")
	
	// Initialize message generator
	b.messageGen = NewMessageGenerator(b.db, b.cocClient, b.config)
	log.Println("‚úÖ Message generator initialized")
	
	// Initialize handlers
	b.messageHandler = NewMessageHandler(b.messageGen)
	b.callbackHandler = NewCallbackHandler(b.messageGen)
	log.Println("‚úÖ Handlers initialized")
	
	// Start background services
	if err := b.startBackgroundServices(); err != nil {
		return fmt.Errorf("failed to start background services: %w", err)
	}
	
	log.Println("‚úÖ Bot components initialized successfully")
	return nil
}

// startBackgroundServices starts the war archiver and building monitor
func (b *ClashBot) startBackgroundServices() error {
	// TODO: Fix compatibility issues in services layer
	// Start War Archiver
	/*
	b.warArchiver = services.NewWarArchiver(
		b.config.OurClanTag,
		b.db,
		b.cocClient,
		b.bot,
	)
	go b.warArchiver.Start(b.ctx)
	log.Printf("‚úÖ War archiver started for clan %s", b.config.OurClanTag)
	*/
	
	// Start Building Monitor
	/*
	b.buildingMonitor = services.NewBuildingMonitor(
		b.db,
		b.cocClient,
		b.bot,
	)
	go b.buildingMonitor.Start(b.ctx)
	log.Println("‚úÖ Building monitor started")
	*/
	
	log.Println("‚ö†Ô∏è  Background services (War Archiver, Building Monitor) temporarily disabled - require model compatibility fixes")
	
	return nil
}

// Run starts the bot and handles updates
func (b *ClashBot) Run() error {
	log.Println("üöÄ Starting bot...")
	
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	
	updates := b.bot.GetUpdatesChan(u)
	
	// Setup graceful shutdown
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)
	
	log.Println("‚úÖ Bot is running. Press Ctrl+C to stop.")
	
	for {
		select {
		case <-stop:
			log.Println("üõë Received interrupt signal, shutting down...")
			b.Shutdown()
			return nil
			
		case update := <-updates:
			if update.Message != nil {
				go b.handleMessage(update)
			} else if update.CallbackQuery != nil {
				go b.handleCallback(update)
			}
		}
	}
}

// handleMessage handles incoming text messages
func (b *ClashBot) handleMessage(update tgbotapi.Update) {
	// Handle /start command
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			b.handleStartCommand(update)
		case "help":
			b.handleHelpCommand(update)
		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
				"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
			msg.ReplyMarkup = MainMenu()
			b.bot.Send(msg)
		}
		return
	}
	
	// Handle text messages through message handler
	if err := b.messageHandler.HandleMessage(&update, b.bot); err != nil {
		log.Printf("Error handling message: %v", err)
	}
}

// handleCallback handles callback queries from inline keyboards
func (b *ClashBot) handleCallback(update tgbotapi.Update) {
	if err := b.callbackHandler.HandleCallback(&update, b.bot); err != nil {
		log.Printf("Error handling callback: %v", err)
	}
}

// handleStartCommand handles the /start command
func (b *ClashBot) handleStartCommand(update tgbotapi.Update) {
	welcomeText := `üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClashBot!*

üèÜ *–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:*

üë§ *–ü–†–û–§–ò–õ–ò –ò –ò–ì–†–û–ö–ò*
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
‚Ä¢ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–≥—É
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–ü—Ä–µ–º–∏—É–º)

üõ° *–ö–õ–ê–ù–´ –ò –í–û–ô–ù–´*
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω
‚Ä¢ –¢–µ–∫—É—â–∏–µ –≤–æ–π–Ω—ã –∏ –õ–í–ö
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞—Ç–∞–∫ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–Ω–æ–≤

üîî *–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–π–Ω–∞—Ö
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ü—Ä–µ–º–∏—É–º)
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö –∑–¥–∞–Ω–∏–π (–ü—Ä–µ–º–∏—É–º)

üíé *–ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò*
‚Ä¢ üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
‚Ä¢ ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìã [–ü–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](` + utils.GetPolicyURL() + `)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = MainMenu()
	b.bot.Send(msg)
}

// handleHelpCommand handles the /help command
func (b *ClashBot) handleHelpCommand(update tgbotapi.Update) {
	helpText := `üìñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*
üë§ –ü—Ä–æ—Ñ–∏–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
üõ° –ö–ª–∞–Ω - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–∞—Ö –∏ –≤–æ–π–Ω–∞—Ö
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üèõÔ∏è –¶–µ–Ω—Ç—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ - –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üíé –ü—Ä–µ–º–∏—É–º - –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Negodayo`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = MainMenu()
	b.bot.Send(msg)
}

// Shutdown gracefully shuts down the bot
func (b *ClashBot) Shutdown() {
	log.Println("üîÑ Shutting down bot...")
	
	// Cancel context to stop background services
	b.cancel()
	
	// Close database connection
	if b.db != nil {
		b.db.Close()
		log.Println("‚úÖ Database connection closed")
	}
	
	// Stop bot
	b.bot.StopReceivingUpdates()
	log.Println("‚úÖ Bot stopped receiving updates")
	
	log.Println("‚úÖ Bot shutdown complete")
}
