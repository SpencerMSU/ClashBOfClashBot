package bot

import (
	"log"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"clashbot/internal/config"
	"clashbot/internal/database"
	"clashbot/internal/api"
	"clashbot/internal/payment"
	"clashbot/internal/handlers"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞
type Bot struct {
	config     *config.Config
	bot        *tgbotapi.BotAPI
	db         *database.Service
	cocAPI     *api.CocAPIClient
	paymentSvc *payment.PaymentService
	handler    *handlers.Handler
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(cfg *config.Config) (*Bot, error) {
	log.Println("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞:")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	log.Println("    ‚è≥ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	if err := cfg.Validate(); err != nil {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: %v", err)
	}
	log.Println("    ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

	// –°–æ–∑–¥–∞–µ–º Telegram Bot API
	log.Println("    ‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot API...")
	botAPI, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram Bot API: %v", err)
	}
	log.Printf("    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s", botAPI.Self.UserName)

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	log.Printf("    ‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (%s)...", cfg.DatabasePath)
	db, err := database.New(cfg.DatabasePath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	log.Println("    ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Clash of Clans API
	log.Printf("    ‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Clash of Clans API –∫–ª–∏–µ–Ω—Ç–∞ (%s)...", cfg.CocAPIBaseURL)
	cocAPI := api.NewCocAPIClient(cfg.CocAPIBaseURL, cfg.CocAPIToken)
	log.Println("    ‚úÖ COC API –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
	log.Println("    ‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π (YooKassa)...")
	paymentSvc := payment.New(cfg.BotUsername, "python3", "./payment_bridge.py")
	log.Println("    ‚úÖ –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	log.Println("    ‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	handler := handlers.New(db, cocAPI, paymentSvc, cfg.BotUsername)
	log.Println("    ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")

	log.Println("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")

	return &Bot{
		config:     cfg,
		bot:        botAPI,
		db:         db,
		cocAPI:     cocAPI,
		paymentSvc: paymentSvc,
		handler:    handler,
	}, nil
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Run() error {
	log.Println("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	log.Println("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	log.Println("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram...")
	updates := b.bot.GetUpdatesChan(u)
	
	log.Println("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
	log.Println("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		go b.handleUpdate(update)
	}

	return nil
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("‚ö†Ô∏è –ü–∞–Ω–∏–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", r)
		}
	}()

	switch {
	case update.Message != nil:
		b.handleMessage(update)
	case update.CallbackQuery != nil:
		b.handleCallbackQuery(update)
	default:
		log.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %+v", update)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(update tgbotapi.Update) {
	message := update.Message

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	username := message.From.UserName
	if username == "" {
		username = fmt.Sprintf("%s %s", message.From.FirstName, message.From.LastName)
	}
	log.Printf("üì® [%s] %s", username, message.Text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		log.Printf("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: %s", message.Command())
		b.handler.HandleCommand(b.bot, update)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	log.Printf("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
	b.handleTextMessage(update)
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleTextMessage(update tgbotapi.Update) {
	log.Printf("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç %d: '%s'", 
		update.Message.From.ID, update.Message.Text)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
	// –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–≥–æ–≤, –ø–æ–∏—Å–∫–∞ –∏ —Ç.–¥.
	
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	helpText := "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
	
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
	if _, err := b.bot.Send(msg); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		log.Println("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
func (b *Bot) handleCallbackQuery(update tgbotapi.Update) {
	callback := update.CallbackQuery
	
	// –õ–æ–≥–∏—Ä—É–µ–º callback —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
	username := callback.From.UserName
	if username == "" {
		username = fmt.Sprintf("%s %s", callback.From.FirstName, callback.From.LastName)
	}
	log.Printf("üîò [%s] Callback: %s", username, callback.Data)
	
	// –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ handler
	b.handler.HandleCallback(b.bot, update)
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –±–æ—Ç–∞
func (b *Bot) Close() error {
	log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
	
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
	b.bot.StopReceivingUpdates()
	
	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := b.db.Close(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return err
	}
	
	log.Println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
	return nil
}