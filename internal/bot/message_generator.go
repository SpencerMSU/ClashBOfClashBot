package bot

import (
	"ClashBOfClashBot/config"
	"ClashBOfClashBot/internal/api"
	"ClashBOfClashBot/internal/database"
	"ClashBOfClashBot/internal/models"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MessageGenerator generates and formats messages for the bot
type MessageGenerator struct {
	db        *database.DatabaseService
	cocClient *api.CocApiClient
	config    *config.Config
	
	// Constants for formatting
	MembersPerPage int
	WarsPerPage    int
	
	// Role translations
	roleTranslations map[string]string
}

// NewMessageGenerator creates a new message generator
func NewMessageGenerator(db *database.DatabaseService, cocClient *api.CocApiClient, cfg *config.Config) *MessageGenerator {
	return &MessageGenerator{
		db:             db,
		cocClient:      cocClient,
		config:         cfg,
		MembersPerPage: 10,
		WarsPerPage:    10,
		roleTranslations: map[string]string{
			"leader":   "üëë –ì–ª–∞–≤–∞",
			"coLeader": "‚öúÔ∏è –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
			"admin":    "üî∞ –°—Ç–∞—Ä–µ–π—à–∏–Ω–∞",
			"member":   "üë§ –£—á–∞—Å—Ç–Ω–∏–∫",
		},
	}
}

// ========== Utility Methods ==========

// formatDateTime formats ISO datetime string to readable format in Moscow time
func (m *MessageGenerator) formatDateTime(isoDateTimeStr string) string {
	// Parse ISO datetime (format: 20250919T044950.000Z)
	t, err := time.Parse("20060102T150405.000Z", isoDateTimeStr)
	if err != nil {
		// Try alternative format without milliseconds
		t, err = time.Parse("20060102T150405Z", isoDateTimeStr)
		if err != nil {
			log.Printf("Error parsing datetime %s: %v", isoDateTimeStr, err)
			return isoDateTimeStr
		}
	}
	
	// Convert to Moscow time (UTC+3)
	moscowLocation := time.FixedZone("MSK", 3*60*60)
	moscowTime := t.In(moscowLocation)
	
	// Format to readable form: "19.09.2025 07:49"
	return moscowTime.Format("02.01.2006 15:04")
}

// escapeMarkdown escapes special characters for Markdown
func (m *MessageGenerator) escapeMarkdown(text string) string {
	replacer := strings.NewReplacer(
		"_", "\\_",
		"*", "\\*",
		"[", "\\[",
		"]", "\\]",
		"(", "\\(",
		")", "\\)",
		"~", "\\~",
		"`", "\\`",
		">", "\\>",
		"#", "\\#",
		"+", "\\+",
		"-", "\\-",
		"=", "\\=",
		"|", "\\|",
		"{", "\\{",
		"}", "\\}",
		".", "\\.",
		"!", "\\!",
	)
	return replacer.Replace(text)
}

// formatNumber formats a number with thousand separators
func (m *MessageGenerator) formatNumber(n int) string {
	if n < 1000 {
		return fmt.Sprintf("%d", n)
	}
	return fmt.Sprintf("%s", strings.ReplaceAll(fmt.Sprintf("%d", n), "", ""))
}

// ========== Profile and Player Methods ==========

// HandleProfileMenuRequest handles profile menu request
func (m *MessageGenerator) HandleProfileMenuRequest(update *tgbotapi.Update, bot *tgbotapi.BotAPI) error {
	chatID := update.Message.Chat.ID
	
	// Check user subscription
	subscription, err := m.db.GetSubscription(chatID)
	hasPremium := err == nil && subscription != nil && subscription.IsActive && !subscription.IsExpired()
	
	var playerName *string
	profileCount := 0
	
	if hasPremium {
		// For premium users, check profiles
		profiles, err := m.db.GetUserProfiles(chatID)
		if err == nil {
			profileCount = len(profiles)
			if profileCount > 0 {
				// Get primary profile or first profile
				for _, profile := range profiles {
					if profile.IsPrimary {
						playerData, err := m.cocClient.GetPlayerInfo(profile.PlayerTag)
						if err == nil && playerData != nil {
							name := playerData["name"].(string)
							playerName = &name
						}
						break
					}
				}
			}
		}
	} else {
		// For regular users
		user, err := m.db.FindUser(chatID)
		if err == nil && user != nil {
			playerData, err := m.cocClient.GetPlayerInfo(user.PlayerTag)
			if err == nil && playerData != nil {
				name := playerData["name"].(string)
				playerName = &name
			}
		}
	}
	
	msg := tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:")
	msg.ReplyMarkup = ProfileMenu(playerName, hasPremium, profileCount)
	_, err = bot.Send(msg)
	return err
}

// HandleMyProfileRequest handles request to view own profile
func (m *MessageGenerator) HandleMyProfileRequest(update *tgbotapi.Update, bot *tgbotapi.BotAPI) error {
	chatID := update.Message.Chat.ID
	
	user, err := m.db.FindUser(chatID)
	if err != nil || user == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".")
		msg.ReplyMarkup = ProfileMenu(nil, false, 0)
		_, err := bot.Send(msg)
		return err
	}
	
	return m.DisplayPlayerInfo(update, bot, user.PlayerTag, nil, nil, false)
}

// HandleLinkAccount handles account linking
func (m *MessageGenerator) HandleLinkAccount(update *tgbotapi.Update, bot *tgbotapi.BotAPI, playerTag string) error {
	chatID := update.Message.Chat.ID
	
	playerData, err := m.cocClient.GetPlayerInfo(playerTag)
	if err != nil || playerData == nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞.")
		msg.ReplyMarkup = ProfileMenu(nil, false, 0)
		_, err := bot.Send(msg)
		return err
	}
	
	user := &models.User{
		TelegramID: chatID,
		PlayerTag:  playerTag,
	}
	
	err = m.db.SaveUser(user)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		msg.ReplyMarkup = ProfileMenu(nil, false, 0)
		_, err := bot.Send(msg)
		return err
	}
	
	playerName := playerData["name"].(string)
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf(
		"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"+
			"üë§ –ò–≥—Ä–æ–∫: %s\n"+
			"üè∑ –¢–µ–≥: %s",
		playerName, playerTag))
	msg.ReplyMarkup = ProfileMenu(&playerName, false, 0)
	_, err = bot.Send(msg)
	return err
}

// DisplayPlayerInfo displays player information
func (m *MessageGenerator) DisplayPlayerInfo(update *tgbotapi.Update, bot *tgbotapi.BotAPI, 
	playerTag string, keyboard *tgbotapi.InlineKeyboardMarkup, 
	backKeyboard *tgbotapi.InlineKeyboardMarkup, fromCallback bool) error {
	
	chatID := update.Message.Chat.ID
	
	// Show searching message
	searchMsg := tgbotapi.NewMessage(chatID, "üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞...")
	sentMsg, err := bot.Send(searchMsg)
	if err != nil {
		return err
	}
	
	playerData, err := m.cocClient.GetPlayerInfo(playerTag)
	if err != nil || playerData == nil {
		editMsg := tgbotapi.NewEditMessageText(chatID, sentMsg.MessageID,
			"‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞.")
		bot.Send(editMsg)
		
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = MainMenu()
		bot.Send(msg)
		return nil
	}
	
	// Format player information
	message := m.formatPlayerInfo(playerData)
	
	// Create keyboard with achievements button
	var profileKeyboard [][]tgbotapi.InlineKeyboardButton
	achievementsBtn := tgbotapi.NewInlineKeyboardButtonData("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
		fmt.Sprintf("%s:%s", AchievementsCallback, playerTag))
	profileKeyboard = append(profileKeyboard, []tgbotapi.InlineKeyboardButton{achievementsBtn})
	
	// Add back keyboard buttons if provided
	if backKeyboard != nil {
		profileKeyboard = append(profileKeyboard, backKeyboard.InlineKeyboard...)
	}
	
	// Add keyboard buttons if provided
	if keyboard != nil {
		profileKeyboard = append(profileKeyboard, keyboard.InlineKeyboard...)
	}
	
	finalKeyboard := tgbotapi.NewInlineKeyboardMarkup(profileKeyboard...)
	
	editMsg := tgbotapi.NewEditMessageText(chatID, sentMsg.MessageID, message)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &finalKeyboard
	_, err = bot.Send(editMsg)
	return err
}

// formatPlayerInfo formats player data into a readable message
func (m *MessageGenerator) formatPlayerInfo(playerData map[string]interface{}) string {
	name := playerData["name"].(string)
	tag := playerData["tag"].(string)
	townHallLevel := int(playerData["townHallLevel"].(float64))
	expLevel := int(playerData["expLevel"].(float64))
	trophies := int(playerData["trophies"].(float64))
	
	message := fmt.Sprintf(
		"üë§ *%s*\n"+
		"üè∑ –¢–µ–≥: `%s`\n"+
		"üè∞ –†–∞—Ç—É—à–∞: %d\n"+
		"‚≠ê –£—Ä–æ–≤–µ–Ω—å: %d\n"+
		"üèÜ –¢—Ä–æ—Ñ–µ–∏: %d\n\n",
		m.escapeMarkdown(name), tag, townHallLevel, expLevel, trophies)
	
	// Add clan info if player is in a clan
	if clan, ok := playerData["clan"].(map[string]interface{}); ok {
		clanName := clan["name"].(string)
		clanTag := clan["tag"].(string)
		role, _ := clan["role"].(string)
		roleTranslation := m.roleTranslations[role]
		if roleTranslation == "" {
			roleTranslation = role
		}
		
		message += fmt.Sprintf(
			"üõ° –ö–ª–∞–Ω: %s\n"+
			"üè∑ –¢–µ–≥ –∫–ª–∞–Ω–∞: `%s`\n"+
			"üë• –†–æ–ª—å: %s\n\n",
			m.escapeMarkdown(clanName), clanTag, roleTranslation)
	} else {
		message += "üõ° –ö–ª–∞–Ω: –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ\n\n"
	}
	
	// Add war stats
	if warStars, ok := playerData["warStars"].(float64); ok {
		message += fmt.Sprintf("‚≠ê –ó–≤–µ–∑–¥ –≤ –≤–æ–π–Ω–∞—Ö: %d\n", int(warStars))
	}
	if attackWins, ok := playerData["attackWins"].(float64); ok {
		message += fmt.Sprintf("‚öîÔ∏è –ü–æ–±–µ–¥ –≤ –∞—Ç–∞–∫–∞—Ö: %d\n", int(attackWins))
	}
	if defenseWins, ok := playerData["defenseWins"].(float64); ok {
		message += fmt.Sprintf("üõ° –ü–æ–±–µ–¥ –≤ –∑–∞—â–∏—Ç–µ: %d\n", int(defenseWins))
	}
	
	return message
}

// HandleMyClanRequest handles request to view own clan
func (m *MessageGenerator) HandleMyClanRequest(update *tgbotapi.Update, bot *tgbotapi.BotAPI) error {
	chatID := update.Message.Chat.ID
	
	user, err := m.db.FindUser(chatID)
	if err != nil || user == nil {
		msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".")
		msg.ReplyMarkup = ProfileMenu(nil, false, 0)
		_, err := bot.Send(msg)
		return err
	}
	
	playerData, err := m.cocClient.GetPlayerInfo(user.PlayerTag)
	if err != nil || playerData == nil {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
		msg.ReplyMarkup = MainMenu()
		_, err := bot.Send(msg)
		return err
	}
	
	clan, ok := playerData["clan"].(map[string]interface{})
	if !ok {
		playerName := ""
		if name, ok := playerData["name"].(string); ok {
			playerName = name
		}
		msg := tgbotapi.NewMessage(chatID, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.")
		msg.ReplyMarkup = ProfileMenu(&playerName, false, 0)
		_, err := bot.Send(msg)
		return err
	}
	
	clanTag := clan["tag"].(string)
	return m.DisplayClanInfo(update, bot, clanTag)
}

// DisplayClanInfo displays clan information
func (m *MessageGenerator) DisplayClanInfo(update *tgbotapi.Update, bot *tgbotapi.BotAPI, clanTag string) error {
	chatID := update.Message.Chat.ID
	
	loadingMsg := tgbotapi.NewMessage(chatID, "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ...")
	sentMsg, err := bot.Send(loadingMsg)
	if err != nil {
		return err
	}
	
	clanData, err := m.cocClient.GetClanInfo(clanTag)
	if err != nil || clanData == nil {
		editMsg := tgbotapi.NewEditMessageText(chatID, sentMsg.MessageID,
			"‚ùå –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞/–∞–ø–∏.")
		bot.Send(editMsg)
		return nil
	}
	
	message := m.formatClanInfo(clanData)
	
	// Create clan menu keyboard
	keyboard := ClanInspectionMenu()
	
	editMsg := tgbotapi.NewEditMessageText(chatID, sentMsg.MessageID, message)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard
	_, err = bot.Send(editMsg)
	return err
}

// formatClanInfo formats clan data into a readable message
func (m *MessageGenerator) formatClanInfo(clanData map[string]interface{}) string {
	name := clanData["name"].(string)
	tag := clanData["tag"].(string)
	clanLevel := int(clanData["clanLevel"].(float64))
	members := int(clanData["members"].(float64))
	
	message := fmt.Sprintf(
		"üõ° *%s*\n"+
		"üè∑ –¢–µ–≥: `%s`\n"+
		"‚≠ê –£—Ä–æ–≤–µ–Ω—å –∫–ª–∞–Ω–∞: %d\n"+
		"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d/50\n\n",
		m.escapeMarkdown(name), tag, clanLevel, members)
	
	if clanPoints, ok := clanData["clanPoints"].(float64); ok {
		message += fmt.Sprintf("üèÜ –û—á–∫–∏ –∫–ª–∞–Ω–∞: %d\n", int(clanPoints))
	}
	
	if warWins, ok := clanData["warWins"].(float64); ok {
		message += fmt.Sprintf("‚öîÔ∏è –ü–æ–±–µ–¥ –≤ –≤–æ–π–Ω–∞—Ö: %d\n", int(warWins))
	}
	
	if warWinStreak, ok := clanData["warWinStreak"].(float64); ok {
		message += fmt.Sprintf("üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: %d\n", int(warWinStreak))
	}
	
	if description, ok := clanData["description"].(string); ok && description != "" {
		message += fmt.Sprintf("\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n%s\n", description)
	}
	
	return message
}

// ========== Notification Methods ==========

// HandleNotificationsMenu handles notifications menu
func (m *MessageGenerator) HandleNotificationsMenu(update *tgbotapi.Update, bot *tgbotapi.BotAPI) error {
	chatID := update.Message.Chat.ID
	
	msg := tgbotapi.NewMessage(chatID, 
		"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"+
		"‚è≥ –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"+
		"–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–π–Ω–∞—Ö, –¥–æ–Ω–∞—Ç–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = MainMenu()
	_, err := bot.Send(msg)
	return err
}

// ========== Subscription Methods ==========

// HandleSubscriptionMenu handles subscription menu
func (m *MessageGenerator) HandleSubscriptionMenu(update *tgbotapi.Update, bot *tgbotapi.BotAPI) error {
	chatID := update.Message.Chat.ID
	
	subscription, err := m.db.GetSubscription(chatID)
	
	var message string
	if err == nil && subscription != nil && subscription.IsActive && !subscription.IsExpired() {
		daysRemaining := subscription.DaysRemaining()
		message = fmt.Sprintf(
			"üíé *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞*\n\n"+
			"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"+
			"üì¶ –¢–∏–ø: %s\n"+
			"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n"+
			"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n\n"+
			"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
			subscription.SubscriptionType, daysRemaining, subscription.EndDate)
	} else {
		message = "üíé *–ü–æ–¥–ø–∏—Å–∫–∏*\n\n" +
			"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n" +
			"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:"
	}
	
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = SubscriptionTypes()
	_, err = bot.Send(msg)
	return err
}

// Close closes any resources held by the message generator
func (m *MessageGenerator) Close() error {
	// Nothing to close for now
	return nil
}
