package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"clashbot/internal/database"
	"clashbot/internal/api"
	"clashbot/internal/payment"
	"clashbot/internal/models"
)

// Handler –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
type Handler struct {
	db         *database.Service
	cocAPI     *api.CocAPIClient
	paymentSvc *payment.PaymentService
	botUsername string
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func New(db *database.Service, cocAPI *api.CocAPIClient, paymentSvc *payment.PaymentService, botUsername string) *Handler {
	return &Handler{
		db:         db,
		cocAPI:     cocAPI,
		paymentSvc: paymentSvc,
		botUsername: botUsername,
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (h *Handler) HandleCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message == nil {
		log.Println("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ HandleCommand")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	log.Printf("üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d", update.Message.From.ID)
	user, err := h.ensureUser(update.Message.From)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}
	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ID=%d, PlayerTag=%s", user.TelegramID, user.PlayerTag)

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	h.db.UpdateLastActivity(user.TelegramID)

	command := update.Message.Command()
	log.Printf("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: %s", command)
	
	switch command {
	case "start":
		log.Println("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")
		h.handleStart(bot, update)
	case "profile":
		log.Println("üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile")
		h.handleProfile(bot, update)
	case "link":
		log.Println("üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /link")
		h.handleLink(bot, update)
	case "clan":
		log.Println("üõ° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clan")
		h.handleClan(bot, update)
	case "search":
		log.Println("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search")
		h.handleSearch(bot, update)
	case "subscription":
		log.Println("üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscription")
		h.handleSubscription(bot, update)
	case "help":
		log.Println("‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help")
		h.handleHelp(bot, update)
	default:
		log.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", command)
		h.handleUnknownCommand(bot, update)
	}
	
	log.Printf("‚úÖ –ö–æ–º–∞–Ω–¥–∞ %s –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", command)
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã
func (h *Handler) HandleCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.CallbackQuery == nil {
		log.Println("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π callback –≤ HandleCallback")
		return
	}

	callback := update.CallbackQuery
	data := callback.Data

	log.Printf("üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", data, callback.From.ID)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	if _, err := bot.Request(callbackConfig); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback: %v", err)
	} else {
		log.Println("‚úÖ Callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback'–æ–≤
	switch {
	case strings.HasPrefix(data, "subscription_"):
		log.Println("üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–æ–¥–ø–∏—Å–∫–∏")
		h.handleSubscriptionCallback(bot, update)
	case strings.HasPrefix(data, "payment_"):
		log.Println("üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–ª–∞—Ç–µ–∂–∞")
		h.handlePaymentCallback(bot, update)
	case strings.HasPrefix(data, "clan_"):
		log.Println("üõ° –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–ª–∞–Ω–∞")
		h.handleClanCallback(bot, update)
	default:
		log.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", data)
	}
	
	log.Printf("‚úÖ Callback %s –æ–±—Ä–∞–±–æ—Ç–∞–Ω", data)
}

// ensureUser —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
func (h *Handler) ensureUser(from *tgbotapi.User) (*models.User, error) {
	user, err := h.db.GetUserByTelegramID(from.ID)
	if err != nil {
		return nil, err
	}

	if user == nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err = h.db.CreateUser(from.ID, from.UserName, from.FirstName, from.LastName)
		if err != nil {
			return nil, err
		}
	}

	return user, nil
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *Handler) handleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	welcomeText := `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClashBot!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Clash of Clans:

üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
üõ° **–ö–ª–∞–Ω** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
‚öîÔ∏è **–í–æ–π–Ω—ã** - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–π–Ω
üíé **–ü—Ä–µ–º–∏—É–º** - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /link —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	bot.Send(msg)
}

// handleProfile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /profile
func (h *Handler) handleProfile(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	user, err := h.db.GetUserByTelegramID(update.Message.From.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	if user.PlayerTag == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link <–≤–∞—à_—Ç–µ–≥> —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ —á–µ—Ä–µ–∑ API
	playerInfo, err := h.cocAPI.GetPlayerInfo(user.PlayerTag)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: %v", err))
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
	profileText := h.formatPlayerProfile(playerInfo)
	
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, profileText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	bot.Send(msg)
}

// handleLink –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /link
func (h *Handler) handleLink(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	args := strings.Fields(update.Message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞!\n\n–ü—Ä–∏–º–µ—Ä: `/link #ABC123`")
		msg.ParseMode = tgbotapi.ModeMarkdown
		bot.Send(msg)
		return
	}

	playerTag := args[1]
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–≥–∞
	formattedTag, err := api.FormatPlayerTag(playerTag)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: %v", err))
		bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	playerInfo, err := h.cocAPI.GetPlayerInfo(formattedTag)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err))
		bot.Send(msg)
		return
	}

	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	err = h.db.UpdateUserPlayerTag(update.Message.From.ID, formattedTag)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–≥—Ä–æ–∫–∞: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	confirmText := fmt.Sprintf("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\nüë§ **%s** `%s`\nüèÜ %d üè∞ TH%d",
		playerInfo.Name, playerInfo.Tag, playerInfo.Trophies, playerInfo.TownHallLevel)
	
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, confirmText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	bot.Send(msg)
}

// handleClan –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /clan
func (h *Handler) handleClan(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	user, err := h.db.GetUserByTelegramID(update.Message.From.ID)
	if err != nil || user.PlayerTag == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
	playerInfo, err := h.cocAPI.GetPlayerInfo(user.PlayerTag)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err))
		bot.Send(msg)
		return
	}

	if playerInfo.Clan == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
		bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
	clanInfo, err := h.cocAPI.GetClanInfo(playerInfo.Clan.Tag)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–∞: %v", err))
		bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
	clanText := h.formatClanInfo(clanInfo)
	
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, clanText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	bot.Send(msg)
}

// handleSearch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search
func (h *Handler) handleSearch(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	args := strings.Fields(update.Message.Text)
	if len(args) < 2 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
			"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞!\n\n–ü—Ä–∏–º–µ—Ä: `/search #ABC123`")
		msg.ParseMode = tgbotapi.ModeMarkdown
		bot.Send(msg)
		return
	}

	tag := args[1]
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–≥—Ä–æ–∫ –∏–ª–∏ –∫–ª–∞–Ω
	if strings.HasPrefix(tag, "#") && len(tag) >= 4 {
		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∏–≥—Ä–æ–∫–∞
		if playerInfo, err := h.cocAPI.GetPlayerInfo(tag); err == nil {
			profileText := h.formatPlayerProfile(playerInfo)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, profileText)
			msg.ParseMode = tgbotapi.ModeMarkdown
			bot.Send(msg)
			return
		}
		
		// –ü–æ—Ç–æ–º –∫–∞–∫ –∫–ª–∞–Ω
		if clanInfo, err := h.cocAPI.GetClanInfo(tag); err == nil {
			clanText := h.formatClanInfo(clanInfo)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, clanText)
			msg.ParseMode = tgbotapi.ModeMarkdown
			bot.Send(msg)
			return
		}
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
		"‚ùå –ò–≥—Ä–æ–∫ –∏–ª–∏ –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
	bot.Send(msg)
}

// handleSubscription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscription
func (h *Handler) handleSubscription(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.db.GetActiveSubscription(update.Message.From.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		return
	}

	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if subscription != nil {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
		text = fmt.Sprintf("üíé **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞**\n\nüìã –¢–∏–ø: %s\nüìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: %s",
			subscription.SubscriptionType,
			subscription.EndDate.Format("02.01.2006 15:04"))
			
		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", "subscription_extend"),
			),
		)
	} else {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
		text = `üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ ClashBot**

üéØ **–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üèóÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∑–¥–∞–Ω–∏–π
‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–æ–π–Ω

üí∞ **–¢–∞—Ä–∏—Ñ—ã:**`

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("1 –º–µ—Å—è—Ü - 49‚ÇΩ", "subscription_premium_1month"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("3 –º–µ—Å—è—Ü–∞ - 119‚ÇΩ", "subscription_premium_3months"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("6 –º–µ—Å—è—Ü–µ–≤ - 199‚ÇΩ", "subscription_premium_6months"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("1 –≥–æ–¥ - 349‚ÇΩ", "subscription_premium_1year"),
			),
		)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *Handler) handleHelp(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	helpText := `üéÆ **–ö–æ–º–∞–Ω–¥—ã ClashBot**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
/link <—Ç–µ–≥> - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üõ° **–ö–ª–∞–Ω:**
/clan - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
/search <—Ç–µ–≥> - –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞/–∫–ª–∞–Ω–∞

üíé **–ü—Ä–µ–º–∏—É–º:**
/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π

‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞:**
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

**–ü—Ä–∏–º–µ—Ä—ã:**
/link #ABC123DEF
/search #ClanTag`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
	msg.ParseMode = tgbotapi.ModeMarkdown
	bot.Send(msg)
}

// handleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *Handler) handleUnknownCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
		"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

// formatPlayerProfile —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
func (h *Handler) formatPlayerProfile(player *api.PlayerInfo) string {
	text := fmt.Sprintf("üë§ **%s** `%s`\n\n", player.Name, player.Tag)
	text += fmt.Sprintf("üè∞ TH%d ‚Ä¢ üèÜ %d ‚Ä¢ ‚≠ê %d\n", player.TownHallLevel, player.Trophies, player.WarStars)
	text += fmt.Sprintf("üìà –†–µ–∫–æ—Ä–¥: %d üèÜ\n", player.BestTrophies)
	text += fmt.Sprintf("‚öîÔ∏è –ê—Ç–∞–∫: %d ‚Ä¢ üõ° –ó–∞—â–∏—Ç: %d\n", player.AttackWins, player.DefenseWins)
	text += fmt.Sprintf("üéÅ –î–∞–Ω–æ: %d ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: %d\n", player.DonationsGiven, player.DonationsReceived)
	
	if player.Clan != nil {
		text += fmt.Sprintf("\nüõ° **–ö–ª–∞–Ω:** %s `%s`", player.Clan.Name, player.Clan.Tag)
	}
	
	return text
}

// formatClanInfo —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ
func (h *Handler) formatClanInfo(clan *api.ClanInfo) string {
	text := fmt.Sprintf("üõ° **%s** `%s`\n\n", clan.Name, clan.Tag)
	text += fmt.Sprintf("üìà –£—Ä–æ–≤–µ–Ω—å: %d ‚Ä¢ üèÜ %d –æ—á–∫–æ–≤\n", clan.ClanLevel, clan.ClanPoints)
	text += fmt.Sprintf("üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d/50\n", clan.Members)
	text += fmt.Sprintf("‚öîÔ∏è –í–æ–π–Ω—ã: %d –ø–æ–±–µ–¥, %d –ø–æ—Ä–∞–∂–µ–Ω–∏–π\n", clan.WarWins, clan.WarLosses)
	text += fmt.Sprintf("üî• –°–µ—Ä–∏—è: %d\n", clan.WarWinStreak)
	
	if clan.Description != "" {
		text += fmt.Sprintf("\nüìù %s", clan.Description)
	}
	
	return text
}

// handleSubscriptionCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func (h *Handler) handleSubscriptionCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	callback := update.CallbackQuery
	subscriptionType := strings.TrimPrefix(callback.Data, "subscription_")
	
	// –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Python YooKassa API
	returnURL := fmt.Sprintf("https://t.me/%s?start=payment_success_%s", h.botUsername, subscriptionType)
	
	paymentData, err := h.paymentSvc.CreatePayment(callback.From.ID, subscriptionType, returnURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
	name, _ := h.paymentSvc.GetSubscriptionName(subscriptionType)
	price, _ := h.paymentSvc.GetSubscriptionPrice(subscriptionType)
	
	text := fmt.Sprintf("üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\nüìã %s\nüí∞ –°—É–º–º–∞: %.2f ‚ÇΩ\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", 
		name, price)
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
	var paymentURL string
	if confirmation, ok := paymentData.Confirmation["confirmation_url"]; ok {
		paymentURL = confirmation.(string)
	}
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", paymentURL),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "payment_check_"+paymentData.ID),
		),
	)
	
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

// handlePaymentCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –ø–ª–∞—Ç–µ–∂–µ–π
func (h *Handler) handlePaymentCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	callback := update.CallbackQuery
	paymentID := strings.TrimPrefix(callback.Data, "payment_check_")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
	paymentData, err := h.paymentSvc.CheckPaymentStatus(paymentID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: %v", err)
		
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
		return
	}
	
	if paymentData.Status == "succeeded" {
		// –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
		subscriptionType := paymentData.Metadata["subscription_type"]
		duration := h.paymentSvc.GetSubscriptionDuration(subscriptionType)
		
		amount, _ := strconv.ParseFloat(paymentData.Amount["value"].(string), 64)
		
		subscription := &models.Subscription{
			TelegramID:       callback.From.ID,
			SubscriptionType: subscriptionType,
			StartDate:        time.Now(),
			EndDate:          time.Now().Add(duration),
			IsActive:         true,
			PaymentID:        paymentID,
			Amount:           amount,
		}
		
		err = h.db.CreateSubscription(subscription)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		}
		
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
		bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, 
			"‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		bot.Send(msg)
	}
}

// handleClanCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –∫–ª–∞–Ω–∞
func (h *Handler) handleClanCallback(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–∞–Ω–æ–º
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–π–Ω –∏ —Ç.–¥.
}