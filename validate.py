"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""
import asyncio
import os
import sys
import tempfile
import logging

# –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['BOT_TOKEN'] = 'test_token'
os.environ['COC_API_TOKEN'] = 'test_coc_token'

async def validate_components():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        from config import config
        assert config.BOT_TOKEN == 'test_token'
        assert config.COC_API_TOKEN == 'test_coc_token'
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö...")
        from models.user import User
        from models.war import WarToSave, AttackData
        
        user = User(123, "#ABC123")
        assert user.telegram_id == 123
        assert user.player_tag == "#ABC123"
        
        attack = AttackData("TestPlayer", 3, 95.5)
        assert attack.attacker_name == "TestPlayer"
        assert attack.stars == 3
        
        war = WarToSave(
            end_time="2024-01-01T00:00:00Z",
            opponent_name="Test Clan",
            team_size=15,
            clan_stars=30,
            opponent_stars=25,
            clan_destruction=85.5,
            opponent_destruction=75.2,
            clan_attacks_used=28,
            result="win",
            is_cwl_war=False,
            total_violations=2
        )
        assert war.result == "win"
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö: OK")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º)
        print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
            from database import DatabaseService
            db_service = DatabaseService(tmp_db.name)
            await db_service.init_db()
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db_service.save_user(user)
            found_user = await db_service.find_user(123)
            assert found_user is not None
            assert found_user.player_tag == "#ABC123"
            
            # –¢–µ—Å—Ç –≤–æ–π–Ω—ã
            await db_service.save_war(war)
            exists = await db_service.war_exists(war.end_time)
            assert exists is True
            
            os.unlink(tmp_db.name)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ COC API –∫–ª–∏–µ–Ω—Ç–∞
        print("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ COC API –∫–ª–∏–µ–Ω—Ç–∞...")
        from coc_api import CocApiClient, format_clan_tag, format_player_tag
        
        assert format_clan_tag("abc123") == "#ABC123"
        assert format_player_tag("abc123def") == "#ABC123DEF"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        coc_client = CocApiClient()
        assert coc_client.base_url == 'https://api.clashofclans.com/v1'
        print("‚úÖ COC API –∫–ª–∏–µ–Ω—Ç: OK")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        print("‚å®Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
        from keyboards import Keyboards
        
        main_menu = Keyboards.main_menu()
        assert main_menu is not None
        
        profile_menu = Keyboards.profile_menu("TestPlayer")
        assert profile_menu is not None
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: OK")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        from user_state import UserState
        
        assert UserState.AWAITING_PLAYER_TAG_TO_LINK is not None
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: OK")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±–µ–∑ Telegram)
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        from message_generator import MessageGenerator
        from handlers import MessageHandler, CallbackHandler
        
        msg_gen = MessageGenerator(db_service, coc_client)
        msg_handler = MessageHandler(msg_gen)
        callback_handler = CallbackHandler(msg_gen)
        
        assert msg_handler.message_generator is not None
        assert callback_handler.message_generator is not None
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: OK")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω
        print("‚öîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –≤–æ–π–Ω...")
        from war_archiver import WarArchiver
        
        archiver = WarArchiver("#TEST123", db_service, coc_client)
        assert archiver.clan_tag == "#TEST123"
        assert archiver.is_running is False
        print("‚úÖ –ê—Ä—Ö–∏–≤–∞—Ç–æ—Ä –≤–æ–π–Ω: OK")
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    success = await validate_components()
    
    if success:
        print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ BOT_TOKEN –∏ COC_API_TOKEN")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        sys.exit(0)
    else:
        print("\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())