package main

import (
	"fmt"
	"log"
	"os"
	"testing"

	"clashbot/internal/config"
	"clashbot/internal/payment"
	"clashbot/internal/api"
	"clashbot/internal/database"
)

// TestConfigLoad –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func TestConfigLoad(t *testing.T) {
	cfg, err := config.Load()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if cfg.DatabasePath != "clashbot.db" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ –ë–î: %s", cfg.DatabasePath)
	}

	if cfg.OurClanTag != "#2PQU0PLJ2" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–≥ –∫–ª–∞–Ω–∞: %s", cfg.OurClanTag)
	}

	if cfg.CocAPIBaseURL != "https://api.clashofclans.com/v1" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π URL API: %s", cfg.CocAPIBaseURL)
	}

	log.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
}

// TestPaymentBridge –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É Python bridge –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
func TestPaymentBridge(t *testing.T) {
	paymentSvc := payment.New("TestBot", "python3", "./payment_bridge.py")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
	price, err := paymentSvc.GetSubscriptionPrice("premium_1month")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: %v", err)
	}

	if price != 1.00 {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: %.2f, –æ–∂–∏–¥–∞–ª–æ—Å—å: 1.00", price)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
	name, err := paymentSvc.GetSubscriptionName("premium_1month")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %v", err)
	}

	expectedName := "ClashBot –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
	if name != expectedName {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: %s, –æ–∂–∏–¥–∞–ª–æ—Å—å: %s", name, expectedName)
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	duration := paymentSvc.GetSubscriptionDuration("premium_1month")
	expectedDays := 30
	actualDays := int(duration.Hours() / 24)
	if actualDays != expectedDays {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π, –æ–∂–∏–¥–∞–ª–æ—Å—å: %d", actualDays, expectedDays)
	}

	log.Printf("‚úÖ Payment bridge —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}

// TestAPITagFormatting –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤
func TestAPITagFormatting(t *testing.T) {
	testCases := []struct {
		input    string
		expected string
		hasError bool
	}{
		{"ABC123", "#ABC123", false},
		{"#abc123", "#ABC123", false},
		{"  #abc123  ", "#ABC123", false},
		{"", "", true},
		{"AB", "", true}, // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
	}

	for _, tc := range testCases {
		result, err := api.FormatPlayerTag(tc.input)
		if tc.hasError {
			if err == nil {
				t.Errorf("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: %s", tc.input)
			}
		} else {
			if err != nil {
				t.Errorf("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ %s: %v", tc.input, err)
			}
			if result != tc.expected {
				t.Errorf("–î–ª—è –≤—Ö–æ–¥–∞ %s –æ–∂–∏–¥–∞–ª—Å—è %s, –ø–æ–ª—É—á–µ–Ω %s", tc.input, tc.expected, result)
			}
		}
	}

	log.Printf("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}

// TestMigrationCompatibility –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python –≤–µ—Ä—Å–∏–µ–π
func TestMigrationCompatibility(t *testing.T) {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python –≤–µ—Ä—Å–∏–µ–π...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	components := map[string]string{
		"‚úÖ Config":         "internal/config/config.go",
		"‚úÖ Database":       "internal/database/service.go",
		"‚úÖ CocAPI":         "internal/api/coc_client.go",
		"‚úÖ Bot":            "internal/bot/bot.go",
		"‚úÖ Handlers":       "internal/handlers/handlers.go",
		"‚úÖ Payment":        "internal/payment/service.go",
		"‚úÖ Models":         "internal/models/",
		"‚úÖ Python Bridge":  "payment_bridge.py",
	}

	fmt.Println("\nüìã –ö–û–ú–ü–û–ù–ï–ù–¢–´ GO:")
	for component, file := range components {
		fmt.Printf("  %s: %s\n", component, file)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
	features := []string{
		"‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞",
		"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞",
		"‚úÖ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–≥—É",
		"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ",
		"‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞",
		"‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ (—á–µ—Ä–µ–∑ Python)",
		"‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞",
		"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
	}

	fmt.Println("\nüéÆ –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê:")
	for _, feature := range features {
		fmt.Printf("  %s\n", feature)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –ë–î
	dbTables := []string{
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ users",
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ wars",
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ attacks",
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions",
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ building_trackers",
		"‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications",
	}

	fmt.Println("\nüóÑÔ∏è –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
	for _, table := range dbTables {
		fmt.Printf("  %s\n", table)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Go
	improvements := []string{
		"üöÄ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
		"üíæ –ú–µ–Ω—å—à–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
		"üîß –û–¥–∏–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª",
		"‚ö° –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å",
		"üõ°Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è",
		"üêç –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Python YooKassa",
		"‚úÖ 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API",
	}

	fmt.Println("\nüåü –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê GO –í–ï–†–°–ò–ò:")
	for _, improvement := range improvements {
		fmt.Printf("  %s\n", improvement)
	}

	fmt.Printf("\nüéâ –ò–¢–û–ì: –£—Å–ø–µ—à–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Go —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º Python YooKassa API!\n")
	fmt.Printf("üìä –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, %d —Ñ—É–Ω–∫—Ü–∏–π\n", len(components), len(features))
	fmt.Printf("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: %d —Ç–∞–±–ª–∏—Ü\n", len(dbTables))
	fmt.Printf("üèóÔ∏è –ù–û–í–û–ï: Go –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + Python YooKassa —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!\n")

	log.Printf("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
}

// TestDatabaseOperations –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
func TestDatabaseOperations(t *testing.T) {
	db, err := database.New("test_final.db")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: %v", err)
	}
	defer func() {
		db.Close()
		// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ë–î
		os.Remove("test_final.db")
	}()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_, err = db.CreateUser(999, "final_test", "Final", "Test")
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	log.Println("‚úÖ Database operations with CGO disabled: SUCCESS")
}

// TestMain –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã
func TestMain(m *testing.M) {
	log.Println("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ClashBot Go...")
	m.Run()
	log.Println("üèÅ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
}