"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ - –∞–Ω–∞–ª–æ–≥ Java MessageHandler –∏ CallbackHandler
"""
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from keyboards import Keyboards, WarSort, MemberSort, MemberView
from user_state import UserState
from message_generator import MessageGenerator
from coc_api import format_clan_tag, format_player_tag

logger = logging.getLogger(__name__)


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, message_generator: MessageGenerator):
        self.message_generator = message_generator
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not update.message or not update.message.text:
            return
        
        chat_id = update.effective_chat.id
        text = update.message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = context.user_data.get('state')
        
        if user_state:
            await self._handle_state_message(update, context, text, user_state)
        else:
            await self._handle_menu_command(update, context, text)
    
    async def _handle_state_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   text: str, state: UserState):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
        if (text == Keyboards.MY_CLAN_BTN or
            text == Keyboards.PROFILE_BTN or
            text == Keyboards.CLAN_BTN or
            text == Keyboards.BACK_BTN or
            text == Keyboards.BACK_TO_CLAN_MENU_BTN or
            text == Keyboards.NOTIFICATIONS_BTN or
            text == Keyboards.SUBSCRIPTION_BTN or
            text.startswith(Keyboards.MY_PROFILE_PREFIX)):
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
            context.user_data.pop('state', None)
            await self._handle_menu_command(update, context, text)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥
        tag = format_player_tag(text) if 'PLAYER' in state.value else format_clan_tag(text)
        
        try:
            if state == UserState.AWAITING_PLAYER_TAG_TO_LINK:
                await self.message_generator.handle_link_account(update, context, tag)
            
            elif state == UserState.AWAITING_PLAYER_TAG_TO_SEARCH:
                await self.message_generator.display_player_info(update, context, tag, 
                                                                Keyboards.clan_inspection_menu())
            
            elif state == UserState.AWAITING_CLAN_TAG_TO_SEARCH:
                await self.message_generator.display_clan_info(update, context, tag)
            
            elif state == UserState.AWAITING_NOTIFICATION_TIME:
                await self._handle_notification_time_input(update, context, text)
            
            elif state == UserState.AWAITING_PLAYER_TAG_TO_ADD_PROFILE:
                await self.message_generator.handle_add_profile_tag(update, context, tag)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
    
    async def _handle_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        chat_id = update.effective_chat.id
        
        try:
            if text.startswith(Keyboards.MY_PROFILE_PREFIX):
                await self.message_generator.handle_my_profile_request(update, context)
            
            elif text == Keyboards.PROFILE_BTN:
                await self.message_generator.handle_profile_menu_request(update, context)
            
            elif text == Keyboards.PROFILE_MANAGER_BTN:
                await self.message_generator.handle_profile_manager_request(update, context)
            
            elif text == Keyboards.CLAN_BTN:
                await update.message.reply_text("–ú–µ–Ω—é –∫–ª–∞–Ω–∞:", 
                                               reply_markup=Keyboards.clan_menu())
            
            elif text == Keyboards.LINK_ACC_BTN:
                context.user_data['state'] = UserState.AWAITING_PLAYER_TAG_TO_LINK
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ Clash of Clans.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.SEARCH_PROFILE_BTN:
                context.user_data['state'] = UserState.AWAITING_PLAYER_TAG_TO_SEARCH
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.MY_CLAN_BTN:
                await self.message_generator.handle_my_clan_request(update, context)
            
            elif text == Keyboards.SEARCH_CLAN_BTN:
                context.user_data['state'] = UserState.AWAITING_CLAN_TAG_TO_SEARCH
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.NOTIFICATIONS_BTN:
                await self.message_generator.handle_notifications_menu(update, context)
            
            elif text == Keyboards.SUBSCRIPTION_BTN:
                await self.message_generator.handle_subscription_menu(update, context)
            
            elif text == Keyboards.BACK_BTN or text == Keyboards.BACK_TO_CLAN_MENU_BTN:
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                                               reply_markup=Keyboards.main_menu())
            
            elif text.startswith("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ") and "(–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)" in text:
                await self._handle_notification_setup(update, context, text)
            
            elif text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
                await self._handle_enable_all_notifications(update, context)
            
            elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                                               reply_markup=Keyboards.main_menu())
            
            elif text == "/start":
                await update.message.reply_text(
                    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è Clash of Clans!\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–∞—Ö\n"
                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–π–Ω—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=Keyboards.main_menu()
                )
            
            else:
                await update.message.reply_text(
                    "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=Keyboards.main_menu()
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é '{text}': {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=Keyboards.main_menu()
            )
    
    async def _handle_notification_setup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await self.message_generator.db_service.get_subscription(chat_id)
        
        if not subscription or not subscription.is_active or subscription.is_expired():
            await update.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                reply_markup=Keyboards.main_menu()
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 1" in text:
            notification_number = 1
        elif "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 2" in text:
            notification_number = 2
        elif "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 3" in text:
            notification_number = 3
        else:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['configuring_notification'] = notification_number
        context.user_data['state'] = UserState.AWAITING_NOTIFICATION_TIME
        
        await update.message.reply_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_number}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ú–∏–Ω—É—Ç—ã: 15m, 30m, 45m\n"
            f"‚Ä¢ –ß–∞—Å—ã: 1h, 2h, 12h\n\n"
            f"‚è∞ –ú–∞–∫—Å–∏–º—É–º: 24 —á–∞—Å–∞ (24h)\n"
            f"‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
        )
    
    async def _handle_enable_all_notifications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await self.message_generator.db_service.get_subscription(chat_id)
        
        if not subscription or not subscription.is_active or subscription.is_expired():
            await update.message.reply_text(
                "‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                reply_markup=Keyboards.main_menu()
            )
            return
        
        # –í–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        success = await self.message_generator.db_service.enable_notifications(chat_id)
        
        if success:
            await update.message.reply_text(
                "‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
                "üîî –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –¥–æ –ö–í\n"
                "‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω.",
                reply_markup=Keyboards.main_menu()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=Keyboards.main_menu()
            )
    
    async def _handle_notification_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        
        if text.lower() == '–æ—Ç–º–µ–Ω–∞':
            context.user_data.pop('configuring_notification', None)
            await update.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_minutes = self._parse_notification_time(text)
        
        if time_minutes is None:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ –ú–∏–Ω—É—Ç—ã: 15m, 30m, 45m\n"
                "‚Ä¢ –ß–∞—Å—ã: 1h, 2h, 12h\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞':"
            )
            return
        
        if time_minutes > 1440:  # 24 —á–∞—Å–∞
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 24 —á–∞—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞':"
            )
            return
        
        notification_number = context.user_data.get('configuring_notification', 1)
        
        # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        
        time_display = self._format_time_display(time_minutes)
        
        await update.message.reply_text(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_number} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_display} –¥–æ –Ω–∞—á–∞–ª–∞ –ö–í\n\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω.",
            reply_markup=Keyboards.main_menu()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('configuring_notification', None)
    
    def _parse_notification_time(self, text: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç—ã"""
        text = text.strip().lower()
        
        try:
            if text.endswith('m'):
                minutes = int(text[:-1])
                return minutes
            elif text.endswith('h'):
                hours = int(text[:-1])
                return hours * 60
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç
                return int(text)
        except ValueError:
            return None
    
    def _format_time_display(self, minutes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if minutes < 60:
            return f"{minutes} –º–∏–Ω"
        elif minutes % 60 == 0:
            hours = minutes // 60
            return f"{hours} —á"
        else:
            hours = minutes // 60
            mins = minutes % 60
            return f"{hours} —á {mins} –º–∏–Ω"


class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, message_generator: MessageGenerator):
        self.message_generator = message_generator
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "noop":
            return
        
        data_parts = query.data.split(":")
        callback_type = data_parts[0]
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        
        try:
            if callback_type == Keyboards.MEMBERS_CALLBACK:
                await self._handle_members_callback(update, context)
            
            elif callback_type == Keyboards.MEMBERS_SORT_CALLBACK:
                await self._handle_members_sort(update, context, data_parts)
            
            elif callback_type == Keyboards.MEMBERS_VIEW_CALLBACK:
                await self._handle_members_view(update, context, data_parts)
            
            elif callback_type == Keyboards.WAR_LIST_CALLBACK:
                await self._handle_war_list(update, context, data_parts)
            
            elif callback_type == Keyboards.WAR_INFO_CALLBACK:
                await self._handle_war_info(update, context, data_parts)
            
            elif callback_type == Keyboards.PROFILE_CALLBACK:
                await self._handle_profile_callback(update, context, data_parts)
            
            elif callback_type == Keyboards.NOTIFY_TOGGLE_CALLBACK:
                await self.message_generator.handle_notification_toggle(update, context, message_id)
            
            elif callback_type == Keyboards.CWL_BONUS_CALLBACK:
                await self._handle_cwl_bonus(update, context, data_parts)
            
            elif callback_type == "current_war":
                await self._handle_current_war(update, context)
            
            elif callback_type == "cwl_info":
                await self._handle_cwl_info(update, context)
            
            elif callback_type == Keyboards.SUBSCRIPTION_CALLBACK:
                await self._handle_subscription_menu(update, context)
            
            elif callback_type == Keyboards.SUBSCRIPTION_EXTEND_CALLBACK:
                await self._handle_subscription_extend(update, context)
            
            elif callback_type == Keyboards.SUBSCRIPTION_PERIOD_CALLBACK:
                await self._handle_subscription_period(update, context, data_parts)
            
            elif callback_type == Keyboards.SUBSCRIPTION_TYPE_CALLBACK:
                await self._handle_subscription_type(update, context, data_parts)
            
            elif callback_type == Keyboards.SUBSCRIPTION_PAY_CALLBACK:
                await self._handle_subscription_payment(update, context, data_parts)
            
            elif callback_type == Keyboards.PREMIUM_MENU_CALLBACK:
                await self._handle_premium_menu(update, context)
            
            elif callback_type == Keyboards.NOTIFY_ADVANCED_CALLBACK:
                await self._handle_notify_advanced(update, context)
            
            elif callback_type == Keyboards.BUILDING_TRACKER_CALLBACK:
                await self._handle_building_tracker(update, context)
            
            elif callback_type == Keyboards.BUILDING_TOGGLE_CALLBACK:
                await self._handle_building_toggle(update, context)
            
            elif callback_type == Keyboards.PROFILE_MANAGER_CALLBACK:
                await self._handle_profile_manager(update, context)
            
            elif callback_type == Keyboards.PROFILE_SELECT_CALLBACK:
                await self._handle_profile_select(update, context, data_parts)
            
            elif callback_type == Keyboards.PROFILE_DELETE_CALLBACK:
                await self._handle_profile_delete_menu(update, context)
            
            elif callback_type == Keyboards.PROFILE_DELETE_CONFIRM_CALLBACK:
                await self._handle_profile_delete_confirm(update, context, data_parts)
            
            elif callback_type == Keyboards.PROFILE_ADD_CALLBACK:
                await self._handle_profile_add(update, context)
            
            elif callback_type == "confirm_payment":
                await self._handle_payment_confirmation(update, context, data_parts)
            
            elif callback_type == "clan_info":
                await self._handle_clan_info_callback(update, context)
            
            elif callback_type == "war_attacks":
                await self._handle_war_attacks(update, context, data_parts)
            
            elif callback_type == "war_violations":
                await self._handle_war_violations(update, context, data_parts)
            
            elif callback_type == "main_menu":
                await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                              reply_markup=Keyboards.main_menu())

            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback —Ç–∏–ø: {callback_type}")
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback '{query.data}': {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def _handle_members_sort(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if len(data_parts) < 5:
            return
        
        clan_tag = data_parts[1]
        sort_type = data_parts[2]
        view_type = data_parts[3]
        page = int(data_parts[4])
        
        await self.message_generator.display_members_page(
            update, context, clan_tag, page, sort_type, view_type
        )
    
    async def _handle_members_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if len(data_parts) < 5:
            return
        
        clan_tag = data_parts[1]
        sort_type = data_parts[2]
        view_type = data_parts[3]
        page = int(data_parts[4])
        
        await self.message_generator.display_members_page(
            update, context, clan_tag, page, sort_type, view_type
        )
    
    async def _handle_war_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        # Handle initial war list button click (just "warlist")
        if len(data_parts) == 1:
            clan_tag = context.user_data.get('inspecting_clan')
            if clan_tag:
                await self.message_generator.display_war_list_page(
                    update, context, clan_tag, sort_order="recent", page=1
                )
            else:
                await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return
        
        # Handle pagination and sorting (warlist:clan_tag:sort_order:page)
        if len(data_parts) < 4:
            return
        
        clan_tag = data_parts[1]
        sort_order = data_parts[2]
        page = int(data_parts[3])
        
        await self.message_generator.display_war_list_page(
            update, context, clan_tag, sort_order, page
        )
    
    async def _handle_war_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              data_parts: list):
        """–û–±—Ä–∞–±ÔøΩÔøΩ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        if len(data_parts) < 3:
            return
        
        clan_tag = data_parts[1]
        war_end_time = data_parts[2]
        
        await self.message_generator.display_single_war_details(
            update, context, clan_tag, war_end_time
        )
    
    async def _handle_profile_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞"""
        if len(data_parts) < 2:
            return
        
        player_tag = data_parts[1]
        
        # –°–æÔøΩÔøΩ–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º" –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        back_keyboard = None
        inspecting_clan = context.user_data.get('inspecting_clan')
        if inspecting_clan:
            back_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", 
                                    callback_data=Keyboards.MEMBERS_CALLBACK)],
                [InlineKeyboardButton("üõ° –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ", 
                                    callback_data="clan_info")]
            ])
        
        await self.message_generator.display_player_info(
            update, context, player_tag, back_keyboard
        )
    
    async def _handle_clan_info_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±ÔøΩÔøΩ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—ÇÔøΩÔøΩ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ"""
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            async with self.message_generator.coc_client as client:
                clan_data = await client.get_clan_info(clan_tag)
                
                if clan_data:
                    message = self.message_generator._format_clan_info(clan_data)
                    keyboard = Keyboards.clan_inspection_menu()
                    
                    await update.callback_query.edit_message_text(
                        message, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
                    )
                else:
                    await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.")
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_cwl_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        if len(data_parts) < 2:
            return
        
        year_month = data_parts[1]
        await self.message_generator.display_cwl_bonus_info(update, context, year_month)
    
    async def _handle_members_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self.message_generator.display_members_page(
                update, context, clan_tag, page=1, sort_type="role", view_type="compact"
            )
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_current_war(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            await self.message_generator.display_current_war(update, context, clan_tag)
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_cwl_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            await self.message_generator.display_cwl_info(update, context, clan_tag)
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        await self.message_generator.handle_subscription_menu(update, context)
    
    async def _handle_subscription_extend(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        await self.message_generator.handle_subscription_extend(update, context)
    
    async def _handle_subscription_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if len(data_parts) < 2:
            return
        
        subscription_type = data_parts[1]
        await self.message_generator.handle_subscription_period_selection(
            update, context, subscription_type
        )
    
    async def _handle_subscription_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                       data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if len(data_parts) < 2:
            return
        
        subscription_type = data_parts[1]
        await self.message_generator.handle_subscription_type_selection(
            update, context, subscription_type
        )
    
    async def _handle_subscription_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ü–µ–Ω–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        if len(data_parts) < 2:
            return
        
        subscription_type = data_parts[1]
        await self.message_generator.handle_subscription_payment_confirmation(
            update, context, subscription_type
        )
    
    async def _handle_premium_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º –º–µ–Ω—é"""
        await self.message_generator.handle_premium_menu(update, context)
    
    async def _handle_notify_advanced(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        await self.message_generator.handle_advanced_notifications(update, context)
    
    async def _handle_building_tracker(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        await self.message_generator.handle_building_tracker_menu(update, context)
    
    async def _handle_building_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π"""
        await self.message_generator.handle_building_tracker_toggle(update, context)
    
    async def _handle_payment_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        if len(data_parts) < 2:
            return
        
        subscription_type = data_parts[1]
        await self.message_generator.handle_subscription_period_selection(
            update, context, subscription_type
        )
    
    async def _handle_war_attacks(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç–∞–∫ –≤–æ–π–Ω—ã"""
        if len(data_parts) < 3:
            return
        
        clan_tag = data_parts[1]
        war_end_time = data_parts[2]
        
        await self.message_generator.display_war_attacks(
            update, context, clan_tag, war_end_time
        )
    
    async def _handle_war_violations(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤–æ–π–Ω—ã"""
        if len(data_parts) < 3:
            return
        
        clan_tag = data_parts[1]
        war_end_time = data_parts[2]
        
        await self.message_generator.display_war_violations(
            update, context, clan_tag, war_end_time
        )

    async def _handle_profile_manager(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        await self.message_generator.handle_profile_manager_request(update, context)

    async def _handle_profile_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        if len(data_parts) < 2:
            return
        
        player_tag = data_parts[1]
        await self.message_generator.display_profile_from_manager(update, context, player_tag)

    async def _handle_profile_delete_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        await self.message_generator.handle_profile_delete_menu(update, context)

    async def _handle_profile_delete_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                           data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        if len(data_parts) < 2:
            return
        
        player_tag = data_parts[1]
        await self.message_generator.handle_profile_delete_confirm(update, context, player_tag)

    async def _handle_profile_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        await self.message_generator.handle_profile_add_request(update, context)