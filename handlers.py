"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ - –∞–Ω–∞–ª–æ–≥ Java MessageHandler –∏ CallbackHandler
"""
import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from keyboards import Keyboards, WarSort, MemberSort, MemberView
from user_state import UserState
from message_generator import MessageGenerator
from coc_api import format_clan_tag, format_player_tag

logger = logging.getLogger(__name__)


class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, message_generator: MessageGenerator):
        self.message_generator = message_generator
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not update.message or not update.message.text:
            return
        
        chat_id = update.effective_chat.id
        text = update.message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = context.user_data.get('state')
        
        if user_state:
            await self._handle_state_message(update, context, text, user_state)
        else:
            await self._handle_menu_command(update, context, text)
    
    async def _handle_state_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   text: str, state: UserState):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞"""
        chat_id = update.effective_chat.id
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥
        tag = format_player_tag(text) if 'PLAYER' in state.value else format_clan_tag(text)
        
        try:
            if state == UserState.AWAITING_PLAYER_TAG_TO_LINK:
                await self.message_generator.handle_link_account(update, context, tag)
            
            elif state == UserState.AWAITING_PLAYER_TAG_TO_SEARCH:
                await self.message_generator.display_player_info(update, context, tag, 
                                                                Keyboards.clan_inspection_menu())
            
            elif state == UserState.AWAITING_CLAN_TAG_TO_SEARCH:
                await self.message_generator.display_clan_info(update, context, tag)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
    
    async def _handle_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        chat_id = update.effective_chat.id
        
        try:
            if text.startswith(Keyboards.MY_PROFILE_PREFIX):
                await self.message_generator.handle_my_profile_request(update, context)
            
            elif text == Keyboards.PROFILE_BTN:
                await self.message_generator.handle_profile_menu_request(update, context)
            
            elif text == Keyboards.CLAN_BTN:
                await update.message.reply_text("–ú–µ–Ω—é –∫–ª–∞–Ω–∞:", 
                                               reply_markup=Keyboards.clan_menu())
            
            elif text == Keyboards.LINK_ACC_BTN:
                context.user_data['state'] = UserState.AWAITING_PLAYER_TAG_TO_LINK
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ Clash of Clans.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.SEARCH_PROFILE_BTN:
                context.user_data['state'] = UserState.AWAITING_PLAYER_TAG_TO_SEARCH
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.MY_CLAN_BTN:
                await self.message_generator.handle_my_clan_request(update, context)
            
            elif text == Keyboards.SEARCH_CLAN_BTN:
                context.user_data['state'] = UserState.AWAITING_CLAN_TAG_TO_SEARCH
                await update.message.reply_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∫–ª–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC123DEF"
                )
            
            elif text == Keyboards.NOTIFICATIONS_BTN:
                await self.message_generator.handle_notifications_menu(update, context)
            
            elif text == Keyboards.SUBSCRIPTION_BTN:
                await self.message_generator.handle_subscription_menu(update, context)
            
            elif text == Keyboards.BACK_BTN or text == Keyboards.BACK_TO_CLAN_MENU_BTN:
                await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                                               reply_markup=Keyboards.main_menu())
            
            elif text == "/start":
                await update.message.reply_text(
                    "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è Clash of Clans!\n\n"
                    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–∞—Ö\n"
                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–æ–π–Ω—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω–∞—Ö\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=Keyboards.main_menu()
                )
            
            else:
                await update.message.reply_text(
                    "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                    reply_markup=Keyboards.main_menu()
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é '{text}': {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=Keyboards.main_menu()
            )


class CallbackHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, message_generator: MessageGenerator):
        self.message_generator = message_generator
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "noop":
            return
        
        data_parts = query.data.split(":")
        if len(data_parts) < 2:
            return
        
        callback_type = data_parts[0]
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        
        try:
            if callback_type == Keyboards.MEMBERS_CALLBACK:
                await self._handle_members_callback(update, context)
            
            elif callback_type == Keyboards.MEMBERS_SORT_CALLBACK:
                await self._handle_members_sort(update, context, data_parts)
            
            elif callback_type == Keyboards.MEMBERS_VIEW_CALLBACK:
                await self._handle_members_view(update, context, data_parts)
            
            elif callback_type == Keyboards.WAR_LIST_CALLBACK:
                await self._handle_war_list(update, context, data_parts)
            
            elif callback_type == Keyboards.WAR_INFO_CALLBACK:
                await self._handle_war_info(update, context, data_parts)
            
            elif callback_type == Keyboards.PROFILE_CALLBACK:
                await self._handle_profile_callback(update, context, data_parts)
            
            elif callback_type == Keyboards.NOTIFY_TOGGLE_CALLBACK:
                await self.message_generator.handle_notification_toggle(update, context, message_id)
            
            elif callback_type == Keyboards.CWL_BONUS_CALLBACK:
                await self._handle_cwl_bonus(update, context, data_parts)
            
            elif callback_type == "current_war":
                await self._handle_current_war(update, context)
            
            elif callback_type == "cwl_info":
                await self._handle_cwl_info(update, context)
            
            elif callback_type == Keyboards.SUBSCRIPTION_CALLBACK:
                await self._handle_subscription_menu(update, context)
            
            elif callback_type == Keyboards.SUBSCRIPTION_PERIOD_CALLBACK:
                await self._handle_subscription_period(update, context, data_parts)
            
            elif callback_type == "main_menu":
                await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
                await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                              reply_markup=Keyboards.main_menu())
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback '{query.data}': {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def _handle_members_sort(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if len(data_parts) < 5:
            return
        
        clan_tag = data_parts[1]
        sort_type = data_parts[2]
        view_type = data_parts[3]
        page = int(data_parts[4])
        
        await self.message_generator.display_members_page(
            update, context, clan_tag, page, sort_type, view_type
        )
    
    async def _handle_members_view(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if len(data_parts) < 5:
            return
        
        clan_tag = data_parts[1]
        sort_type = data_parts[2]
        view_type = data_parts[3]
        page = int(data_parts[4])
        
        await self.message_generator.display_members_page(
            update, context, clan_tag, page, sort_type, view_type
        )
    
    async def _handle_war_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–π–Ω"""
        # Handle initial war list button click (just "warlist")
        if len(data_parts) == 1:
            clan_tag = context.user_data.get('inspecting_clan')
            if clan_tag:
                await self.message_generator.display_war_list_page(
                    update, context, clan_tag, sort_order="recent", page=1
                )
            else:
                await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return
        
        # Handle pagination and sorting (warlist:clan_tag:sort_order:page)
        if len(data_parts) < 4:
            return
        
        clan_tag = data_parts[1]
        sort_order = data_parts[2]
        page = int(data_parts[3])
        
        await self.message_generator.display_war_list_page(
            update, context, clan_tag, sort_order, page
        )
    
    async def _handle_war_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                              data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ"""
        if len(data_parts) < 3:
            return
        
        clan_tag = data_parts[1]
        war_end_time = data_parts[2]
        
        await self.message_generator.display_single_war_details(
            update, context, clan_tag, war_end_time
        )
    
    async def _handle_profile_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                      data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞"""
        if len(data_parts) < 2:
            return
        
        player_tag = data_parts[1]
        await self.message_generator.display_player_info(
            update, context, player_tag, Keyboards.clan_inspection_menu()
        )
    
    async def _handle_cwl_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–æ–≤ –õ–í–ö"""
        if len(data_parts) < 2:
            return
        
        year_month = data_parts[1]
        await self.message_generator.display_cwl_bonus_info(update, context, year_month)
    
    async def _handle_members_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await self.message_generator.display_members_page(
                update, context, clan_tag, page=1, sort_type="role", view_type="compact"
            )
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_current_war(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            await self.message_generator.display_current_war(update, context, clan_tag)
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_cwl_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –õ–í–ö"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∫–ª–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        clan_tag = context.user_data.get('inspecting_clan')
        if clan_tag:
            await self.message_generator.display_cwl_info(update, context, clan_tag)
        else:
            await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    
    async def _handle_subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        await self.message_generator.handle_subscription_menu(update, context)
    
    async def _handle_subscription_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         data_parts: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if len(data_parts) < 2:
            return
        
        subscription_type = data_parts[1]
        await self.message_generator.handle_subscription_period_selection(
            update, context, subscription_type
        )